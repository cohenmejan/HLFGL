// generated

#pragma once

#if HLFGL_ENABLE_GL

extern "C" {
	typedef unsigned int GLenum;
	#include <KHR/khrplatform.h>
	typedef khronos_float_t GLfloat;
	typedef int GLint;
	typedef int GLsizei;
	typedef unsigned int GLbitfield;
	typedef double GLdouble;
	typedef unsigned int GLuint;
	typedef unsigned char GLboolean;
	typedef khronos_uint8_t GLubyte;
	typedef khronos_int8_t GLbyte;
	typedef khronos_int16_t GLshort;
	typedef khronos_uint16_t GLushort;
	typedef khronos_ssize_t GLsizeiptr;
	typedef khronos_intptr_t GLintptr;
	typedef char GLchar;
	typedef struct __GLsync *GLsync;
	typedef khronos_uint64_t GLuint64;
	typedef khronos_int64_t GLint64;
	typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
}

#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_QUADS 0x0007
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901
#define GL_CURRENT_BIT 0x00000001
#define GL_POINT_BIT 0x00000002
#define GL_LINE_BIT 0x00000004
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_LIGHTING_BIT 0x00000040
#define GL_FOG_BIT 0x00000080
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_VIEWPORT_BIT 0x00000800
#define GL_TRANSFORM_BIT 0x00001000
#define GL_ENABLE_BIT 0x00002000
#define GL_HINT_BIT 0x00008000
#define GL_EVAL_BIT 0x00010000
#define GL_LIST_BIT 0x00020000
#define GL_TEXTURE_BIT 0x00040000
#define GL_SCISSOR_BIT 0x00080000
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUAD_STRIP 0x0008
#define GL_POLYGON 0x0009
#define GL_ACCUM 0x0100
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_LOGIC_OP 0x0BF1
#define GL_AUX_BUFFERS 0x0C00
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_BORDER 0x1005
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_2_BYTES 0x1407
#define GL_3_BYTES 0x1408
#define GL_4_BYTES 0x1409
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_MODELVIEW 0x1700
#define GL_PROJECTION 0x1701
#define GL_COLOR_INDEX 0x1900
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_BITMAP 0x1A00
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_S 0x2000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_CLAMP 0x2900
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_VERTEX_ARRAY 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_RESCALE_NORMAL 0x803A
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_NORMAL_MAP 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMBINE 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_RGB_SCALE 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_SUBTRACT 0x84E7
#define GL_CONSTANT 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PREVIOUS 0x8578
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_RGB 0x8582
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC2_ALPHA 0x858A
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_POINT_SPRITE 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_INDEX 0x8222
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_ALPHA_INTEGER 0x8D97
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_DISPLAY_LIST 0x82E7
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_CLEAR_TEXTURE 0x9365
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_CONTEXT_LOST 0x0507
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_COLOR_TABLE 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_HISTOGRAM 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_MINMAX 0x802E
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED

namespace HLF::GL {
	typedef void(*Fn_glCullFace)(GLenum mode);
	inline Fn_glCullFace s_fn_glCullFace {};
	typedef void(*Fn_glFrontFace)(GLenum mode);
	inline Fn_glFrontFace s_fn_glFrontFace {};
	typedef void(*Fn_glHint)(GLenum target, GLenum mode);
	inline Fn_glHint s_fn_glHint {};
	typedef void(*Fn_glLineWidth)(GLfloat width);
	inline Fn_glLineWidth s_fn_glLineWidth {};
	typedef void(*Fn_glPointSize)(GLfloat size);
	inline Fn_glPointSize s_fn_glPointSize {};
	typedef void(*Fn_glPolygonMode)(GLenum face, GLenum mode);
	inline Fn_glPolygonMode s_fn_glPolygonMode {};
	typedef void(*Fn_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glScissor s_fn_glScissor {};
	typedef void(*Fn_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
	inline Fn_glTexParameterf s_fn_glTexParameterf {};
	typedef void(*Fn_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
	inline Fn_glTexParameterfv s_fn_glTexParameterfv {};
	typedef void(*Fn_glTexParameteri)(GLenum target, GLenum pname, GLint param);
	inline Fn_glTexParameteri s_fn_glTexParameteri {};
	typedef void(*Fn_glTexParameteriv)(GLenum target, GLenum pname, const GLint * params);
	inline Fn_glTexParameteriv s_fn_glTexParameteriv {};
	typedef void(*Fn_glTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTexImage1D s_fn_glTexImage1D {};
	typedef void(*Fn_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTexImage2D s_fn_glTexImage2D {};
	typedef void(*Fn_glDrawBuffer)(GLenum buf);
	inline Fn_glDrawBuffer s_fn_glDrawBuffer {};
	typedef void(*Fn_glClear)(GLbitfield mask);
	inline Fn_glClear s_fn_glClear {};
	typedef void(*Fn_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	inline Fn_glClearColor s_fn_glClearColor {};
	typedef void(*Fn_glClearStencil)(GLint s);
	inline Fn_glClearStencil s_fn_glClearStencil {};
	typedef void(*Fn_glClearDepth)(GLdouble depth);
	inline Fn_glClearDepth s_fn_glClearDepth {};
	typedef void(*Fn_glStencilMask)(GLuint mask);
	inline Fn_glStencilMask s_fn_glStencilMask {};
	typedef void(*Fn_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	inline Fn_glColorMask s_fn_glColorMask {};
	typedef void(*Fn_glDepthMask)(GLboolean flag);
	inline Fn_glDepthMask s_fn_glDepthMask {};
	typedef void(*Fn_glDisable)(GLenum cap);
	inline Fn_glDisable s_fn_glDisable {};
	typedef void(*Fn_glEnable)(GLenum cap);
	inline Fn_glEnable s_fn_glEnable {};
	typedef void(*Fn_glFinish)();
	inline Fn_glFinish s_fn_glFinish {};
	typedef void(*Fn_glFlush)();
	inline Fn_glFlush s_fn_glFlush {};
	typedef void(*Fn_glBlendFunc)(GLenum sfactor, GLenum dfactor);
	inline Fn_glBlendFunc s_fn_glBlendFunc {};
	typedef void(*Fn_glLogicOp)(GLenum opcode);
	inline Fn_glLogicOp s_fn_glLogicOp {};
	typedef void(*Fn_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
	inline Fn_glStencilFunc s_fn_glStencilFunc {};
	typedef void(*Fn_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
	inline Fn_glStencilOp s_fn_glStencilOp {};
	typedef void(*Fn_glDepthFunc)(GLenum func);
	inline Fn_glDepthFunc s_fn_glDepthFunc {};
	typedef void(*Fn_glPixelStoref)(GLenum pname, GLfloat param);
	inline Fn_glPixelStoref s_fn_glPixelStoref {};
	typedef void(*Fn_glPixelStorei)(GLenum pname, GLint param);
	inline Fn_glPixelStorei s_fn_glPixelStorei {};
	typedef void(*Fn_glReadBuffer)(GLenum src);
	inline Fn_glReadBuffer s_fn_glReadBuffer {};
	typedef void(*Fn_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
	inline Fn_glReadPixels s_fn_glReadPixels {};
	typedef void(*Fn_glGetBooleanv)(GLenum pname, GLboolean * data);
	inline Fn_glGetBooleanv s_fn_glGetBooleanv {};
	typedef void(*Fn_glGetDoublev)(GLenum pname, GLdouble * data);
	inline Fn_glGetDoublev s_fn_glGetDoublev {};
	typedef GLenum(*Fn_glGetError)();
	inline Fn_glGetError s_fn_glGetError {};
	typedef void(*Fn_glGetFloatv)(GLenum pname, GLfloat * data);
	inline Fn_glGetFloatv s_fn_glGetFloatv {};
	typedef void(*Fn_glGetIntegerv)(GLenum pname, GLint * data);
	inline Fn_glGetIntegerv s_fn_glGetIntegerv {};
	typedef const GLubyte *(*Fn_glGetString)(GLenum name);
	inline Fn_glGetString s_fn_glGetString {};
	typedef void(*Fn_glGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
	inline Fn_glGetTexImage s_fn_glGetTexImage {};
	typedef void(*Fn_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params);
	inline Fn_glGetTexParameterfv s_fn_glGetTexParameterfv {};
	typedef void(*Fn_glGetTexParameteriv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetTexParameteriv s_fn_glGetTexParameteriv {};
	typedef void(*Fn_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat * params);
	inline Fn_glGetTexLevelParameterfv s_fn_glGetTexLevelParameterfv {};
	typedef void(*Fn_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint * params);
	inline Fn_glGetTexLevelParameteriv s_fn_glGetTexLevelParameteriv {};
	typedef GLboolean(*Fn_glIsEnabled)(GLenum cap);
	inline Fn_glIsEnabled s_fn_glIsEnabled {};
	typedef void(*Fn_glDepthRange)(GLdouble n, GLdouble f);
	inline Fn_glDepthRange s_fn_glDepthRange {};
	typedef void(*Fn_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glViewport s_fn_glViewport {};
	typedef void(*Fn_glNewList)(GLuint list, GLenum mode);
	inline Fn_glNewList s_fn_glNewList {};
	typedef void(*Fn_glEndList)();
	inline Fn_glEndList s_fn_glEndList {};
	typedef void(*Fn_glCallList)(GLuint list);
	inline Fn_glCallList s_fn_glCallList {};
	typedef void(*Fn_glCallLists)(GLsizei n, GLenum type, const void * lists);
	inline Fn_glCallLists s_fn_glCallLists {};
	typedef void(*Fn_glDeleteLists)(GLuint list, GLsizei range);
	inline Fn_glDeleteLists s_fn_glDeleteLists {};
	typedef GLuint(*Fn_glGenLists)(GLsizei range);
	inline Fn_glGenLists s_fn_glGenLists {};
	typedef void(*Fn_glListBase)(GLuint base);
	inline Fn_glListBase s_fn_glListBase {};
	typedef void(*Fn_glBegin)(GLenum mode);
	inline Fn_glBegin s_fn_glBegin {};
	typedef void(*Fn_glBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
	inline Fn_glBitmap s_fn_glBitmap {};
	typedef void(*Fn_glColor3b)(GLbyte red, GLbyte green, GLbyte blue);
	inline Fn_glColor3b s_fn_glColor3b {};
	typedef void(*Fn_glColor3bv)(const GLbyte * v);
	inline Fn_glColor3bv s_fn_glColor3bv {};
	typedef void(*Fn_glColor3d)(GLdouble red, GLdouble green, GLdouble blue);
	inline Fn_glColor3d s_fn_glColor3d {};
	typedef void(*Fn_glColor3dv)(const GLdouble * v);
	inline Fn_glColor3dv s_fn_glColor3dv {};
	typedef void(*Fn_glColor3f)(GLfloat red, GLfloat green, GLfloat blue);
	inline Fn_glColor3f s_fn_glColor3f {};
	typedef void(*Fn_glColor3fv)(const GLfloat * v);
	inline Fn_glColor3fv s_fn_glColor3fv {};
	typedef void(*Fn_glColor3i)(GLint red, GLint green, GLint blue);
	inline Fn_glColor3i s_fn_glColor3i {};
	typedef void(*Fn_glColor3iv)(const GLint * v);
	inline Fn_glColor3iv s_fn_glColor3iv {};
	typedef void(*Fn_glColor3s)(GLshort red, GLshort green, GLshort blue);
	inline Fn_glColor3s s_fn_glColor3s {};
	typedef void(*Fn_glColor3sv)(const GLshort * v);
	inline Fn_glColor3sv s_fn_glColor3sv {};
	typedef void(*Fn_glColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
	inline Fn_glColor3ub s_fn_glColor3ub {};
	typedef void(*Fn_glColor3ubv)(const GLubyte * v);
	inline Fn_glColor3ubv s_fn_glColor3ubv {};
	typedef void(*Fn_glColor3ui)(GLuint red, GLuint green, GLuint blue);
	inline Fn_glColor3ui s_fn_glColor3ui {};
	typedef void(*Fn_glColor3uiv)(const GLuint * v);
	inline Fn_glColor3uiv s_fn_glColor3uiv {};
	typedef void(*Fn_glColor3us)(GLushort red, GLushort green, GLushort blue);
	inline Fn_glColor3us s_fn_glColor3us {};
	typedef void(*Fn_glColor3usv)(const GLushort * v);
	inline Fn_glColor3usv s_fn_glColor3usv {};
	typedef void(*Fn_glColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	inline Fn_glColor4b s_fn_glColor4b {};
	typedef void(*Fn_glColor4bv)(const GLbyte * v);
	inline Fn_glColor4bv s_fn_glColor4bv {};
	typedef void(*Fn_glColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	inline Fn_glColor4d s_fn_glColor4d {};
	typedef void(*Fn_glColor4dv)(const GLdouble * v);
	inline Fn_glColor4dv s_fn_glColor4dv {};
	typedef void(*Fn_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	inline Fn_glColor4f s_fn_glColor4f {};
	typedef void(*Fn_glColor4fv)(const GLfloat * v);
	inline Fn_glColor4fv s_fn_glColor4fv {};
	typedef void(*Fn_glColor4i)(GLint red, GLint green, GLint blue, GLint alpha);
	inline Fn_glColor4i s_fn_glColor4i {};
	typedef void(*Fn_glColor4iv)(const GLint * v);
	inline Fn_glColor4iv s_fn_glColor4iv {};
	typedef void(*Fn_glColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
	inline Fn_glColor4s s_fn_glColor4s {};
	typedef void(*Fn_glColor4sv)(const GLshort * v);
	inline Fn_glColor4sv s_fn_glColor4sv {};
	typedef void(*Fn_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	inline Fn_glColor4ub s_fn_glColor4ub {};
	typedef void(*Fn_glColor4ubv)(const GLubyte * v);
	inline Fn_glColor4ubv s_fn_glColor4ubv {};
	typedef void(*Fn_glColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
	inline Fn_glColor4ui s_fn_glColor4ui {};
	typedef void(*Fn_glColor4uiv)(const GLuint * v);
	inline Fn_glColor4uiv s_fn_glColor4uiv {};
	typedef void(*Fn_glColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
	inline Fn_glColor4us s_fn_glColor4us {};
	typedef void(*Fn_glColor4usv)(const GLushort * v);
	inline Fn_glColor4usv s_fn_glColor4usv {};
	typedef void(*Fn_glEdgeFlag)(GLboolean flag);
	inline Fn_glEdgeFlag s_fn_glEdgeFlag {};
	typedef void(*Fn_glEdgeFlagv)(const GLboolean * flag);
	inline Fn_glEdgeFlagv s_fn_glEdgeFlagv {};
	typedef void(*Fn_glEnd)();
	inline Fn_glEnd s_fn_glEnd {};
	typedef void(*Fn_glIndexd)(GLdouble c);
	inline Fn_glIndexd s_fn_glIndexd {};
	typedef void(*Fn_glIndexdv)(const GLdouble * c);
	inline Fn_glIndexdv s_fn_glIndexdv {};
	typedef void(*Fn_glIndexf)(GLfloat c);
	inline Fn_glIndexf s_fn_glIndexf {};
	typedef void(*Fn_glIndexfv)(const GLfloat * c);
	inline Fn_glIndexfv s_fn_glIndexfv {};
	typedef void(*Fn_glIndexi)(GLint c);
	inline Fn_glIndexi s_fn_glIndexi {};
	typedef void(*Fn_glIndexiv)(const GLint * c);
	inline Fn_glIndexiv s_fn_glIndexiv {};
	typedef void(*Fn_glIndexs)(GLshort c);
	inline Fn_glIndexs s_fn_glIndexs {};
	typedef void(*Fn_glIndexsv)(const GLshort * c);
	inline Fn_glIndexsv s_fn_glIndexsv {};
	typedef void(*Fn_glNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
	inline Fn_glNormal3b s_fn_glNormal3b {};
	typedef void(*Fn_glNormal3bv)(const GLbyte * v);
	inline Fn_glNormal3bv s_fn_glNormal3bv {};
	typedef void(*Fn_glNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
	inline Fn_glNormal3d s_fn_glNormal3d {};
	typedef void(*Fn_glNormal3dv)(const GLdouble * v);
	inline Fn_glNormal3dv s_fn_glNormal3dv {};
	typedef void(*Fn_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
	inline Fn_glNormal3f s_fn_glNormal3f {};
	typedef void(*Fn_glNormal3fv)(const GLfloat * v);
	inline Fn_glNormal3fv s_fn_glNormal3fv {};
	typedef void(*Fn_glNormal3i)(GLint nx, GLint ny, GLint nz);
	inline Fn_glNormal3i s_fn_glNormal3i {};
	typedef void(*Fn_glNormal3iv)(const GLint * v);
	inline Fn_glNormal3iv s_fn_glNormal3iv {};
	typedef void(*Fn_glNormal3s)(GLshort nx, GLshort ny, GLshort nz);
	inline Fn_glNormal3s s_fn_glNormal3s {};
	typedef void(*Fn_glNormal3sv)(const GLshort * v);
	inline Fn_glNormal3sv s_fn_glNormal3sv {};
	typedef void(*Fn_glRasterPos2d)(GLdouble x, GLdouble y);
	inline Fn_glRasterPos2d s_fn_glRasterPos2d {};
	typedef void(*Fn_glRasterPos2dv)(const GLdouble * v);
	inline Fn_glRasterPos2dv s_fn_glRasterPos2dv {};
	typedef void(*Fn_glRasterPos2f)(GLfloat x, GLfloat y);
	inline Fn_glRasterPos2f s_fn_glRasterPos2f {};
	typedef void(*Fn_glRasterPos2fv)(const GLfloat * v);
	inline Fn_glRasterPos2fv s_fn_glRasterPos2fv {};
	typedef void(*Fn_glRasterPos2i)(GLint x, GLint y);
	inline Fn_glRasterPos2i s_fn_glRasterPos2i {};
	typedef void(*Fn_glRasterPos2iv)(const GLint * v);
	inline Fn_glRasterPos2iv s_fn_glRasterPos2iv {};
	typedef void(*Fn_glRasterPos2s)(GLshort x, GLshort y);
	inline Fn_glRasterPos2s s_fn_glRasterPos2s {};
	typedef void(*Fn_glRasterPos2sv)(const GLshort * v);
	inline Fn_glRasterPos2sv s_fn_glRasterPos2sv {};
	typedef void(*Fn_glRasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glRasterPos3d s_fn_glRasterPos3d {};
	typedef void(*Fn_glRasterPos3dv)(const GLdouble * v);
	inline Fn_glRasterPos3dv s_fn_glRasterPos3dv {};
	typedef void(*Fn_glRasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glRasterPos3f s_fn_glRasterPos3f {};
	typedef void(*Fn_glRasterPos3fv)(const GLfloat * v);
	inline Fn_glRasterPos3fv s_fn_glRasterPos3fv {};
	typedef void(*Fn_glRasterPos3i)(GLint x, GLint y, GLint z);
	inline Fn_glRasterPos3i s_fn_glRasterPos3i {};
	typedef void(*Fn_glRasterPos3iv)(const GLint * v);
	inline Fn_glRasterPos3iv s_fn_glRasterPos3iv {};
	typedef void(*Fn_glRasterPos3s)(GLshort x, GLshort y, GLshort z);
	inline Fn_glRasterPos3s s_fn_glRasterPos3s {};
	typedef void(*Fn_glRasterPos3sv)(const GLshort * v);
	inline Fn_glRasterPos3sv s_fn_glRasterPos3sv {};
	typedef void(*Fn_glRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	inline Fn_glRasterPos4d s_fn_glRasterPos4d {};
	typedef void(*Fn_glRasterPos4dv)(const GLdouble * v);
	inline Fn_glRasterPos4dv s_fn_glRasterPos4dv {};
	typedef void(*Fn_glRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	inline Fn_glRasterPos4f s_fn_glRasterPos4f {};
	typedef void(*Fn_glRasterPos4fv)(const GLfloat * v);
	inline Fn_glRasterPos4fv s_fn_glRasterPos4fv {};
	typedef void(*Fn_glRasterPos4i)(GLint x, GLint y, GLint z, GLint w);
	inline Fn_glRasterPos4i s_fn_glRasterPos4i {};
	typedef void(*Fn_glRasterPos4iv)(const GLint * v);
	inline Fn_glRasterPos4iv s_fn_glRasterPos4iv {};
	typedef void(*Fn_glRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
	inline Fn_glRasterPos4s s_fn_glRasterPos4s {};
	typedef void(*Fn_glRasterPos4sv)(const GLshort * v);
	inline Fn_glRasterPos4sv s_fn_glRasterPos4sv {};
	typedef void(*Fn_glRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	inline Fn_glRectd s_fn_glRectd {};
	typedef void(*Fn_glRectdv)(const GLdouble * v1, const GLdouble * v2);
	inline Fn_glRectdv s_fn_glRectdv {};
	typedef void(*Fn_glRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	inline Fn_glRectf s_fn_glRectf {};
	typedef void(*Fn_glRectfv)(const GLfloat * v1, const GLfloat * v2);
	inline Fn_glRectfv s_fn_glRectfv {};
	typedef void(*Fn_glRecti)(GLint x1, GLint y1, GLint x2, GLint y2);
	inline Fn_glRecti s_fn_glRecti {};
	typedef void(*Fn_glRectiv)(const GLint * v1, const GLint * v2);
	inline Fn_glRectiv s_fn_glRectiv {};
	typedef void(*Fn_glRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	inline Fn_glRects s_fn_glRects {};
	typedef void(*Fn_glRectsv)(const GLshort * v1, const GLshort * v2);
	inline Fn_glRectsv s_fn_glRectsv {};
	typedef void(*Fn_glTexCoord1d)(GLdouble s);
	inline Fn_glTexCoord1d s_fn_glTexCoord1d {};
	typedef void(*Fn_glTexCoord1dv)(const GLdouble * v);
	inline Fn_glTexCoord1dv s_fn_glTexCoord1dv {};
	typedef void(*Fn_glTexCoord1f)(GLfloat s);
	inline Fn_glTexCoord1f s_fn_glTexCoord1f {};
	typedef void(*Fn_glTexCoord1fv)(const GLfloat * v);
	inline Fn_glTexCoord1fv s_fn_glTexCoord1fv {};
	typedef void(*Fn_glTexCoord1i)(GLint s);
	inline Fn_glTexCoord1i s_fn_glTexCoord1i {};
	typedef void(*Fn_glTexCoord1iv)(const GLint * v);
	inline Fn_glTexCoord1iv s_fn_glTexCoord1iv {};
	typedef void(*Fn_glTexCoord1s)(GLshort s);
	inline Fn_glTexCoord1s s_fn_glTexCoord1s {};
	typedef void(*Fn_glTexCoord1sv)(const GLshort * v);
	inline Fn_glTexCoord1sv s_fn_glTexCoord1sv {};
	typedef void(*Fn_glTexCoord2d)(GLdouble s, GLdouble t);
	inline Fn_glTexCoord2d s_fn_glTexCoord2d {};
	typedef void(*Fn_glTexCoord2dv)(const GLdouble * v);
	inline Fn_glTexCoord2dv s_fn_glTexCoord2dv {};
	typedef void(*Fn_glTexCoord2f)(GLfloat s, GLfloat t);
	inline Fn_glTexCoord2f s_fn_glTexCoord2f {};
	typedef void(*Fn_glTexCoord2fv)(const GLfloat * v);
	inline Fn_glTexCoord2fv s_fn_glTexCoord2fv {};
	typedef void(*Fn_glTexCoord2i)(GLint s, GLint t);
	inline Fn_glTexCoord2i s_fn_glTexCoord2i {};
	typedef void(*Fn_glTexCoord2iv)(const GLint * v);
	inline Fn_glTexCoord2iv s_fn_glTexCoord2iv {};
	typedef void(*Fn_glTexCoord2s)(GLshort s, GLshort t);
	inline Fn_glTexCoord2s s_fn_glTexCoord2s {};
	typedef void(*Fn_glTexCoord2sv)(const GLshort * v);
	inline Fn_glTexCoord2sv s_fn_glTexCoord2sv {};
	typedef void(*Fn_glTexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
	inline Fn_glTexCoord3d s_fn_glTexCoord3d {};
	typedef void(*Fn_glTexCoord3dv)(const GLdouble * v);
	inline Fn_glTexCoord3dv s_fn_glTexCoord3dv {};
	typedef void(*Fn_glTexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
	inline Fn_glTexCoord3f s_fn_glTexCoord3f {};
	typedef void(*Fn_glTexCoord3fv)(const GLfloat * v);
	inline Fn_glTexCoord3fv s_fn_glTexCoord3fv {};
	typedef void(*Fn_glTexCoord3i)(GLint s, GLint t, GLint r);
	inline Fn_glTexCoord3i s_fn_glTexCoord3i {};
	typedef void(*Fn_glTexCoord3iv)(const GLint * v);
	inline Fn_glTexCoord3iv s_fn_glTexCoord3iv {};
	typedef void(*Fn_glTexCoord3s)(GLshort s, GLshort t, GLshort r);
	inline Fn_glTexCoord3s s_fn_glTexCoord3s {};
	typedef void(*Fn_glTexCoord3sv)(const GLshort * v);
	inline Fn_glTexCoord3sv s_fn_glTexCoord3sv {};
	typedef void(*Fn_glTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	inline Fn_glTexCoord4d s_fn_glTexCoord4d {};
	typedef void(*Fn_glTexCoord4dv)(const GLdouble * v);
	inline Fn_glTexCoord4dv s_fn_glTexCoord4dv {};
	typedef void(*Fn_glTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	inline Fn_glTexCoord4f s_fn_glTexCoord4f {};
	typedef void(*Fn_glTexCoord4fv)(const GLfloat * v);
	inline Fn_glTexCoord4fv s_fn_glTexCoord4fv {};
	typedef void(*Fn_glTexCoord4i)(GLint s, GLint t, GLint r, GLint q);
	inline Fn_glTexCoord4i s_fn_glTexCoord4i {};
	typedef void(*Fn_glTexCoord4iv)(const GLint * v);
	inline Fn_glTexCoord4iv s_fn_glTexCoord4iv {};
	typedef void(*Fn_glTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
	inline Fn_glTexCoord4s s_fn_glTexCoord4s {};
	typedef void(*Fn_glTexCoord4sv)(const GLshort * v);
	inline Fn_glTexCoord4sv s_fn_glTexCoord4sv {};
	typedef void(*Fn_glVertex2d)(GLdouble x, GLdouble y);
	inline Fn_glVertex2d s_fn_glVertex2d {};
	typedef void(*Fn_glVertex2dv)(const GLdouble * v);
	inline Fn_glVertex2dv s_fn_glVertex2dv {};
	typedef void(*Fn_glVertex2f)(GLfloat x, GLfloat y);
	inline Fn_glVertex2f s_fn_glVertex2f {};
	typedef void(*Fn_glVertex2fv)(const GLfloat * v);
	inline Fn_glVertex2fv s_fn_glVertex2fv {};
	typedef void(*Fn_glVertex2i)(GLint x, GLint y);
	inline Fn_glVertex2i s_fn_glVertex2i {};
	typedef void(*Fn_glVertex2iv)(const GLint * v);
	inline Fn_glVertex2iv s_fn_glVertex2iv {};
	typedef void(*Fn_glVertex2s)(GLshort x, GLshort y);
	inline Fn_glVertex2s s_fn_glVertex2s {};
	typedef void(*Fn_glVertex2sv)(const GLshort * v);
	inline Fn_glVertex2sv s_fn_glVertex2sv {};
	typedef void(*Fn_glVertex3d)(GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glVertex3d s_fn_glVertex3d {};
	typedef void(*Fn_glVertex3dv)(const GLdouble * v);
	inline Fn_glVertex3dv s_fn_glVertex3dv {};
	typedef void(*Fn_glVertex3f)(GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glVertex3f s_fn_glVertex3f {};
	typedef void(*Fn_glVertex3fv)(const GLfloat * v);
	inline Fn_glVertex3fv s_fn_glVertex3fv {};
	typedef void(*Fn_glVertex3i)(GLint x, GLint y, GLint z);
	inline Fn_glVertex3i s_fn_glVertex3i {};
	typedef void(*Fn_glVertex3iv)(const GLint * v);
	inline Fn_glVertex3iv s_fn_glVertex3iv {};
	typedef void(*Fn_glVertex3s)(GLshort x, GLshort y, GLshort z);
	inline Fn_glVertex3s s_fn_glVertex3s {};
	typedef void(*Fn_glVertex3sv)(const GLshort * v);
	inline Fn_glVertex3sv s_fn_glVertex3sv {};
	typedef void(*Fn_glVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	inline Fn_glVertex4d s_fn_glVertex4d {};
	typedef void(*Fn_glVertex4dv)(const GLdouble * v);
	inline Fn_glVertex4dv s_fn_glVertex4dv {};
	typedef void(*Fn_glVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	inline Fn_glVertex4f s_fn_glVertex4f {};
	typedef void(*Fn_glVertex4fv)(const GLfloat * v);
	inline Fn_glVertex4fv s_fn_glVertex4fv {};
	typedef void(*Fn_glVertex4i)(GLint x, GLint y, GLint z, GLint w);
	inline Fn_glVertex4i s_fn_glVertex4i {};
	typedef void(*Fn_glVertex4iv)(const GLint * v);
	inline Fn_glVertex4iv s_fn_glVertex4iv {};
	typedef void(*Fn_glVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
	inline Fn_glVertex4s s_fn_glVertex4s {};
	typedef void(*Fn_glVertex4sv)(const GLshort * v);
	inline Fn_glVertex4sv s_fn_glVertex4sv {};
	typedef void(*Fn_glClipPlane)(GLenum plane, const GLdouble * equation);
	inline Fn_glClipPlane s_fn_glClipPlane {};
	typedef void(*Fn_glColorMaterial)(GLenum face, GLenum mode);
	inline Fn_glColorMaterial s_fn_glColorMaterial {};
	typedef void(*Fn_glFogf)(GLenum pname, GLfloat param);
	inline Fn_glFogf s_fn_glFogf {};
	typedef void(*Fn_glFogfv)(GLenum pname, const GLfloat * params);
	inline Fn_glFogfv s_fn_glFogfv {};
	typedef void(*Fn_glFogi)(GLenum pname, GLint param);
	inline Fn_glFogi s_fn_glFogi {};
	typedef void(*Fn_glFogiv)(GLenum pname, const GLint * params);
	inline Fn_glFogiv s_fn_glFogiv {};
	typedef void(*Fn_glLightf)(GLenum light, GLenum pname, GLfloat param);
	inline Fn_glLightf s_fn_glLightf {};
	typedef void(*Fn_glLightfv)(GLenum light, GLenum pname, const GLfloat * params);
	inline Fn_glLightfv s_fn_glLightfv {};
	typedef void(*Fn_glLighti)(GLenum light, GLenum pname, GLint param);
	inline Fn_glLighti s_fn_glLighti {};
	typedef void(*Fn_glLightiv)(GLenum light, GLenum pname, const GLint * params);
	inline Fn_glLightiv s_fn_glLightiv {};
	typedef void(*Fn_glLightModelf)(GLenum pname, GLfloat param);
	inline Fn_glLightModelf s_fn_glLightModelf {};
	typedef void(*Fn_glLightModelfv)(GLenum pname, const GLfloat * params);
	inline Fn_glLightModelfv s_fn_glLightModelfv {};
	typedef void(*Fn_glLightModeli)(GLenum pname, GLint param);
	inline Fn_glLightModeli s_fn_glLightModeli {};
	typedef void(*Fn_glLightModeliv)(GLenum pname, const GLint * params);
	inline Fn_glLightModeliv s_fn_glLightModeliv {};
	typedef void(*Fn_glLineStipple)(GLint factor, GLushort pattern);
	inline Fn_glLineStipple s_fn_glLineStipple {};
	typedef void(*Fn_glMaterialf)(GLenum face, GLenum pname, GLfloat param);
	inline Fn_glMaterialf s_fn_glMaterialf {};
	typedef void(*Fn_glMaterialfv)(GLenum face, GLenum pname, const GLfloat * params);
	inline Fn_glMaterialfv s_fn_glMaterialfv {};
	typedef void(*Fn_glMateriali)(GLenum face, GLenum pname, GLint param);
	inline Fn_glMateriali s_fn_glMateriali {};
	typedef void(*Fn_glMaterialiv)(GLenum face, GLenum pname, const GLint * params);
	inline Fn_glMaterialiv s_fn_glMaterialiv {};
	typedef void(*Fn_glPolygonStipple)(const GLubyte * mask);
	inline Fn_glPolygonStipple s_fn_glPolygonStipple {};
	typedef void(*Fn_glShadeModel)(GLenum mode);
	inline Fn_glShadeModel s_fn_glShadeModel {};
	typedef void(*Fn_glTexEnvf)(GLenum target, GLenum pname, GLfloat param);
	inline Fn_glTexEnvf s_fn_glTexEnvf {};
	typedef void(*Fn_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat * params);
	inline Fn_glTexEnvfv s_fn_glTexEnvfv {};
	typedef void(*Fn_glTexEnvi)(GLenum target, GLenum pname, GLint param);
	inline Fn_glTexEnvi s_fn_glTexEnvi {};
	typedef void(*Fn_glTexEnviv)(GLenum target, GLenum pname, const GLint * params);
	inline Fn_glTexEnviv s_fn_glTexEnviv {};
	typedef void(*Fn_glTexGend)(GLenum coord, GLenum pname, GLdouble param);
	inline Fn_glTexGend s_fn_glTexGend {};
	typedef void(*Fn_glTexGendv)(GLenum coord, GLenum pname, const GLdouble * params);
	inline Fn_glTexGendv s_fn_glTexGendv {};
	typedef void(*Fn_glTexGenf)(GLenum coord, GLenum pname, GLfloat param);
	inline Fn_glTexGenf s_fn_glTexGenf {};
	typedef void(*Fn_glTexGenfv)(GLenum coord, GLenum pname, const GLfloat * params);
	inline Fn_glTexGenfv s_fn_glTexGenfv {};
	typedef void(*Fn_glTexGeni)(GLenum coord, GLenum pname, GLint param);
	inline Fn_glTexGeni s_fn_glTexGeni {};
	typedef void(*Fn_glTexGeniv)(GLenum coord, GLenum pname, const GLint * params);
	inline Fn_glTexGeniv s_fn_glTexGeniv {};
	typedef void(*Fn_glFeedbackBuffer)(GLsizei size, GLenum type, GLfloat * buffer);
	inline Fn_glFeedbackBuffer s_fn_glFeedbackBuffer {};
	typedef void(*Fn_glSelectBuffer)(GLsizei size, GLuint * buffer);
	inline Fn_glSelectBuffer s_fn_glSelectBuffer {};
	typedef GLint(*Fn_glRenderMode)(GLenum mode);
	inline Fn_glRenderMode s_fn_glRenderMode {};
	typedef void(*Fn_glInitNames)();
	inline Fn_glInitNames s_fn_glInitNames {};
	typedef void(*Fn_glLoadName)(GLuint name);
	inline Fn_glLoadName s_fn_glLoadName {};
	typedef void(*Fn_glPassThrough)(GLfloat token);
	inline Fn_glPassThrough s_fn_glPassThrough {};
	typedef void(*Fn_glPopName)();
	inline Fn_glPopName s_fn_glPopName {};
	typedef void(*Fn_glPushName)(GLuint name);
	inline Fn_glPushName s_fn_glPushName {};
	typedef void(*Fn_glClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	inline Fn_glClearAccum s_fn_glClearAccum {};
	typedef void(*Fn_glClearIndex)(GLfloat c);
	inline Fn_glClearIndex s_fn_glClearIndex {};
	typedef void(*Fn_glIndexMask)(GLuint mask);
	inline Fn_glIndexMask s_fn_glIndexMask {};
	typedef void(*Fn_glAccum)(GLenum op, GLfloat value);
	inline Fn_glAccum s_fn_glAccum {};
	typedef void(*Fn_glPopAttrib)();
	inline Fn_glPopAttrib s_fn_glPopAttrib {};
	typedef void(*Fn_glPushAttrib)(GLbitfield mask);
	inline Fn_glPushAttrib s_fn_glPushAttrib {};
	typedef void(*Fn_glMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
	inline Fn_glMap1d s_fn_glMap1d {};
	typedef void(*Fn_glMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
	inline Fn_glMap1f s_fn_glMap1f {};
	typedef void(*Fn_glMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
	inline Fn_glMap2d s_fn_glMap2d {};
	typedef void(*Fn_glMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
	inline Fn_glMap2f s_fn_glMap2f {};
	typedef void(*Fn_glMapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
	inline Fn_glMapGrid1d s_fn_glMapGrid1d {};
	typedef void(*Fn_glMapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
	inline Fn_glMapGrid1f s_fn_glMapGrid1f {};
	typedef void(*Fn_glMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	inline Fn_glMapGrid2d s_fn_glMapGrid2d {};
	typedef void(*Fn_glMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	inline Fn_glMapGrid2f s_fn_glMapGrid2f {};
	typedef void(*Fn_glEvalCoord1d)(GLdouble u);
	inline Fn_glEvalCoord1d s_fn_glEvalCoord1d {};
	typedef void(*Fn_glEvalCoord1dv)(const GLdouble * u);
	inline Fn_glEvalCoord1dv s_fn_glEvalCoord1dv {};
	typedef void(*Fn_glEvalCoord1f)(GLfloat u);
	inline Fn_glEvalCoord1f s_fn_glEvalCoord1f {};
	typedef void(*Fn_glEvalCoord1fv)(const GLfloat * u);
	inline Fn_glEvalCoord1fv s_fn_glEvalCoord1fv {};
	typedef void(*Fn_glEvalCoord2d)(GLdouble u, GLdouble v);
	inline Fn_glEvalCoord2d s_fn_glEvalCoord2d {};
	typedef void(*Fn_glEvalCoord2dv)(const GLdouble * u);
	inline Fn_glEvalCoord2dv s_fn_glEvalCoord2dv {};
	typedef void(*Fn_glEvalCoord2f)(GLfloat u, GLfloat v);
	inline Fn_glEvalCoord2f s_fn_glEvalCoord2f {};
	typedef void(*Fn_glEvalCoord2fv)(const GLfloat * u);
	inline Fn_glEvalCoord2fv s_fn_glEvalCoord2fv {};
	typedef void(*Fn_glEvalMesh1)(GLenum mode, GLint i1, GLint i2);
	inline Fn_glEvalMesh1 s_fn_glEvalMesh1 {};
	typedef void(*Fn_glEvalPoint1)(GLint i);
	inline Fn_glEvalPoint1 s_fn_glEvalPoint1 {};
	typedef void(*Fn_glEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	inline Fn_glEvalMesh2 s_fn_glEvalMesh2 {};
	typedef void(*Fn_glEvalPoint2)(GLint i, GLint j);
	inline Fn_glEvalPoint2 s_fn_glEvalPoint2 {};
	typedef void(*Fn_glAlphaFunc)(GLenum func, GLfloat ref);
	inline Fn_glAlphaFunc s_fn_glAlphaFunc {};
	typedef void(*Fn_glPixelZoom)(GLfloat xfactor, GLfloat yfactor);
	inline Fn_glPixelZoom s_fn_glPixelZoom {};
	typedef void(*Fn_glPixelTransferf)(GLenum pname, GLfloat param);
	inline Fn_glPixelTransferf s_fn_glPixelTransferf {};
	typedef void(*Fn_glPixelTransferi)(GLenum pname, GLint param);
	inline Fn_glPixelTransferi s_fn_glPixelTransferi {};
	typedef void(*Fn_glPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat * values);
	inline Fn_glPixelMapfv s_fn_glPixelMapfv {};
	typedef void(*Fn_glPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint * values);
	inline Fn_glPixelMapuiv s_fn_glPixelMapuiv {};
	typedef void(*Fn_glPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort * values);
	inline Fn_glPixelMapusv s_fn_glPixelMapusv {};
	typedef void(*Fn_glCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	inline Fn_glCopyPixels s_fn_glCopyPixels {};
	typedef void(*Fn_glDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
	inline Fn_glDrawPixels s_fn_glDrawPixels {};
	typedef void(*Fn_glGetClipPlane)(GLenum plane, GLdouble * equation);
	inline Fn_glGetClipPlane s_fn_glGetClipPlane {};
	typedef void(*Fn_glGetLightfv)(GLenum light, GLenum pname, GLfloat * params);
	inline Fn_glGetLightfv s_fn_glGetLightfv {};
	typedef void(*Fn_glGetLightiv)(GLenum light, GLenum pname, GLint * params);
	inline Fn_glGetLightiv s_fn_glGetLightiv {};
	typedef void(*Fn_glGetMapdv)(GLenum target, GLenum query, GLdouble * v);
	inline Fn_glGetMapdv s_fn_glGetMapdv {};
	typedef void(*Fn_glGetMapfv)(GLenum target, GLenum query, GLfloat * v);
	inline Fn_glGetMapfv s_fn_glGetMapfv {};
	typedef void(*Fn_glGetMapiv)(GLenum target, GLenum query, GLint * v);
	inline Fn_glGetMapiv s_fn_glGetMapiv {};
	typedef void(*Fn_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat * params);
	inline Fn_glGetMaterialfv s_fn_glGetMaterialfv {};
	typedef void(*Fn_glGetMaterialiv)(GLenum face, GLenum pname, GLint * params);
	inline Fn_glGetMaterialiv s_fn_glGetMaterialiv {};
	typedef void(*Fn_glGetPixelMapfv)(GLenum map, GLfloat * values);
	inline Fn_glGetPixelMapfv s_fn_glGetPixelMapfv {};
	typedef void(*Fn_glGetPixelMapuiv)(GLenum map, GLuint * values);
	inline Fn_glGetPixelMapuiv s_fn_glGetPixelMapuiv {};
	typedef void(*Fn_glGetPixelMapusv)(GLenum map, GLushort * values);
	inline Fn_glGetPixelMapusv s_fn_glGetPixelMapusv {};
	typedef void(*Fn_glGetPolygonStipple)(GLubyte * mask);
	inline Fn_glGetPolygonStipple s_fn_glGetPolygonStipple {};
	typedef void(*Fn_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat * params);
	inline Fn_glGetTexEnvfv s_fn_glGetTexEnvfv {};
	typedef void(*Fn_glGetTexEnviv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetTexEnviv s_fn_glGetTexEnviv {};
	typedef void(*Fn_glGetTexGendv)(GLenum coord, GLenum pname, GLdouble * params);
	inline Fn_glGetTexGendv s_fn_glGetTexGendv {};
	typedef void(*Fn_glGetTexGenfv)(GLenum coord, GLenum pname, GLfloat * params);
	inline Fn_glGetTexGenfv s_fn_glGetTexGenfv {};
	typedef void(*Fn_glGetTexGeniv)(GLenum coord, GLenum pname, GLint * params);
	inline Fn_glGetTexGeniv s_fn_glGetTexGeniv {};
	typedef GLboolean(*Fn_glIsList)(GLuint list);
	inline Fn_glIsList s_fn_glIsList {};
	typedef void(*Fn_glFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	inline Fn_glFrustum s_fn_glFrustum {};
	typedef void(*Fn_glLoadIdentity)();
	inline Fn_glLoadIdentity s_fn_glLoadIdentity {};
	typedef void(*Fn_glLoadMatrixf)(const GLfloat * m);
	inline Fn_glLoadMatrixf s_fn_glLoadMatrixf {};
	typedef void(*Fn_glLoadMatrixd)(const GLdouble * m);
	inline Fn_glLoadMatrixd s_fn_glLoadMatrixd {};
	typedef void(*Fn_glMatrixMode)(GLenum mode);
	inline Fn_glMatrixMode s_fn_glMatrixMode {};
	typedef void(*Fn_glMultMatrixf)(const GLfloat * m);
	inline Fn_glMultMatrixf s_fn_glMultMatrixf {};
	typedef void(*Fn_glMultMatrixd)(const GLdouble * m);
	inline Fn_glMultMatrixd s_fn_glMultMatrixd {};
	typedef void(*Fn_glOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	inline Fn_glOrtho s_fn_glOrtho {};
	typedef void(*Fn_glPopMatrix)();
	inline Fn_glPopMatrix s_fn_glPopMatrix {};
	typedef void(*Fn_glPushMatrix)();
	inline Fn_glPushMatrix s_fn_glPushMatrix {};
	typedef void(*Fn_glRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glRotated s_fn_glRotated {};
	typedef void(*Fn_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glRotatef s_fn_glRotatef {};
	typedef void(*Fn_glScaled)(GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glScaled s_fn_glScaled {};
	typedef void(*Fn_glScalef)(GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glScalef s_fn_glScalef {};
	typedef void(*Fn_glTranslated)(GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glTranslated s_fn_glTranslated {};
	typedef void(*Fn_glTranslatef)(GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glTranslatef s_fn_glTranslatef {};
	typedef void(*Fn_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
	inline Fn_glDrawArrays s_fn_glDrawArrays {};
	typedef void(*Fn_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices);
	inline Fn_glDrawElements s_fn_glDrawElements {};
	typedef void(*Fn_glGetPointerv)(GLenum pname, void ** params);
	inline Fn_glGetPointerv s_fn_glGetPointerv {};
	typedef void(*Fn_glPolygonOffset)(GLfloat factor, GLfloat units);
	inline Fn_glPolygonOffset s_fn_glPolygonOffset {};
	typedef void(*Fn_glCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	inline Fn_glCopyTexImage1D s_fn_glCopyTexImage1D {};
	typedef void(*Fn_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	inline Fn_glCopyTexImage2D s_fn_glCopyTexImage2D {};
	typedef void(*Fn_glCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	inline Fn_glCopyTexSubImage1D s_fn_glCopyTexSubImage1D {};
	typedef void(*Fn_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glCopyTexSubImage2D s_fn_glCopyTexSubImage2D {};
	typedef void(*Fn_glTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTexSubImage1D s_fn_glTexSubImage1D {};
	typedef void(*Fn_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTexSubImage2D s_fn_glTexSubImage2D {};
	typedef void(*Fn_glBindTexture)(GLenum target, GLuint texture);
	inline Fn_glBindTexture s_fn_glBindTexture {};
	typedef void(*Fn_glDeleteTextures)(GLsizei n, const GLuint * textures);
	inline Fn_glDeleteTextures s_fn_glDeleteTextures {};
	typedef void(*Fn_glGenTextures)(GLsizei n, GLuint * textures);
	inline Fn_glGenTextures s_fn_glGenTextures {};
	typedef GLboolean(*Fn_glIsTexture)(GLuint texture);
	inline Fn_glIsTexture s_fn_glIsTexture {};
	typedef void(*Fn_glArrayElement)(GLint i);
	inline Fn_glArrayElement s_fn_glArrayElement {};
	typedef void(*Fn_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glColorPointer s_fn_glColorPointer {};
	typedef void(*Fn_glDisableClientState)(GLenum array);
	inline Fn_glDisableClientState s_fn_glDisableClientState {};
	typedef void(*Fn_glEdgeFlagPointer)(GLsizei stride, const void * pointer);
	inline Fn_glEdgeFlagPointer s_fn_glEdgeFlagPointer {};
	typedef void(*Fn_glEnableClientState)(GLenum array);
	inline Fn_glEnableClientState s_fn_glEnableClientState {};
	typedef void(*Fn_glIndexPointer)(GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glIndexPointer s_fn_glIndexPointer {};
	typedef void(*Fn_glInterleavedArrays)(GLenum format, GLsizei stride, const void * pointer);
	inline Fn_glInterleavedArrays s_fn_glInterleavedArrays {};
	typedef void(*Fn_glNormalPointer)(GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glNormalPointer s_fn_glNormalPointer {};
	typedef void(*Fn_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glTexCoordPointer s_fn_glTexCoordPointer {};
	typedef void(*Fn_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glVertexPointer s_fn_glVertexPointer {};
	typedef GLboolean(*Fn_glAreTexturesResident)(GLsizei n, const GLuint * textures, GLboolean * residences);
	inline Fn_glAreTexturesResident s_fn_glAreTexturesResident {};
	typedef void(*Fn_glPrioritizeTextures)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
	inline Fn_glPrioritizeTextures s_fn_glPrioritizeTextures {};
	typedef void(*Fn_glIndexub)(GLubyte c);
	inline Fn_glIndexub s_fn_glIndexub {};
	typedef void(*Fn_glIndexubv)(const GLubyte * c);
	inline Fn_glIndexubv s_fn_glIndexubv {};
	typedef void(*Fn_glPopClientAttrib)();
	inline Fn_glPopClientAttrib s_fn_glPopClientAttrib {};
	typedef void(*Fn_glPushClientAttrib)(GLbitfield mask);
	inline Fn_glPushClientAttrib s_fn_glPushClientAttrib {};
	typedef void(*Fn_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
	inline Fn_glDrawRangeElements s_fn_glDrawRangeElements {};
	typedef void(*Fn_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTexImage3D s_fn_glTexImage3D {};
	typedef void(*Fn_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTexSubImage3D s_fn_glTexSubImage3D {};
	typedef void(*Fn_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glCopyTexSubImage3D s_fn_glCopyTexSubImage3D {};
	typedef void(*Fn_glActiveTexture)(GLenum texture);
	inline Fn_glActiveTexture s_fn_glActiveTexture {};
	typedef void(*Fn_glSampleCoverage)(GLfloat value, GLboolean invert);
	inline Fn_glSampleCoverage s_fn_glSampleCoverage {};
	typedef void(*Fn_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTexImage3D s_fn_glCompressedTexImage3D {};
	typedef void(*Fn_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTexImage2D s_fn_glCompressedTexImage2D {};
	typedef void(*Fn_glCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTexImage1D s_fn_glCompressedTexImage1D {};
	typedef void(*Fn_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTexSubImage3D s_fn_glCompressedTexSubImage3D {};
	typedef void(*Fn_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTexSubImage2D s_fn_glCompressedTexSubImage2D {};
	typedef void(*Fn_glCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTexSubImage1D s_fn_glCompressedTexSubImage1D {};
	typedef void(*Fn_glGetCompressedTexImage)(GLenum target, GLint level, void * img);
	inline Fn_glGetCompressedTexImage s_fn_glGetCompressedTexImage {};
	typedef void(*Fn_glClientActiveTexture)(GLenum texture);
	inline Fn_glClientActiveTexture s_fn_glClientActiveTexture {};
	typedef void(*Fn_glMultiTexCoord1d)(GLenum target, GLdouble s);
	inline Fn_glMultiTexCoord1d s_fn_glMultiTexCoord1d {};
	typedef void(*Fn_glMultiTexCoord1dv)(GLenum target, const GLdouble * v);
	inline Fn_glMultiTexCoord1dv s_fn_glMultiTexCoord1dv {};
	typedef void(*Fn_glMultiTexCoord1f)(GLenum target, GLfloat s);
	inline Fn_glMultiTexCoord1f s_fn_glMultiTexCoord1f {};
	typedef void(*Fn_glMultiTexCoord1fv)(GLenum target, const GLfloat * v);
	inline Fn_glMultiTexCoord1fv s_fn_glMultiTexCoord1fv {};
	typedef void(*Fn_glMultiTexCoord1i)(GLenum target, GLint s);
	inline Fn_glMultiTexCoord1i s_fn_glMultiTexCoord1i {};
	typedef void(*Fn_glMultiTexCoord1iv)(GLenum target, const GLint * v);
	inline Fn_glMultiTexCoord1iv s_fn_glMultiTexCoord1iv {};
	typedef void(*Fn_glMultiTexCoord1s)(GLenum target, GLshort s);
	inline Fn_glMultiTexCoord1s s_fn_glMultiTexCoord1s {};
	typedef void(*Fn_glMultiTexCoord1sv)(GLenum target, const GLshort * v);
	inline Fn_glMultiTexCoord1sv s_fn_glMultiTexCoord1sv {};
	typedef void(*Fn_glMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
	inline Fn_glMultiTexCoord2d s_fn_glMultiTexCoord2d {};
	typedef void(*Fn_glMultiTexCoord2dv)(GLenum target, const GLdouble * v);
	inline Fn_glMultiTexCoord2dv s_fn_glMultiTexCoord2dv {};
	typedef void(*Fn_glMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
	inline Fn_glMultiTexCoord2f s_fn_glMultiTexCoord2f {};
	typedef void(*Fn_glMultiTexCoord2fv)(GLenum target, const GLfloat * v);
	inline Fn_glMultiTexCoord2fv s_fn_glMultiTexCoord2fv {};
	typedef void(*Fn_glMultiTexCoord2i)(GLenum target, GLint s, GLint t);
	inline Fn_glMultiTexCoord2i s_fn_glMultiTexCoord2i {};
	typedef void(*Fn_glMultiTexCoord2iv)(GLenum target, const GLint * v);
	inline Fn_glMultiTexCoord2iv s_fn_glMultiTexCoord2iv {};
	typedef void(*Fn_glMultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
	inline Fn_glMultiTexCoord2s s_fn_glMultiTexCoord2s {};
	typedef void(*Fn_glMultiTexCoord2sv)(GLenum target, const GLshort * v);
	inline Fn_glMultiTexCoord2sv s_fn_glMultiTexCoord2sv {};
	typedef void(*Fn_glMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	inline Fn_glMultiTexCoord3d s_fn_glMultiTexCoord3d {};
	typedef void(*Fn_glMultiTexCoord3dv)(GLenum target, const GLdouble * v);
	inline Fn_glMultiTexCoord3dv s_fn_glMultiTexCoord3dv {};
	typedef void(*Fn_glMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	inline Fn_glMultiTexCoord3f s_fn_glMultiTexCoord3f {};
	typedef void(*Fn_glMultiTexCoord3fv)(GLenum target, const GLfloat * v);
	inline Fn_glMultiTexCoord3fv s_fn_glMultiTexCoord3fv {};
	typedef void(*Fn_glMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
	inline Fn_glMultiTexCoord3i s_fn_glMultiTexCoord3i {};
	typedef void(*Fn_glMultiTexCoord3iv)(GLenum target, const GLint * v);
	inline Fn_glMultiTexCoord3iv s_fn_glMultiTexCoord3iv {};
	typedef void(*Fn_glMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
	inline Fn_glMultiTexCoord3s s_fn_glMultiTexCoord3s {};
	typedef void(*Fn_glMultiTexCoord3sv)(GLenum target, const GLshort * v);
	inline Fn_glMultiTexCoord3sv s_fn_glMultiTexCoord3sv {};
	typedef void(*Fn_glMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	inline Fn_glMultiTexCoord4d s_fn_glMultiTexCoord4d {};
	typedef void(*Fn_glMultiTexCoord4dv)(GLenum target, const GLdouble * v);
	inline Fn_glMultiTexCoord4dv s_fn_glMultiTexCoord4dv {};
	typedef void(*Fn_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	inline Fn_glMultiTexCoord4f s_fn_glMultiTexCoord4f {};
	typedef void(*Fn_glMultiTexCoord4fv)(GLenum target, const GLfloat * v);
	inline Fn_glMultiTexCoord4fv s_fn_glMultiTexCoord4fv {};
	typedef void(*Fn_glMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	inline Fn_glMultiTexCoord4i s_fn_glMultiTexCoord4i {};
	typedef void(*Fn_glMultiTexCoord4iv)(GLenum target, const GLint * v);
	inline Fn_glMultiTexCoord4iv s_fn_glMultiTexCoord4iv {};
	typedef void(*Fn_glMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	inline Fn_glMultiTexCoord4s s_fn_glMultiTexCoord4s {};
	typedef void(*Fn_glMultiTexCoord4sv)(GLenum target, const GLshort * v);
	inline Fn_glMultiTexCoord4sv s_fn_glMultiTexCoord4sv {};
	typedef void(*Fn_glLoadTransposeMatrixf)(const GLfloat * m);
	inline Fn_glLoadTransposeMatrixf s_fn_glLoadTransposeMatrixf {};
	typedef void(*Fn_glLoadTransposeMatrixd)(const GLdouble * m);
	inline Fn_glLoadTransposeMatrixd s_fn_glLoadTransposeMatrixd {};
	typedef void(*Fn_glMultTransposeMatrixf)(const GLfloat * m);
	inline Fn_glMultTransposeMatrixf s_fn_glMultTransposeMatrixf {};
	typedef void(*Fn_glMultTransposeMatrixd)(const GLdouble * m);
	inline Fn_glMultTransposeMatrixd s_fn_glMultTransposeMatrixd {};
	typedef void(*Fn_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	inline Fn_glBlendFuncSeparate s_fn_glBlendFuncSeparate {};
	typedef void(*Fn_glMultiDrawArrays)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
	inline Fn_glMultiDrawArrays s_fn_glMultiDrawArrays {};
	typedef void(*Fn_glMultiDrawElements)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
	inline Fn_glMultiDrawElements s_fn_glMultiDrawElements {};
	typedef void(*Fn_glPointParameterf)(GLenum pname, GLfloat param);
	inline Fn_glPointParameterf s_fn_glPointParameterf {};
	typedef void(*Fn_glPointParameterfv)(GLenum pname, const GLfloat * params);
	inline Fn_glPointParameterfv s_fn_glPointParameterfv {};
	typedef void(*Fn_glPointParameteri)(GLenum pname, GLint param);
	inline Fn_glPointParameteri s_fn_glPointParameteri {};
	typedef void(*Fn_glPointParameteriv)(GLenum pname, const GLint * params);
	inline Fn_glPointParameteriv s_fn_glPointParameteriv {};
	typedef void(*Fn_glFogCoordf)(GLfloat coord);
	inline Fn_glFogCoordf s_fn_glFogCoordf {};
	typedef void(*Fn_glFogCoordfv)(const GLfloat * coord);
	inline Fn_glFogCoordfv s_fn_glFogCoordfv {};
	typedef void(*Fn_glFogCoordd)(GLdouble coord);
	inline Fn_glFogCoordd s_fn_glFogCoordd {};
	typedef void(*Fn_glFogCoorddv)(const GLdouble * coord);
	inline Fn_glFogCoorddv s_fn_glFogCoorddv {};
	typedef void(*Fn_glFogCoordPointer)(GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glFogCoordPointer s_fn_glFogCoordPointer {};
	typedef void(*Fn_glSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
	inline Fn_glSecondaryColor3b s_fn_glSecondaryColor3b {};
	typedef void(*Fn_glSecondaryColor3bv)(const GLbyte * v);
	inline Fn_glSecondaryColor3bv s_fn_glSecondaryColor3bv {};
	typedef void(*Fn_glSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
	inline Fn_glSecondaryColor3d s_fn_glSecondaryColor3d {};
	typedef void(*Fn_glSecondaryColor3dv)(const GLdouble * v);
	inline Fn_glSecondaryColor3dv s_fn_glSecondaryColor3dv {};
	typedef void(*Fn_glSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
	inline Fn_glSecondaryColor3f s_fn_glSecondaryColor3f {};
	typedef void(*Fn_glSecondaryColor3fv)(const GLfloat * v);
	inline Fn_glSecondaryColor3fv s_fn_glSecondaryColor3fv {};
	typedef void(*Fn_glSecondaryColor3i)(GLint red, GLint green, GLint blue);
	inline Fn_glSecondaryColor3i s_fn_glSecondaryColor3i {};
	typedef void(*Fn_glSecondaryColor3iv)(const GLint * v);
	inline Fn_glSecondaryColor3iv s_fn_glSecondaryColor3iv {};
	typedef void(*Fn_glSecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
	inline Fn_glSecondaryColor3s s_fn_glSecondaryColor3s {};
	typedef void(*Fn_glSecondaryColor3sv)(const GLshort * v);
	inline Fn_glSecondaryColor3sv s_fn_glSecondaryColor3sv {};
	typedef void(*Fn_glSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
	inline Fn_glSecondaryColor3ub s_fn_glSecondaryColor3ub {};
	typedef void(*Fn_glSecondaryColor3ubv)(const GLubyte * v);
	inline Fn_glSecondaryColor3ubv s_fn_glSecondaryColor3ubv {};
	typedef void(*Fn_glSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
	inline Fn_glSecondaryColor3ui s_fn_glSecondaryColor3ui {};
	typedef void(*Fn_glSecondaryColor3uiv)(const GLuint * v);
	inline Fn_glSecondaryColor3uiv s_fn_glSecondaryColor3uiv {};
	typedef void(*Fn_glSecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
	inline Fn_glSecondaryColor3us s_fn_glSecondaryColor3us {};
	typedef void(*Fn_glSecondaryColor3usv)(const GLushort * v);
	inline Fn_glSecondaryColor3usv s_fn_glSecondaryColor3usv {};
	typedef void(*Fn_glSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glSecondaryColorPointer s_fn_glSecondaryColorPointer {};
	typedef void(*Fn_glWindowPos2d)(GLdouble x, GLdouble y);
	inline Fn_glWindowPos2d s_fn_glWindowPos2d {};
	typedef void(*Fn_glWindowPos2dv)(const GLdouble * v);
	inline Fn_glWindowPos2dv s_fn_glWindowPos2dv {};
	typedef void(*Fn_glWindowPos2f)(GLfloat x, GLfloat y);
	inline Fn_glWindowPos2f s_fn_glWindowPos2f {};
	typedef void(*Fn_glWindowPos2fv)(const GLfloat * v);
	inline Fn_glWindowPos2fv s_fn_glWindowPos2fv {};
	typedef void(*Fn_glWindowPos2i)(GLint x, GLint y);
	inline Fn_glWindowPos2i s_fn_glWindowPos2i {};
	typedef void(*Fn_glWindowPos2iv)(const GLint * v);
	inline Fn_glWindowPos2iv s_fn_glWindowPos2iv {};
	typedef void(*Fn_glWindowPos2s)(GLshort x, GLshort y);
	inline Fn_glWindowPos2s s_fn_glWindowPos2s {};
	typedef void(*Fn_glWindowPos2sv)(const GLshort * v);
	inline Fn_glWindowPos2sv s_fn_glWindowPos2sv {};
	typedef void(*Fn_glWindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glWindowPos3d s_fn_glWindowPos3d {};
	typedef void(*Fn_glWindowPos3dv)(const GLdouble * v);
	inline Fn_glWindowPos3dv s_fn_glWindowPos3dv {};
	typedef void(*Fn_glWindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glWindowPos3f s_fn_glWindowPos3f {};
	typedef void(*Fn_glWindowPos3fv)(const GLfloat * v);
	inline Fn_glWindowPos3fv s_fn_glWindowPos3fv {};
	typedef void(*Fn_glWindowPos3i)(GLint x, GLint y, GLint z);
	inline Fn_glWindowPos3i s_fn_glWindowPos3i {};
	typedef void(*Fn_glWindowPos3iv)(const GLint * v);
	inline Fn_glWindowPos3iv s_fn_glWindowPos3iv {};
	typedef void(*Fn_glWindowPos3s)(GLshort x, GLshort y, GLshort z);
	inline Fn_glWindowPos3s s_fn_glWindowPos3s {};
	typedef void(*Fn_glWindowPos3sv)(const GLshort * v);
	inline Fn_glWindowPos3sv s_fn_glWindowPos3sv {};
	typedef void(*Fn_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	inline Fn_glBlendColor s_fn_glBlendColor {};
	typedef void(*Fn_glBlendEquation)(GLenum mode);
	inline Fn_glBlendEquation s_fn_glBlendEquation {};
	typedef void(*Fn_glGenQueries)(GLsizei n, GLuint * ids);
	inline Fn_glGenQueries s_fn_glGenQueries {};
	typedef void(*Fn_glDeleteQueries)(GLsizei n, const GLuint * ids);
	inline Fn_glDeleteQueries s_fn_glDeleteQueries {};
	typedef GLboolean(*Fn_glIsQuery)(GLuint id);
	inline Fn_glIsQuery s_fn_glIsQuery {};
	typedef void(*Fn_glBeginQuery)(GLenum target, GLuint id);
	inline Fn_glBeginQuery s_fn_glBeginQuery {};
	typedef void(*Fn_glEndQuery)(GLenum target);
	inline Fn_glEndQuery s_fn_glEndQuery {};
	typedef void(*Fn_glGetQueryiv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetQueryiv s_fn_glGetQueryiv {};
	typedef void(*Fn_glGetQueryObjectiv)(GLuint id, GLenum pname, GLint * params);
	inline Fn_glGetQueryObjectiv s_fn_glGetQueryObjectiv {};
	typedef void(*Fn_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint * params);
	inline Fn_glGetQueryObjectuiv s_fn_glGetQueryObjectuiv {};
	typedef void(*Fn_glBindBuffer)(GLenum target, GLuint buffer);
	inline Fn_glBindBuffer s_fn_glBindBuffer {};
	typedef void(*Fn_glDeleteBuffers)(GLsizei n, const GLuint * buffers);
	inline Fn_glDeleteBuffers s_fn_glDeleteBuffers {};
	typedef void(*Fn_glGenBuffers)(GLsizei n, GLuint * buffers);
	inline Fn_glGenBuffers s_fn_glGenBuffers {};
	typedef GLboolean(*Fn_glIsBuffer)(GLuint buffer);
	inline Fn_glIsBuffer s_fn_glIsBuffer {};
	typedef void(*Fn_glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
	inline Fn_glBufferData s_fn_glBufferData {};
	typedef void(*Fn_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
	inline Fn_glBufferSubData s_fn_glBufferSubData {};
	typedef void(*Fn_glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
	inline Fn_glGetBufferSubData s_fn_glGetBufferSubData {};
	typedef void *(*Fn_glMapBuffer)(GLenum target, GLenum access);
	inline Fn_glMapBuffer s_fn_glMapBuffer {};
	typedef GLboolean(*Fn_glUnmapBuffer)(GLenum target);
	inline Fn_glUnmapBuffer s_fn_glUnmapBuffer {};
	typedef void(*Fn_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetBufferParameteriv s_fn_glGetBufferParameteriv {};
	typedef void(*Fn_glGetBufferPointerv)(GLenum target, GLenum pname, void ** params);
	inline Fn_glGetBufferPointerv s_fn_glGetBufferPointerv {};
	typedef void(*Fn_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
	inline Fn_glBlendEquationSeparate s_fn_glBlendEquationSeparate {};
	typedef void(*Fn_glDrawBuffers)(GLsizei n, const GLenum * bufs);
	inline Fn_glDrawBuffers s_fn_glDrawBuffers {};
	typedef void(*Fn_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	inline Fn_glStencilOpSeparate s_fn_glStencilOpSeparate {};
	typedef void(*Fn_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
	inline Fn_glStencilFuncSeparate s_fn_glStencilFuncSeparate {};
	typedef void(*Fn_glStencilMaskSeparate)(GLenum face, GLuint mask);
	inline Fn_glStencilMaskSeparate s_fn_glStencilMaskSeparate {};
	typedef void(*Fn_glAttachShader)(GLuint program, GLuint shader);
	inline Fn_glAttachShader s_fn_glAttachShader {};
	typedef void(*Fn_glBindAttribLocation)(GLuint program, GLuint index, const GLchar * name);
	inline Fn_glBindAttribLocation s_fn_glBindAttribLocation {};
	typedef void(*Fn_glCompileShader)(GLuint shader);
	inline Fn_glCompileShader s_fn_glCompileShader {};
	typedef GLuint(*Fn_glCreateProgram)();
	inline Fn_glCreateProgram s_fn_glCreateProgram {};
	typedef GLuint(*Fn_glCreateShader)(GLenum type);
	inline Fn_glCreateShader s_fn_glCreateShader {};
	typedef void(*Fn_glDeleteProgram)(GLuint program);
	inline Fn_glDeleteProgram s_fn_glDeleteProgram {};
	typedef void(*Fn_glDeleteShader)(GLuint shader);
	inline Fn_glDeleteShader s_fn_glDeleteShader {};
	typedef void(*Fn_glDetachShader)(GLuint program, GLuint shader);
	inline Fn_glDetachShader s_fn_glDetachShader {};
	typedef void(*Fn_glDisableVertexAttribArray)(GLuint index);
	inline Fn_glDisableVertexAttribArray s_fn_glDisableVertexAttribArray {};
	typedef void(*Fn_glEnableVertexAttribArray)(GLuint index);
	inline Fn_glEnableVertexAttribArray s_fn_glEnableVertexAttribArray {};
	typedef void(*Fn_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	inline Fn_glGetActiveAttrib s_fn_glGetActiveAttrib {};
	typedef void(*Fn_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
	inline Fn_glGetActiveUniform s_fn_glGetActiveUniform {};
	typedef void(*Fn_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
	inline Fn_glGetAttachedShaders s_fn_glGetAttachedShaders {};
	typedef GLint(*Fn_glGetAttribLocation)(GLuint program, const GLchar * name);
	inline Fn_glGetAttribLocation s_fn_glGetAttribLocation {};
	typedef void(*Fn_glGetProgramiv)(GLuint program, GLenum pname, GLint * params);
	inline Fn_glGetProgramiv s_fn_glGetProgramiv {};
	typedef void(*Fn_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	inline Fn_glGetProgramInfoLog s_fn_glGetProgramInfoLog {};
	typedef void(*Fn_glGetShaderiv)(GLuint shader, GLenum pname, GLint * params);
	inline Fn_glGetShaderiv s_fn_glGetShaderiv {};
	typedef void(*Fn_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	inline Fn_glGetShaderInfoLog s_fn_glGetShaderInfoLog {};
	typedef void(*Fn_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
	inline Fn_glGetShaderSource s_fn_glGetShaderSource {};
	typedef GLint(*Fn_glGetUniformLocation)(GLuint program, const GLchar * name);
	inline Fn_glGetUniformLocation s_fn_glGetUniformLocation {};
	typedef void(*Fn_glGetUniformfv)(GLuint program, GLint location, GLfloat * params);
	inline Fn_glGetUniformfv s_fn_glGetUniformfv {};
	typedef void(*Fn_glGetUniformiv)(GLuint program, GLint location, GLint * params);
	inline Fn_glGetUniformiv s_fn_glGetUniformiv {};
	typedef void(*Fn_glGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble * params);
	inline Fn_glGetVertexAttribdv s_fn_glGetVertexAttribdv {};
	typedef void(*Fn_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params);
	inline Fn_glGetVertexAttribfv s_fn_glGetVertexAttribfv {};
	typedef void(*Fn_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint * params);
	inline Fn_glGetVertexAttribiv s_fn_glGetVertexAttribiv {};
	typedef void(*Fn_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void ** pointer);
	inline Fn_glGetVertexAttribPointerv s_fn_glGetVertexAttribPointerv {};
	typedef GLboolean(*Fn_glIsProgram)(GLuint program);
	inline Fn_glIsProgram s_fn_glIsProgram {};
	typedef GLboolean(*Fn_glIsShader)(GLuint shader);
	inline Fn_glIsShader s_fn_glIsShader {};
	typedef void(*Fn_glLinkProgram)(GLuint program);
	inline Fn_glLinkProgram s_fn_glLinkProgram {};
	typedef void(*Fn_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
	inline Fn_glShaderSource s_fn_glShaderSource {};
	typedef void(*Fn_glUseProgram)(GLuint program);
	inline Fn_glUseProgram s_fn_glUseProgram {};
	typedef void(*Fn_glUniform1f)(GLint location, GLfloat v0);
	inline Fn_glUniform1f s_fn_glUniform1f {};
	typedef void(*Fn_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
	inline Fn_glUniform2f s_fn_glUniform2f {};
	typedef void(*Fn_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	inline Fn_glUniform3f s_fn_glUniform3f {};
	typedef void(*Fn_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	inline Fn_glUniform4f s_fn_glUniform4f {};
	typedef void(*Fn_glUniform1i)(GLint location, GLint v0);
	inline Fn_glUniform1i s_fn_glUniform1i {};
	typedef void(*Fn_glUniform2i)(GLint location, GLint v0, GLint v1);
	inline Fn_glUniform2i s_fn_glUniform2i {};
	typedef void(*Fn_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
	inline Fn_glUniform3i s_fn_glUniform3i {};
	typedef void(*Fn_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	inline Fn_glUniform4i s_fn_glUniform4i {};
	typedef void(*Fn_glUniform1fv)(GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glUniform1fv s_fn_glUniform1fv {};
	typedef void(*Fn_glUniform2fv)(GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glUniform2fv s_fn_glUniform2fv {};
	typedef void(*Fn_glUniform3fv)(GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glUniform3fv s_fn_glUniform3fv {};
	typedef void(*Fn_glUniform4fv)(GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glUniform4fv s_fn_glUniform4fv {};
	typedef void(*Fn_glUniform1iv)(GLint location, GLsizei count, const GLint * value);
	inline Fn_glUniform1iv s_fn_glUniform1iv {};
	typedef void(*Fn_glUniform2iv)(GLint location, GLsizei count, const GLint * value);
	inline Fn_glUniform2iv s_fn_glUniform2iv {};
	typedef void(*Fn_glUniform3iv)(GLint location, GLsizei count, const GLint * value);
	inline Fn_glUniform3iv s_fn_glUniform3iv {};
	typedef void(*Fn_glUniform4iv)(GLint location, GLsizei count, const GLint * value);
	inline Fn_glUniform4iv s_fn_glUniform4iv {};
	typedef void(*Fn_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix2fv s_fn_glUniformMatrix2fv {};
	typedef void(*Fn_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix3fv s_fn_glUniformMatrix3fv {};
	typedef void(*Fn_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix4fv s_fn_glUniformMatrix4fv {};
	typedef void(*Fn_glValidateProgram)(GLuint program);
	inline Fn_glValidateProgram s_fn_glValidateProgram {};
	typedef void(*Fn_glVertexAttrib1d)(GLuint index, GLdouble x);
	inline Fn_glVertexAttrib1d s_fn_glVertexAttrib1d {};
	typedef void(*Fn_glVertexAttrib1dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttrib1dv s_fn_glVertexAttrib1dv {};
	typedef void(*Fn_glVertexAttrib1f)(GLuint index, GLfloat x);
	inline Fn_glVertexAttrib1f s_fn_glVertexAttrib1f {};
	typedef void(*Fn_glVertexAttrib1fv)(GLuint index, const GLfloat * v);
	inline Fn_glVertexAttrib1fv s_fn_glVertexAttrib1fv {};
	typedef void(*Fn_glVertexAttrib1s)(GLuint index, GLshort x);
	inline Fn_glVertexAttrib1s s_fn_glVertexAttrib1s {};
	typedef void(*Fn_glVertexAttrib1sv)(GLuint index, const GLshort * v);
	inline Fn_glVertexAttrib1sv s_fn_glVertexAttrib1sv {};
	typedef void(*Fn_glVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
	inline Fn_glVertexAttrib2d s_fn_glVertexAttrib2d {};
	typedef void(*Fn_glVertexAttrib2dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttrib2dv s_fn_glVertexAttrib2dv {};
	typedef void(*Fn_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
	inline Fn_glVertexAttrib2f s_fn_glVertexAttrib2f {};
	typedef void(*Fn_glVertexAttrib2fv)(GLuint index, const GLfloat * v);
	inline Fn_glVertexAttrib2fv s_fn_glVertexAttrib2fv {};
	typedef void(*Fn_glVertexAttrib2s)(GLuint index, GLshort x, GLshort y);
	inline Fn_glVertexAttrib2s s_fn_glVertexAttrib2s {};
	typedef void(*Fn_glVertexAttrib2sv)(GLuint index, const GLshort * v);
	inline Fn_glVertexAttrib2sv s_fn_glVertexAttrib2sv {};
	typedef void(*Fn_glVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glVertexAttrib3d s_fn_glVertexAttrib3d {};
	typedef void(*Fn_glVertexAttrib3dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttrib3dv s_fn_glVertexAttrib3dv {};
	typedef void(*Fn_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	inline Fn_glVertexAttrib3f s_fn_glVertexAttrib3f {};
	typedef void(*Fn_glVertexAttrib3fv)(GLuint index, const GLfloat * v);
	inline Fn_glVertexAttrib3fv s_fn_glVertexAttrib3fv {};
	typedef void(*Fn_glVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
	inline Fn_glVertexAttrib3s s_fn_glVertexAttrib3s {};
	typedef void(*Fn_glVertexAttrib3sv)(GLuint index, const GLshort * v);
	inline Fn_glVertexAttrib3sv s_fn_glVertexAttrib3sv {};
	typedef void(*Fn_glVertexAttrib4Nbv)(GLuint index, const GLbyte * v);
	inline Fn_glVertexAttrib4Nbv s_fn_glVertexAttrib4Nbv {};
	typedef void(*Fn_glVertexAttrib4Niv)(GLuint index, const GLint * v);
	inline Fn_glVertexAttrib4Niv s_fn_glVertexAttrib4Niv {};
	typedef void(*Fn_glVertexAttrib4Nsv)(GLuint index, const GLshort * v);
	inline Fn_glVertexAttrib4Nsv s_fn_glVertexAttrib4Nsv {};
	typedef void(*Fn_glVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	inline Fn_glVertexAttrib4Nub s_fn_glVertexAttrib4Nub {};
	typedef void(*Fn_glVertexAttrib4Nubv)(GLuint index, const GLubyte * v);
	inline Fn_glVertexAttrib4Nubv s_fn_glVertexAttrib4Nubv {};
	typedef void(*Fn_glVertexAttrib4Nuiv)(GLuint index, const GLuint * v);
	inline Fn_glVertexAttrib4Nuiv s_fn_glVertexAttrib4Nuiv {};
	typedef void(*Fn_glVertexAttrib4Nusv)(GLuint index, const GLushort * v);
	inline Fn_glVertexAttrib4Nusv s_fn_glVertexAttrib4Nusv {};
	typedef void(*Fn_glVertexAttrib4bv)(GLuint index, const GLbyte * v);
	inline Fn_glVertexAttrib4bv s_fn_glVertexAttrib4bv {};
	typedef void(*Fn_glVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	inline Fn_glVertexAttrib4d s_fn_glVertexAttrib4d {};
	typedef void(*Fn_glVertexAttrib4dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttrib4dv s_fn_glVertexAttrib4dv {};
	typedef void(*Fn_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	inline Fn_glVertexAttrib4f s_fn_glVertexAttrib4f {};
	typedef void(*Fn_glVertexAttrib4fv)(GLuint index, const GLfloat * v);
	inline Fn_glVertexAttrib4fv s_fn_glVertexAttrib4fv {};
	typedef void(*Fn_glVertexAttrib4iv)(GLuint index, const GLint * v);
	inline Fn_glVertexAttrib4iv s_fn_glVertexAttrib4iv {};
	typedef void(*Fn_glVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	inline Fn_glVertexAttrib4s s_fn_glVertexAttrib4s {};
	typedef void(*Fn_glVertexAttrib4sv)(GLuint index, const GLshort * v);
	inline Fn_glVertexAttrib4sv s_fn_glVertexAttrib4sv {};
	typedef void(*Fn_glVertexAttrib4ubv)(GLuint index, const GLubyte * v);
	inline Fn_glVertexAttrib4ubv s_fn_glVertexAttrib4ubv {};
	typedef void(*Fn_glVertexAttrib4uiv)(GLuint index, const GLuint * v);
	inline Fn_glVertexAttrib4uiv s_fn_glVertexAttrib4uiv {};
	typedef void(*Fn_glVertexAttrib4usv)(GLuint index, const GLushort * v);
	inline Fn_glVertexAttrib4usv s_fn_glVertexAttrib4usv {};
	typedef void(*Fn_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
	inline Fn_glVertexAttribPointer s_fn_glVertexAttribPointer {};
	typedef void(*Fn_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix2x3fv s_fn_glUniformMatrix2x3fv {};
	typedef void(*Fn_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix3x2fv s_fn_glUniformMatrix3x2fv {};
	typedef void(*Fn_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix2x4fv s_fn_glUniformMatrix2x4fv {};
	typedef void(*Fn_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix4x2fv s_fn_glUniformMatrix4x2fv {};
	typedef void(*Fn_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix3x4fv s_fn_glUniformMatrix3x4fv {};
	typedef void(*Fn_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glUniformMatrix4x3fv s_fn_glUniformMatrix4x3fv {};
	typedef void(*Fn_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	inline Fn_glColorMaski s_fn_glColorMaski {};
	typedef void(*Fn_glGetBooleani_v)(GLenum target, GLuint index, GLboolean * data);
	inline Fn_glGetBooleani_v s_fn_glGetBooleani_v {};
	typedef void(*Fn_glGetIntegeri_v)(GLenum target, GLuint index, GLint * data);
	inline Fn_glGetIntegeri_v s_fn_glGetIntegeri_v {};
	typedef void(*Fn_glEnablei)(GLenum target, GLuint index);
	inline Fn_glEnablei s_fn_glEnablei {};
	typedef void(*Fn_glDisablei)(GLenum target, GLuint index);
	inline Fn_glDisablei s_fn_glDisablei {};
	typedef GLboolean(*Fn_glIsEnabledi)(GLenum target, GLuint index);
	inline Fn_glIsEnabledi s_fn_glIsEnabledi {};
	typedef void(*Fn_glBeginTransformFeedback)(GLenum primitiveMode);
	inline Fn_glBeginTransformFeedback s_fn_glBeginTransformFeedback {};
	typedef void(*Fn_glEndTransformFeedback)();
	inline Fn_glEndTransformFeedback s_fn_glEndTransformFeedback {};
	typedef void(*Fn_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	inline Fn_glBindBufferRange s_fn_glBindBufferRange {};
	typedef void(*Fn_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
	inline Fn_glBindBufferBase s_fn_glBindBufferBase {};
	typedef void(*Fn_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
	inline Fn_glTransformFeedbackVaryings s_fn_glTransformFeedbackVaryings {};
	typedef void(*Fn_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
	inline Fn_glGetTransformFeedbackVarying s_fn_glGetTransformFeedbackVarying {};
	typedef void(*Fn_glClampColor)(GLenum target, GLenum clamp);
	inline Fn_glClampColor s_fn_glClampColor {};
	typedef void(*Fn_glBeginConditionalRender)(GLuint id, GLenum mode);
	inline Fn_glBeginConditionalRender s_fn_glBeginConditionalRender {};
	typedef void(*Fn_glEndConditionalRender)();
	inline Fn_glEndConditionalRender s_fn_glEndConditionalRender {};
	typedef void(*Fn_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glVertexAttribIPointer s_fn_glVertexAttribIPointer {};
	typedef void(*Fn_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint * params);
	inline Fn_glGetVertexAttribIiv s_fn_glGetVertexAttribIiv {};
	typedef void(*Fn_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint * params);
	inline Fn_glGetVertexAttribIuiv s_fn_glGetVertexAttribIuiv {};
	typedef void(*Fn_glVertexAttribI1i)(GLuint index, GLint x);
	inline Fn_glVertexAttribI1i s_fn_glVertexAttribI1i {};
	typedef void(*Fn_glVertexAttribI2i)(GLuint index, GLint x, GLint y);
	inline Fn_glVertexAttribI2i s_fn_glVertexAttribI2i {};
	typedef void(*Fn_glVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
	inline Fn_glVertexAttribI3i s_fn_glVertexAttribI3i {};
	typedef void(*Fn_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
	inline Fn_glVertexAttribI4i s_fn_glVertexAttribI4i {};
	typedef void(*Fn_glVertexAttribI1ui)(GLuint index, GLuint x);
	inline Fn_glVertexAttribI1ui s_fn_glVertexAttribI1ui {};
	typedef void(*Fn_glVertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
	inline Fn_glVertexAttribI2ui s_fn_glVertexAttribI2ui {};
	typedef void(*Fn_glVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
	inline Fn_glVertexAttribI3ui s_fn_glVertexAttribI3ui {};
	typedef void(*Fn_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	inline Fn_glVertexAttribI4ui s_fn_glVertexAttribI4ui {};
	typedef void(*Fn_glVertexAttribI1iv)(GLuint index, const GLint * v);
	inline Fn_glVertexAttribI1iv s_fn_glVertexAttribI1iv {};
	typedef void(*Fn_glVertexAttribI2iv)(GLuint index, const GLint * v);
	inline Fn_glVertexAttribI2iv s_fn_glVertexAttribI2iv {};
	typedef void(*Fn_glVertexAttribI3iv)(GLuint index, const GLint * v);
	inline Fn_glVertexAttribI3iv s_fn_glVertexAttribI3iv {};
	typedef void(*Fn_glVertexAttribI4iv)(GLuint index, const GLint * v);
	inline Fn_glVertexAttribI4iv s_fn_glVertexAttribI4iv {};
	typedef void(*Fn_glVertexAttribI1uiv)(GLuint index, const GLuint * v);
	inline Fn_glVertexAttribI1uiv s_fn_glVertexAttribI1uiv {};
	typedef void(*Fn_glVertexAttribI2uiv)(GLuint index, const GLuint * v);
	inline Fn_glVertexAttribI2uiv s_fn_glVertexAttribI2uiv {};
	typedef void(*Fn_glVertexAttribI3uiv)(GLuint index, const GLuint * v);
	inline Fn_glVertexAttribI3uiv s_fn_glVertexAttribI3uiv {};
	typedef void(*Fn_glVertexAttribI4uiv)(GLuint index, const GLuint * v);
	inline Fn_glVertexAttribI4uiv s_fn_glVertexAttribI4uiv {};
	typedef void(*Fn_glVertexAttribI4bv)(GLuint index, const GLbyte * v);
	inline Fn_glVertexAttribI4bv s_fn_glVertexAttribI4bv {};
	typedef void(*Fn_glVertexAttribI4sv)(GLuint index, const GLshort * v);
	inline Fn_glVertexAttribI4sv s_fn_glVertexAttribI4sv {};
	typedef void(*Fn_glVertexAttribI4ubv)(GLuint index, const GLubyte * v);
	inline Fn_glVertexAttribI4ubv s_fn_glVertexAttribI4ubv {};
	typedef void(*Fn_glVertexAttribI4usv)(GLuint index, const GLushort * v);
	inline Fn_glVertexAttribI4usv s_fn_glVertexAttribI4usv {};
	typedef void(*Fn_glGetUniformuiv)(GLuint program, GLint location, GLuint * params);
	inline Fn_glGetUniformuiv s_fn_glGetUniformuiv {};
	typedef void(*Fn_glBindFragDataLocation)(GLuint program, GLuint color, const GLchar * name);
	inline Fn_glBindFragDataLocation s_fn_glBindFragDataLocation {};
	typedef GLint(*Fn_glGetFragDataLocation)(GLuint program, const GLchar * name);
	inline Fn_glGetFragDataLocation s_fn_glGetFragDataLocation {};
	typedef void(*Fn_glUniform1ui)(GLint location, GLuint v0);
	inline Fn_glUniform1ui s_fn_glUniform1ui {};
	typedef void(*Fn_glUniform2ui)(GLint location, GLuint v0, GLuint v1);
	inline Fn_glUniform2ui s_fn_glUniform2ui {};
	typedef void(*Fn_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
	inline Fn_glUniform3ui s_fn_glUniform3ui {};
	typedef void(*Fn_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	inline Fn_glUniform4ui s_fn_glUniform4ui {};
	typedef void(*Fn_glUniform1uiv)(GLint location, GLsizei count, const GLuint * value);
	inline Fn_glUniform1uiv s_fn_glUniform1uiv {};
	typedef void(*Fn_glUniform2uiv)(GLint location, GLsizei count, const GLuint * value);
	inline Fn_glUniform2uiv s_fn_glUniform2uiv {};
	typedef void(*Fn_glUniform3uiv)(GLint location, GLsizei count, const GLuint * value);
	inline Fn_glUniform3uiv s_fn_glUniform3uiv {};
	typedef void(*Fn_glUniform4uiv)(GLint location, GLsizei count, const GLuint * value);
	inline Fn_glUniform4uiv s_fn_glUniform4uiv {};
	typedef void(*Fn_glTexParameterIiv)(GLenum target, GLenum pname, const GLint * params);
	inline Fn_glTexParameterIiv s_fn_glTexParameterIiv {};
	typedef void(*Fn_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint * params);
	inline Fn_glTexParameterIuiv s_fn_glTexParameterIuiv {};
	typedef void(*Fn_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetTexParameterIiv s_fn_glGetTexParameterIiv {};
	typedef void(*Fn_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint * params);
	inline Fn_glGetTexParameterIuiv s_fn_glGetTexParameterIuiv {};
	typedef void(*Fn_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint * value);
	inline Fn_glClearBufferiv s_fn_glClearBufferiv {};
	typedef void(*Fn_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint * value);
	inline Fn_glClearBufferuiv s_fn_glClearBufferuiv {};
	typedef void(*Fn_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
	inline Fn_glClearBufferfv s_fn_glClearBufferfv {};
	typedef void(*Fn_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	inline Fn_glClearBufferfi s_fn_glClearBufferfi {};
	typedef const GLubyte *(*Fn_glGetStringi)(GLenum name, GLuint index);
	inline Fn_glGetStringi s_fn_glGetStringi {};
	typedef GLboolean(*Fn_glIsRenderbuffer)(GLuint renderbuffer);
	inline Fn_glIsRenderbuffer s_fn_glIsRenderbuffer {};
	typedef void(*Fn_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
	inline Fn_glBindRenderbuffer s_fn_glBindRenderbuffer {};
	typedef void(*Fn_glDeleteRenderbuffers)(GLsizei n, const GLuint * renderbuffers);
	inline Fn_glDeleteRenderbuffers s_fn_glDeleteRenderbuffers {};
	typedef void(*Fn_glGenRenderbuffers)(GLsizei n, GLuint * renderbuffers);
	inline Fn_glGenRenderbuffers s_fn_glGenRenderbuffers {};
	typedef void(*Fn_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	inline Fn_glRenderbufferStorage s_fn_glRenderbufferStorage {};
	typedef void(*Fn_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetRenderbufferParameteriv s_fn_glGetRenderbufferParameteriv {};
	typedef GLboolean(*Fn_glIsFramebuffer)(GLuint framebuffer);
	inline Fn_glIsFramebuffer s_fn_glIsFramebuffer {};
	typedef void(*Fn_glBindFramebuffer)(GLenum target, GLuint framebuffer);
	inline Fn_glBindFramebuffer s_fn_glBindFramebuffer {};
	typedef void(*Fn_glDeleteFramebuffers)(GLsizei n, const GLuint * framebuffers);
	inline Fn_glDeleteFramebuffers s_fn_glDeleteFramebuffers {};
	typedef void(*Fn_glGenFramebuffers)(GLsizei n, GLuint * framebuffers);
	inline Fn_glGenFramebuffers s_fn_glGenFramebuffers {};
	typedef GLenum(*Fn_glCheckFramebufferStatus)(GLenum target);
	inline Fn_glCheckFramebufferStatus s_fn_glCheckFramebufferStatus {};
	typedef void(*Fn_glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	inline Fn_glFramebufferTexture1D s_fn_glFramebufferTexture1D {};
	typedef void(*Fn_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	inline Fn_glFramebufferTexture2D s_fn_glFramebufferTexture2D {};
	typedef void(*Fn_glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	inline Fn_glFramebufferTexture3D s_fn_glFramebufferTexture3D {};
	typedef void(*Fn_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	inline Fn_glFramebufferRenderbuffer s_fn_glFramebufferRenderbuffer {};
	typedef void(*Fn_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
	inline Fn_glGetFramebufferAttachmentParameteriv s_fn_glGetFramebufferAttachmentParameteriv {};
	typedef void(*Fn_glGenerateMipmap)(GLenum target);
	inline Fn_glGenerateMipmap s_fn_glGenerateMipmap {};
	typedef void(*Fn_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	inline Fn_glBlitFramebuffer s_fn_glBlitFramebuffer {};
	typedef void(*Fn_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	inline Fn_glRenderbufferStorageMultisample s_fn_glRenderbufferStorageMultisample {};
	typedef void(*Fn_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	inline Fn_glFramebufferTextureLayer s_fn_glFramebufferTextureLayer {};
	typedef void *(*Fn_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	inline Fn_glMapBufferRange s_fn_glMapBufferRange {};
	typedef void(*Fn_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
	inline Fn_glFlushMappedBufferRange s_fn_glFlushMappedBufferRange {};
	typedef void(*Fn_glBindVertexArray)(GLuint array);
	inline Fn_glBindVertexArray s_fn_glBindVertexArray {};
	typedef void(*Fn_glDeleteVertexArrays)(GLsizei n, const GLuint * arrays);
	inline Fn_glDeleteVertexArrays s_fn_glDeleteVertexArrays {};
	typedef void(*Fn_glGenVertexArrays)(GLsizei n, GLuint * arrays);
	inline Fn_glGenVertexArrays s_fn_glGenVertexArrays {};
	typedef GLboolean(*Fn_glIsVertexArray)(GLuint array);
	inline Fn_glIsVertexArray s_fn_glIsVertexArray {};
	typedef void(*Fn_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	inline Fn_glDrawArraysInstanced s_fn_glDrawArraysInstanced {};
	typedef void(*Fn_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
	inline Fn_glDrawElementsInstanced s_fn_glDrawElementsInstanced {};
	typedef void(*Fn_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
	inline Fn_glTexBuffer s_fn_glTexBuffer {};
	typedef void(*Fn_glPrimitiveRestartIndex)(GLuint index);
	inline Fn_glPrimitiveRestartIndex s_fn_glPrimitiveRestartIndex {};
	typedef void(*Fn_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	inline Fn_glCopyBufferSubData s_fn_glCopyBufferSubData {};
	typedef void(*Fn_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
	inline Fn_glGetUniformIndices s_fn_glGetUniformIndices {};
	typedef void(*Fn_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
	inline Fn_glGetActiveUniformsiv s_fn_glGetActiveUniformsiv {};
	typedef void(*Fn_glGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
	inline Fn_glGetActiveUniformName s_fn_glGetActiveUniformName {};
	typedef GLuint(*Fn_glGetUniformBlockIndex)(GLuint program, const GLchar * uniformBlockName);
	inline Fn_glGetUniformBlockIndex s_fn_glGetUniformBlockIndex {};
	typedef void(*Fn_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
	inline Fn_glGetActiveUniformBlockiv s_fn_glGetActiveUniformBlockiv {};
	typedef void(*Fn_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
	inline Fn_glGetActiveUniformBlockName s_fn_glGetActiveUniformBlockName {};
	typedef void(*Fn_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	inline Fn_glUniformBlockBinding s_fn_glUniformBlockBinding {};
	typedef void(*Fn_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
	inline Fn_glDrawElementsBaseVertex s_fn_glDrawElementsBaseVertex {};
	typedef void(*Fn_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
	inline Fn_glDrawRangeElementsBaseVertex s_fn_glDrawRangeElementsBaseVertex {};
	typedef void(*Fn_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
	inline Fn_glDrawElementsInstancedBaseVertex s_fn_glDrawElementsInstancedBaseVertex {};
	typedef void(*Fn_glMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
	inline Fn_glMultiDrawElementsBaseVertex s_fn_glMultiDrawElementsBaseVertex {};
	typedef void(*Fn_glProvokingVertex)(GLenum mode);
	inline Fn_glProvokingVertex s_fn_glProvokingVertex {};
	typedef GLsync(*Fn_glFenceSync)(GLenum condition, GLbitfield flags);
	inline Fn_glFenceSync s_fn_glFenceSync {};
	typedef GLboolean(*Fn_glIsSync)(GLsync sync);
	inline Fn_glIsSync s_fn_glIsSync {};
	typedef void(*Fn_glDeleteSync)(GLsync sync);
	inline Fn_glDeleteSync s_fn_glDeleteSync {};
	typedef GLenum(*Fn_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
	inline Fn_glClientWaitSync s_fn_glClientWaitSync {};
	typedef void(*Fn_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
	inline Fn_glWaitSync s_fn_glWaitSync {};
	typedef void(*Fn_glGetInteger64v)(GLenum pname, GLint64 * data);
	inline Fn_glGetInteger64v s_fn_glGetInteger64v {};
	typedef void(*Fn_glGetSynciv)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
	inline Fn_glGetSynciv s_fn_glGetSynciv {};
	typedef void(*Fn_glGetInteger64i_v)(GLenum target, GLuint index, GLint64 * data);
	inline Fn_glGetInteger64i_v s_fn_glGetInteger64i_v {};
	typedef void(*Fn_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 * params);
	inline Fn_glGetBufferParameteri64v s_fn_glGetBufferParameteri64v {};
	typedef void(*Fn_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
	inline Fn_glFramebufferTexture s_fn_glFramebufferTexture {};
	typedef void(*Fn_glTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	inline Fn_glTexImage2DMultisample s_fn_glTexImage2DMultisample {};
	typedef void(*Fn_glTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	inline Fn_glTexImage3DMultisample s_fn_glTexImage3DMultisample {};
	typedef void(*Fn_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat * val);
	inline Fn_glGetMultisamplefv s_fn_glGetMultisamplefv {};
	typedef void(*Fn_glSampleMaski)(GLuint maskNumber, GLbitfield mask);
	inline Fn_glSampleMaski s_fn_glSampleMaski {};
	typedef void(*Fn_glBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
	inline Fn_glBindFragDataLocationIndexed s_fn_glBindFragDataLocationIndexed {};
	typedef GLint(*Fn_glGetFragDataIndex)(GLuint program, const GLchar * name);
	inline Fn_glGetFragDataIndex s_fn_glGetFragDataIndex {};
	typedef void(*Fn_glGenSamplers)(GLsizei count, GLuint * samplers);
	inline Fn_glGenSamplers s_fn_glGenSamplers {};
	typedef void(*Fn_glDeleteSamplers)(GLsizei count, const GLuint * samplers);
	inline Fn_glDeleteSamplers s_fn_glDeleteSamplers {};
	typedef GLboolean(*Fn_glIsSampler)(GLuint sampler);
	inline Fn_glIsSampler s_fn_glIsSampler {};
	typedef void(*Fn_glBindSampler)(GLuint unit, GLuint sampler);
	inline Fn_glBindSampler s_fn_glBindSampler {};
	typedef void(*Fn_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
	inline Fn_glSamplerParameteri s_fn_glSamplerParameteri {};
	typedef void(*Fn_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint * param);
	inline Fn_glSamplerParameteriv s_fn_glSamplerParameteriv {};
	typedef void(*Fn_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
	inline Fn_glSamplerParameterf s_fn_glSamplerParameterf {};
	typedef void(*Fn_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat * param);
	inline Fn_glSamplerParameterfv s_fn_glSamplerParameterfv {};
	typedef void(*Fn_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint * param);
	inline Fn_glSamplerParameterIiv s_fn_glSamplerParameterIiv {};
	typedef void(*Fn_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint * param);
	inline Fn_glSamplerParameterIuiv s_fn_glSamplerParameterIuiv {};
	typedef void(*Fn_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint * params);
	inline Fn_glGetSamplerParameteriv s_fn_glGetSamplerParameteriv {};
	typedef void(*Fn_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint * params);
	inline Fn_glGetSamplerParameterIiv s_fn_glGetSamplerParameterIiv {};
	typedef void(*Fn_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat * params);
	inline Fn_glGetSamplerParameterfv s_fn_glGetSamplerParameterfv {};
	typedef void(*Fn_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint * params);
	inline Fn_glGetSamplerParameterIuiv s_fn_glGetSamplerParameterIuiv {};
	typedef void(*Fn_glQueryCounter)(GLuint id, GLenum target);
	inline Fn_glQueryCounter s_fn_glQueryCounter {};
	typedef void(*Fn_glGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 * params);
	inline Fn_glGetQueryObjecti64v s_fn_glGetQueryObjecti64v {};
	typedef void(*Fn_glGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 * params);
	inline Fn_glGetQueryObjectui64v s_fn_glGetQueryObjectui64v {};
	typedef void(*Fn_glVertexAttribDivisor)(GLuint index, GLuint divisor);
	inline Fn_glVertexAttribDivisor s_fn_glVertexAttribDivisor {};
	typedef void(*Fn_glVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	inline Fn_glVertexAttribP1ui s_fn_glVertexAttribP1ui {};
	typedef void(*Fn_glVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
	inline Fn_glVertexAttribP1uiv s_fn_glVertexAttribP1uiv {};
	typedef void(*Fn_glVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	inline Fn_glVertexAttribP2ui s_fn_glVertexAttribP2ui {};
	typedef void(*Fn_glVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
	inline Fn_glVertexAttribP2uiv s_fn_glVertexAttribP2uiv {};
	typedef void(*Fn_glVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	inline Fn_glVertexAttribP3ui s_fn_glVertexAttribP3ui {};
	typedef void(*Fn_glVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
	inline Fn_glVertexAttribP3uiv s_fn_glVertexAttribP3uiv {};
	typedef void(*Fn_glVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	inline Fn_glVertexAttribP4ui s_fn_glVertexAttribP4ui {};
	typedef void(*Fn_glVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
	inline Fn_glVertexAttribP4uiv s_fn_glVertexAttribP4uiv {};
	typedef void(*Fn_glVertexP2ui)(GLenum type, GLuint value);
	inline Fn_glVertexP2ui s_fn_glVertexP2ui {};
	typedef void(*Fn_glVertexP2uiv)(GLenum type, const GLuint * value);
	inline Fn_glVertexP2uiv s_fn_glVertexP2uiv {};
	typedef void(*Fn_glVertexP3ui)(GLenum type, GLuint value);
	inline Fn_glVertexP3ui s_fn_glVertexP3ui {};
	typedef void(*Fn_glVertexP3uiv)(GLenum type, const GLuint * value);
	inline Fn_glVertexP3uiv s_fn_glVertexP3uiv {};
	typedef void(*Fn_glVertexP4ui)(GLenum type, GLuint value);
	inline Fn_glVertexP4ui s_fn_glVertexP4ui {};
	typedef void(*Fn_glVertexP4uiv)(GLenum type, const GLuint * value);
	inline Fn_glVertexP4uiv s_fn_glVertexP4uiv {};
	typedef void(*Fn_glTexCoordP1ui)(GLenum type, GLuint coords);
	inline Fn_glTexCoordP1ui s_fn_glTexCoordP1ui {};
	typedef void(*Fn_glTexCoordP1uiv)(GLenum type, const GLuint * coords);
	inline Fn_glTexCoordP1uiv s_fn_glTexCoordP1uiv {};
	typedef void(*Fn_glTexCoordP2ui)(GLenum type, GLuint coords);
	inline Fn_glTexCoordP2ui s_fn_glTexCoordP2ui {};
	typedef void(*Fn_glTexCoordP2uiv)(GLenum type, const GLuint * coords);
	inline Fn_glTexCoordP2uiv s_fn_glTexCoordP2uiv {};
	typedef void(*Fn_glTexCoordP3ui)(GLenum type, GLuint coords);
	inline Fn_glTexCoordP3ui s_fn_glTexCoordP3ui {};
	typedef void(*Fn_glTexCoordP3uiv)(GLenum type, const GLuint * coords);
	inline Fn_glTexCoordP3uiv s_fn_glTexCoordP3uiv {};
	typedef void(*Fn_glTexCoordP4ui)(GLenum type, GLuint coords);
	inline Fn_glTexCoordP4ui s_fn_glTexCoordP4ui {};
	typedef void(*Fn_glTexCoordP4uiv)(GLenum type, const GLuint * coords);
	inline Fn_glTexCoordP4uiv s_fn_glTexCoordP4uiv {};
	typedef void(*Fn_glMultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords);
	inline Fn_glMultiTexCoordP1ui s_fn_glMultiTexCoordP1ui {};
	typedef void(*Fn_glMultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint * coords);
	inline Fn_glMultiTexCoordP1uiv s_fn_glMultiTexCoordP1uiv {};
	typedef void(*Fn_glMultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords);
	inline Fn_glMultiTexCoordP2ui s_fn_glMultiTexCoordP2ui {};
	typedef void(*Fn_glMultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint * coords);
	inline Fn_glMultiTexCoordP2uiv s_fn_glMultiTexCoordP2uiv {};
	typedef void(*Fn_glMultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords);
	inline Fn_glMultiTexCoordP3ui s_fn_glMultiTexCoordP3ui {};
	typedef void(*Fn_glMultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint * coords);
	inline Fn_glMultiTexCoordP3uiv s_fn_glMultiTexCoordP3uiv {};
	typedef void(*Fn_glMultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords);
	inline Fn_glMultiTexCoordP4ui s_fn_glMultiTexCoordP4ui {};
	typedef void(*Fn_glMultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint * coords);
	inline Fn_glMultiTexCoordP4uiv s_fn_glMultiTexCoordP4uiv {};
	typedef void(*Fn_glNormalP3ui)(GLenum type, GLuint coords);
	inline Fn_glNormalP3ui s_fn_glNormalP3ui {};
	typedef void(*Fn_glNormalP3uiv)(GLenum type, const GLuint * coords);
	inline Fn_glNormalP3uiv s_fn_glNormalP3uiv {};
	typedef void(*Fn_glColorP3ui)(GLenum type, GLuint color);
	inline Fn_glColorP3ui s_fn_glColorP3ui {};
	typedef void(*Fn_glColorP3uiv)(GLenum type, const GLuint * color);
	inline Fn_glColorP3uiv s_fn_glColorP3uiv {};
	typedef void(*Fn_glColorP4ui)(GLenum type, GLuint color);
	inline Fn_glColorP4ui s_fn_glColorP4ui {};
	typedef void(*Fn_glColorP4uiv)(GLenum type, const GLuint * color);
	inline Fn_glColorP4uiv s_fn_glColorP4uiv {};
	typedef void(*Fn_glSecondaryColorP3ui)(GLenum type, GLuint color);
	inline Fn_glSecondaryColorP3ui s_fn_glSecondaryColorP3ui {};
	typedef void(*Fn_glSecondaryColorP3uiv)(GLenum type, const GLuint * color);
	inline Fn_glSecondaryColorP3uiv s_fn_glSecondaryColorP3uiv {};
	typedef void(*Fn_glMinSampleShading)(GLfloat value);
	inline Fn_glMinSampleShading s_fn_glMinSampleShading {};
	typedef void(*Fn_glBlendEquationi)(GLuint buf, GLenum mode);
	inline Fn_glBlendEquationi s_fn_glBlendEquationi {};
	typedef void(*Fn_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	inline Fn_glBlendEquationSeparatei s_fn_glBlendEquationSeparatei {};
	typedef void(*Fn_glBlendFunci)(GLuint buf, GLenum src, GLenum dst);
	inline Fn_glBlendFunci s_fn_glBlendFunci {};
	typedef void(*Fn_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	inline Fn_glBlendFuncSeparatei s_fn_glBlendFuncSeparatei {};
	typedef void(*Fn_glDrawArraysIndirect)(GLenum mode, const void * indirect);
	inline Fn_glDrawArraysIndirect s_fn_glDrawArraysIndirect {};
	typedef void(*Fn_glDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect);
	inline Fn_glDrawElementsIndirect s_fn_glDrawElementsIndirect {};
	typedef void(*Fn_glUniform1d)(GLint location, GLdouble x);
	inline Fn_glUniform1d s_fn_glUniform1d {};
	typedef void(*Fn_glUniform2d)(GLint location, GLdouble x, GLdouble y);
	inline Fn_glUniform2d s_fn_glUniform2d {};
	typedef void(*Fn_glUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glUniform3d s_fn_glUniform3d {};
	typedef void(*Fn_glUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	inline Fn_glUniform4d s_fn_glUniform4d {};
	typedef void(*Fn_glUniform1dv)(GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glUniform1dv s_fn_glUniform1dv {};
	typedef void(*Fn_glUniform2dv)(GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glUniform2dv s_fn_glUniform2dv {};
	typedef void(*Fn_glUniform3dv)(GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glUniform3dv s_fn_glUniform3dv {};
	typedef void(*Fn_glUniform4dv)(GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glUniform4dv s_fn_glUniform4dv {};
	typedef void(*Fn_glUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix2dv s_fn_glUniformMatrix2dv {};
	typedef void(*Fn_glUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix3dv s_fn_glUniformMatrix3dv {};
	typedef void(*Fn_glUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix4dv s_fn_glUniformMatrix4dv {};
	typedef void(*Fn_glUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix2x3dv s_fn_glUniformMatrix2x3dv {};
	typedef void(*Fn_glUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix2x4dv s_fn_glUniformMatrix2x4dv {};
	typedef void(*Fn_glUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix3x2dv s_fn_glUniformMatrix3x2dv {};
	typedef void(*Fn_glUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix3x4dv s_fn_glUniformMatrix3x4dv {};
	typedef void(*Fn_glUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix4x2dv s_fn_glUniformMatrix4x2dv {};
	typedef void(*Fn_glUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glUniformMatrix4x3dv s_fn_glUniformMatrix4x3dv {};
	typedef void(*Fn_glGetUniformdv)(GLuint program, GLint location, GLdouble * params);
	inline Fn_glGetUniformdv s_fn_glGetUniformdv {};
	typedef GLint(*Fn_glGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar * name);
	inline Fn_glGetSubroutineUniformLocation s_fn_glGetSubroutineUniformLocation {};
	typedef GLuint(*Fn_glGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar * name);
	inline Fn_glGetSubroutineIndex s_fn_glGetSubroutineIndex {};
	typedef void(*Fn_glGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
	inline Fn_glGetActiveSubroutineUniformiv s_fn_glGetActiveSubroutineUniformiv {};
	typedef void(*Fn_glGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
	inline Fn_glGetActiveSubroutineUniformName s_fn_glGetActiveSubroutineUniformName {};
	typedef void(*Fn_glGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
	inline Fn_glGetActiveSubroutineName s_fn_glGetActiveSubroutineName {};
	typedef void(*Fn_glUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint * indices);
	inline Fn_glUniformSubroutinesuiv s_fn_glUniformSubroutinesuiv {};
	typedef void(*Fn_glGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint * params);
	inline Fn_glGetUniformSubroutineuiv s_fn_glGetUniformSubroutineuiv {};
	typedef void(*Fn_glGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
	inline Fn_glGetProgramStageiv s_fn_glGetProgramStageiv {};
	typedef void(*Fn_glPatchParameteri)(GLenum pname, GLint value);
	inline Fn_glPatchParameteri s_fn_glPatchParameteri {};
	typedef void(*Fn_glPatchParameterfv)(GLenum pname, const GLfloat * values);
	inline Fn_glPatchParameterfv s_fn_glPatchParameterfv {};
	typedef void(*Fn_glBindTransformFeedback)(GLenum target, GLuint id);
	inline Fn_glBindTransformFeedback s_fn_glBindTransformFeedback {};
	typedef void(*Fn_glDeleteTransformFeedbacks)(GLsizei n, const GLuint * ids);
	inline Fn_glDeleteTransformFeedbacks s_fn_glDeleteTransformFeedbacks {};
	typedef void(*Fn_glGenTransformFeedbacks)(GLsizei n, GLuint * ids);
	inline Fn_glGenTransformFeedbacks s_fn_glGenTransformFeedbacks {};
	typedef GLboolean(*Fn_glIsTransformFeedback)(GLuint id);
	inline Fn_glIsTransformFeedback s_fn_glIsTransformFeedback {};
	typedef void(*Fn_glPauseTransformFeedback)();
	inline Fn_glPauseTransformFeedback s_fn_glPauseTransformFeedback {};
	typedef void(*Fn_glResumeTransformFeedback)();
	inline Fn_glResumeTransformFeedback s_fn_glResumeTransformFeedback {};
	typedef void(*Fn_glDrawTransformFeedback)(GLenum mode, GLuint id);
	inline Fn_glDrawTransformFeedback s_fn_glDrawTransformFeedback {};
	typedef void(*Fn_glDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
	inline Fn_glDrawTransformFeedbackStream s_fn_glDrawTransformFeedbackStream {};
	typedef void(*Fn_glBeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
	inline Fn_glBeginQueryIndexed s_fn_glBeginQueryIndexed {};
	typedef void(*Fn_glEndQueryIndexed)(GLenum target, GLuint index);
	inline Fn_glEndQueryIndexed s_fn_glEndQueryIndexed {};
	typedef void(*Fn_glGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint * params);
	inline Fn_glGetQueryIndexediv s_fn_glGetQueryIndexediv {};
	typedef void(*Fn_glReleaseShaderCompiler)();
	inline Fn_glReleaseShaderCompiler s_fn_glReleaseShaderCompiler {};
	typedef void(*Fn_glShaderBinary)(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
	inline Fn_glShaderBinary s_fn_glShaderBinary {};
	typedef void(*Fn_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
	inline Fn_glGetShaderPrecisionFormat s_fn_glGetShaderPrecisionFormat {};
	typedef void(*Fn_glDepthRangef)(GLfloat n, GLfloat f);
	inline Fn_glDepthRangef s_fn_glDepthRangef {};
	typedef void(*Fn_glClearDepthf)(GLfloat d);
	inline Fn_glClearDepthf s_fn_glClearDepthf {};
	typedef void(*Fn_glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
	inline Fn_glGetProgramBinary s_fn_glGetProgramBinary {};
	typedef void(*Fn_glProgramBinary)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
	inline Fn_glProgramBinary s_fn_glProgramBinary {};
	typedef void(*Fn_glProgramParameteri)(GLuint program, GLenum pname, GLint value);
	inline Fn_glProgramParameteri s_fn_glProgramParameteri {};
	typedef void(*Fn_glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
	inline Fn_glUseProgramStages s_fn_glUseProgramStages {};
	typedef void(*Fn_glActiveShaderProgram)(GLuint pipeline, GLuint program);
	inline Fn_glActiveShaderProgram s_fn_glActiveShaderProgram {};
	typedef GLuint(*Fn_glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const* strings);
	inline Fn_glCreateShaderProgramv s_fn_glCreateShaderProgramv {};
	typedef void(*Fn_glBindProgramPipeline)(GLuint pipeline);
	inline Fn_glBindProgramPipeline s_fn_glBindProgramPipeline {};
	typedef void(*Fn_glDeleteProgramPipelines)(GLsizei n, const GLuint * pipelines);
	inline Fn_glDeleteProgramPipelines s_fn_glDeleteProgramPipelines {};
	typedef void(*Fn_glGenProgramPipelines)(GLsizei n, GLuint * pipelines);
	inline Fn_glGenProgramPipelines s_fn_glGenProgramPipelines {};
	typedef GLboolean(*Fn_glIsProgramPipeline)(GLuint pipeline);
	inline Fn_glIsProgramPipeline s_fn_glIsProgramPipeline {};
	typedef void(*Fn_glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint * params);
	inline Fn_glGetProgramPipelineiv s_fn_glGetProgramPipelineiv {};
	typedef void(*Fn_glProgramUniform1i)(GLuint program, GLint location, GLint v0);
	inline Fn_glProgramUniform1i s_fn_glProgramUniform1i {};
	typedef void(*Fn_glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
	inline Fn_glProgramUniform1iv s_fn_glProgramUniform1iv {};
	typedef void(*Fn_glProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
	inline Fn_glProgramUniform1f s_fn_glProgramUniform1f {};
	typedef void(*Fn_glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glProgramUniform1fv s_fn_glProgramUniform1fv {};
	typedef void(*Fn_glProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
	inline Fn_glProgramUniform1d s_fn_glProgramUniform1d {};
	typedef void(*Fn_glProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glProgramUniform1dv s_fn_glProgramUniform1dv {};
	typedef void(*Fn_glProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
	inline Fn_glProgramUniform1ui s_fn_glProgramUniform1ui {};
	typedef void(*Fn_glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
	inline Fn_glProgramUniform1uiv s_fn_glProgramUniform1uiv {};
	typedef void(*Fn_glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
	inline Fn_glProgramUniform2i s_fn_glProgramUniform2i {};
	typedef void(*Fn_glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
	inline Fn_glProgramUniform2iv s_fn_glProgramUniform2iv {};
	typedef void(*Fn_glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	inline Fn_glProgramUniform2f s_fn_glProgramUniform2f {};
	typedef void(*Fn_glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glProgramUniform2fv s_fn_glProgramUniform2fv {};
	typedef void(*Fn_glProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	inline Fn_glProgramUniform2d s_fn_glProgramUniform2d {};
	typedef void(*Fn_glProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glProgramUniform2dv s_fn_glProgramUniform2dv {};
	typedef void(*Fn_glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
	inline Fn_glProgramUniform2ui s_fn_glProgramUniform2ui {};
	typedef void(*Fn_glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
	inline Fn_glProgramUniform2uiv s_fn_glProgramUniform2uiv {};
	typedef void(*Fn_glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	inline Fn_glProgramUniform3i s_fn_glProgramUniform3i {};
	typedef void(*Fn_glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
	inline Fn_glProgramUniform3iv s_fn_glProgramUniform3iv {};
	typedef void(*Fn_glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	inline Fn_glProgramUniform3f s_fn_glProgramUniform3f {};
	typedef void(*Fn_glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glProgramUniform3fv s_fn_glProgramUniform3fv {};
	typedef void(*Fn_glProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	inline Fn_glProgramUniform3d s_fn_glProgramUniform3d {};
	typedef void(*Fn_glProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glProgramUniform3dv s_fn_glProgramUniform3dv {};
	typedef void(*Fn_glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	inline Fn_glProgramUniform3ui s_fn_glProgramUniform3ui {};
	typedef void(*Fn_glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
	inline Fn_glProgramUniform3uiv s_fn_glProgramUniform3uiv {};
	typedef void(*Fn_glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	inline Fn_glProgramUniform4i s_fn_glProgramUniform4i {};
	typedef void(*Fn_glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
	inline Fn_glProgramUniform4iv s_fn_glProgramUniform4iv {};
	typedef void(*Fn_glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	inline Fn_glProgramUniform4f s_fn_glProgramUniform4f {};
	typedef void(*Fn_glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
	inline Fn_glProgramUniform4fv s_fn_glProgramUniform4fv {};
	typedef void(*Fn_glProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	inline Fn_glProgramUniform4d s_fn_glProgramUniform4d {};
	typedef void(*Fn_glProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
	inline Fn_glProgramUniform4dv s_fn_glProgramUniform4dv {};
	typedef void(*Fn_glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	inline Fn_glProgramUniform4ui s_fn_glProgramUniform4ui {};
	typedef void(*Fn_glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
	inline Fn_glProgramUniform4uiv s_fn_glProgramUniform4uiv {};
	typedef void(*Fn_glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix2fv s_fn_glProgramUniformMatrix2fv {};
	typedef void(*Fn_glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix3fv s_fn_glProgramUniformMatrix3fv {};
	typedef void(*Fn_glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix4fv s_fn_glProgramUniformMatrix4fv {};
	typedef void(*Fn_glProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix2dv s_fn_glProgramUniformMatrix2dv {};
	typedef void(*Fn_glProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix3dv s_fn_glProgramUniformMatrix3dv {};
	typedef void(*Fn_glProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix4dv s_fn_glProgramUniformMatrix4dv {};
	typedef void(*Fn_glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix2x3fv s_fn_glProgramUniformMatrix2x3fv {};
	typedef void(*Fn_glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix3x2fv s_fn_glProgramUniformMatrix3x2fv {};
	typedef void(*Fn_glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix2x4fv s_fn_glProgramUniformMatrix2x4fv {};
	typedef void(*Fn_glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix4x2fv s_fn_glProgramUniformMatrix4x2fv {};
	typedef void(*Fn_glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix3x4fv s_fn_glProgramUniformMatrix3x4fv {};
	typedef void(*Fn_glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
	inline Fn_glProgramUniformMatrix4x3fv s_fn_glProgramUniformMatrix4x3fv {};
	typedef void(*Fn_glProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix2x3dv s_fn_glProgramUniformMatrix2x3dv {};
	typedef void(*Fn_glProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix3x2dv s_fn_glProgramUniformMatrix3x2dv {};
	typedef void(*Fn_glProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix2x4dv s_fn_glProgramUniformMatrix2x4dv {};
	typedef void(*Fn_glProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix4x2dv s_fn_glProgramUniformMatrix4x2dv {};
	typedef void(*Fn_glProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix3x4dv s_fn_glProgramUniformMatrix3x4dv {};
	typedef void(*Fn_glProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
	inline Fn_glProgramUniformMatrix4x3dv s_fn_glProgramUniformMatrix4x3dv {};
	typedef void(*Fn_glValidateProgramPipeline)(GLuint pipeline);
	inline Fn_glValidateProgramPipeline s_fn_glValidateProgramPipeline {};
	typedef void(*Fn_glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
	inline Fn_glGetProgramPipelineInfoLog s_fn_glGetProgramPipelineInfoLog {};
	typedef void(*Fn_glVertexAttribL1d)(GLuint index, GLdouble x);
	inline Fn_glVertexAttribL1d s_fn_glVertexAttribL1d {};
	typedef void(*Fn_glVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
	inline Fn_glVertexAttribL2d s_fn_glVertexAttribL2d {};
	typedef void(*Fn_glVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	inline Fn_glVertexAttribL3d s_fn_glVertexAttribL3d {};
	typedef void(*Fn_glVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	inline Fn_glVertexAttribL4d s_fn_glVertexAttribL4d {};
	typedef void(*Fn_glVertexAttribL1dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttribL1dv s_fn_glVertexAttribL1dv {};
	typedef void(*Fn_glVertexAttribL2dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttribL2dv s_fn_glVertexAttribL2dv {};
	typedef void(*Fn_glVertexAttribL3dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttribL3dv s_fn_glVertexAttribL3dv {};
	typedef void(*Fn_glVertexAttribL4dv)(GLuint index, const GLdouble * v);
	inline Fn_glVertexAttribL4dv s_fn_glVertexAttribL4dv {};
	typedef void(*Fn_glVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
	inline Fn_glVertexAttribLPointer s_fn_glVertexAttribLPointer {};
	typedef void(*Fn_glGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble * params);
	inline Fn_glGetVertexAttribLdv s_fn_glGetVertexAttribLdv {};
	typedef void(*Fn_glViewportArrayv)(GLuint first, GLsizei count, const GLfloat * v);
	inline Fn_glViewportArrayv s_fn_glViewportArrayv {};
	typedef void(*Fn_glViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	inline Fn_glViewportIndexedf s_fn_glViewportIndexedf {};
	typedef void(*Fn_glViewportIndexedfv)(GLuint index, const GLfloat * v);
	inline Fn_glViewportIndexedfv s_fn_glViewportIndexedfv {};
	typedef void(*Fn_glScissorArrayv)(GLuint first, GLsizei count, const GLint * v);
	inline Fn_glScissorArrayv s_fn_glScissorArrayv {};
	typedef void(*Fn_glScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	inline Fn_glScissorIndexed s_fn_glScissorIndexed {};
	typedef void(*Fn_glScissorIndexedv)(GLuint index, const GLint * v);
	inline Fn_glScissorIndexedv s_fn_glScissorIndexedv {};
	typedef void(*Fn_glDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble * v);
	inline Fn_glDepthRangeArrayv s_fn_glDepthRangeArrayv {};
	typedef void(*Fn_glDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
	inline Fn_glDepthRangeIndexed s_fn_glDepthRangeIndexed {};
	typedef void(*Fn_glGetFloati_v)(GLenum target, GLuint index, GLfloat * data);
	inline Fn_glGetFloati_v s_fn_glGetFloati_v {};
	typedef void(*Fn_glGetDoublei_v)(GLenum target, GLuint index, GLdouble * data);
	inline Fn_glGetDoublei_v s_fn_glGetDoublei_v {};
	typedef void(*Fn_glDrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
	inline Fn_glDrawArraysInstancedBaseInstance s_fn_glDrawArraysInstancedBaseInstance {};
	typedef void(*Fn_glDrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
	inline Fn_glDrawElementsInstancedBaseInstance s_fn_glDrawElementsInstancedBaseInstance {};
	typedef void(*Fn_glDrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
	inline Fn_glDrawElementsInstancedBaseVertexBaseInstance s_fn_glDrawElementsInstancedBaseVertexBaseInstance {};
	typedef void(*Fn_glGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
	inline Fn_glGetInternalformativ s_fn_glGetInternalformativ {};
	typedef void(*Fn_glGetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
	inline Fn_glGetActiveAtomicCounterBufferiv s_fn_glGetActiveAtomicCounterBufferiv {};
	typedef void(*Fn_glBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	inline Fn_glBindImageTexture s_fn_glBindImageTexture {};
	typedef void(*Fn_glMemoryBarrier)(GLbitfield barriers);
	inline Fn_glMemoryBarrier s_fn_glMemoryBarrier {};
	typedef void(*Fn_glTexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	inline Fn_glTexStorage1D s_fn_glTexStorage1D {};
	typedef void(*Fn_glTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	inline Fn_glTexStorage2D s_fn_glTexStorage2D {};
	typedef void(*Fn_glTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	inline Fn_glTexStorage3D s_fn_glTexStorage3D {};
	typedef void(*Fn_glDrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount);
	inline Fn_glDrawTransformFeedbackInstanced s_fn_glDrawTransformFeedbackInstanced {};
	typedef void(*Fn_glDrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
	inline Fn_glDrawTransformFeedbackStreamInstanced s_fn_glDrawTransformFeedbackStreamInstanced {};
	typedef void(*Fn_glClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
	inline Fn_glClearBufferData s_fn_glClearBufferData {};
	typedef void(*Fn_glClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
	inline Fn_glClearBufferSubData s_fn_glClearBufferSubData {};
	typedef void(*Fn_glDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	inline Fn_glDispatchCompute s_fn_glDispatchCompute {};
	typedef void(*Fn_glDispatchComputeIndirect)(GLintptr indirect);
	inline Fn_glDispatchComputeIndirect s_fn_glDispatchComputeIndirect {};
	typedef void(*Fn_glCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	inline Fn_glCopyImageSubData s_fn_glCopyImageSubData {};
	typedef void(*Fn_glFramebufferParameteri)(GLenum target, GLenum pname, GLint param);
	inline Fn_glFramebufferParameteri s_fn_glFramebufferParameteri {};
	typedef void(*Fn_glGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint * params);
	inline Fn_glGetFramebufferParameteriv s_fn_glGetFramebufferParameteriv {};
	typedef void(*Fn_glGetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
	inline Fn_glGetInternalformati64v s_fn_glGetInternalformati64v {};
	typedef void(*Fn_glInvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	inline Fn_glInvalidateTexSubImage s_fn_glInvalidateTexSubImage {};
	typedef void(*Fn_glInvalidateTexImage)(GLuint texture, GLint level);
	inline Fn_glInvalidateTexImage s_fn_glInvalidateTexImage {};
	typedef void(*Fn_glInvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	inline Fn_glInvalidateBufferSubData s_fn_glInvalidateBufferSubData {};
	typedef void(*Fn_glInvalidateBufferData)(GLuint buffer);
	inline Fn_glInvalidateBufferData s_fn_glInvalidateBufferData {};
	typedef void(*Fn_glInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
	inline Fn_glInvalidateFramebuffer s_fn_glInvalidateFramebuffer {};
	typedef void(*Fn_glInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glInvalidateSubFramebuffer s_fn_glInvalidateSubFramebuffer {};
	typedef void(*Fn_glMultiDrawArraysIndirect)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
	inline Fn_glMultiDrawArraysIndirect s_fn_glMultiDrawArraysIndirect {};
	typedef void(*Fn_glMultiDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
	inline Fn_glMultiDrawElementsIndirect s_fn_glMultiDrawElementsIndirect {};
	typedef void(*Fn_glGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
	inline Fn_glGetProgramInterfaceiv s_fn_glGetProgramInterfaceiv {};
	typedef GLuint(*Fn_glGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar * name);
	inline Fn_glGetProgramResourceIndex s_fn_glGetProgramResourceIndex {};
	typedef void(*Fn_glGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
	inline Fn_glGetProgramResourceName s_fn_glGetProgramResourceName {};
	typedef void(*Fn_glGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
	inline Fn_glGetProgramResourceiv s_fn_glGetProgramResourceiv {};
	typedef GLint(*Fn_glGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar * name);
	inline Fn_glGetProgramResourceLocation s_fn_glGetProgramResourceLocation {};
	typedef GLint(*Fn_glGetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar * name);
	inline Fn_glGetProgramResourceLocationIndex s_fn_glGetProgramResourceLocationIndex {};
	typedef void(*Fn_glShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	inline Fn_glShaderStorageBlockBinding s_fn_glShaderStorageBlockBinding {};
	typedef void(*Fn_glTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	inline Fn_glTexBufferRange s_fn_glTexBufferRange {};
	typedef void(*Fn_glTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	inline Fn_glTexStorage2DMultisample s_fn_glTexStorage2DMultisample {};
	typedef void(*Fn_glTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	inline Fn_glTexStorage3DMultisample s_fn_glTexStorage3DMultisample {};
	typedef void(*Fn_glTextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	inline Fn_glTextureView s_fn_glTextureView {};
	typedef void(*Fn_glBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	inline Fn_glBindVertexBuffer s_fn_glBindVertexBuffer {};
	typedef void(*Fn_glVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	inline Fn_glVertexAttribFormat s_fn_glVertexAttribFormat {};
	typedef void(*Fn_glVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	inline Fn_glVertexAttribIFormat s_fn_glVertexAttribIFormat {};
	typedef void(*Fn_glVertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	inline Fn_glVertexAttribLFormat s_fn_glVertexAttribLFormat {};
	typedef void(*Fn_glVertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
	inline Fn_glVertexAttribBinding s_fn_glVertexAttribBinding {};
	typedef void(*Fn_glVertexBindingDivisor)(GLuint bindingindex, GLuint divisor);
	inline Fn_glVertexBindingDivisor s_fn_glVertexBindingDivisor {};
	typedef void(*Fn_glDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
	inline Fn_glDebugMessageControl s_fn_glDebugMessageControl {};
	typedef void(*Fn_glDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
	inline Fn_glDebugMessageInsert s_fn_glDebugMessageInsert {};
	typedef void(*Fn_glDebugMessageCallback)(GLDEBUGPROC callback, const void * userParam);
	inline Fn_glDebugMessageCallback s_fn_glDebugMessageCallback {};
	typedef GLuint(*Fn_glGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
	inline Fn_glGetDebugMessageLog s_fn_glGetDebugMessageLog {};
	typedef void(*Fn_glPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
	inline Fn_glPushDebugGroup s_fn_glPushDebugGroup {};
	typedef void(*Fn_glPopDebugGroup)();
	inline Fn_glPopDebugGroup s_fn_glPopDebugGroup {};
	typedef void(*Fn_glObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
	inline Fn_glObjectLabel s_fn_glObjectLabel {};
	typedef void(*Fn_glGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
	inline Fn_glGetObjectLabel s_fn_glGetObjectLabel {};
	typedef void(*Fn_glObjectPtrLabel)(const void * ptr, GLsizei length, const GLchar * label);
	inline Fn_glObjectPtrLabel s_fn_glObjectPtrLabel {};
	typedef void(*Fn_glGetObjectPtrLabel)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
	inline Fn_glGetObjectPtrLabel s_fn_glGetObjectPtrLabel {};
	typedef void(*Fn_glBufferStorage)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
	inline Fn_glBufferStorage s_fn_glBufferStorage {};
	typedef void(*Fn_glClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
	inline Fn_glClearTexImage s_fn_glClearTexImage {};
	typedef void(*Fn_glClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
	inline Fn_glClearTexSubImage s_fn_glClearTexSubImage {};
	typedef void(*Fn_glBindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
	inline Fn_glBindBuffersBase s_fn_glBindBuffersBase {};
	typedef void(*Fn_glBindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
	inline Fn_glBindBuffersRange s_fn_glBindBuffersRange {};
	typedef void(*Fn_glBindTextures)(GLuint first, GLsizei count, const GLuint * textures);
	inline Fn_glBindTextures s_fn_glBindTextures {};
	typedef void(*Fn_glBindSamplers)(GLuint first, GLsizei count, const GLuint * samplers);
	inline Fn_glBindSamplers s_fn_glBindSamplers {};
	typedef void(*Fn_glBindImageTextures)(GLuint first, GLsizei count, const GLuint * textures);
	inline Fn_glBindImageTextures s_fn_glBindImageTextures {};
	typedef void(*Fn_glBindVertexBuffers)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
	inline Fn_glBindVertexBuffers s_fn_glBindVertexBuffers {};
	typedef void(*Fn_glClipControl)(GLenum origin, GLenum depth);
	inline Fn_glClipControl s_fn_glClipControl {};
	typedef void(*Fn_glCreateTransformFeedbacks)(GLsizei n, GLuint * ids);
	inline Fn_glCreateTransformFeedbacks s_fn_glCreateTransformFeedbacks {};
	typedef void(*Fn_glTransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer);
	inline Fn_glTransformFeedbackBufferBase s_fn_glTransformFeedbackBufferBase {};
	typedef void(*Fn_glTransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	inline Fn_glTransformFeedbackBufferRange s_fn_glTransformFeedbackBufferRange {};
	typedef void(*Fn_glGetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint * param);
	inline Fn_glGetTransformFeedbackiv s_fn_glGetTransformFeedbackiv {};
	typedef void(*Fn_glGetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
	inline Fn_glGetTransformFeedbacki_v s_fn_glGetTransformFeedbacki_v {};
	typedef void(*Fn_glGetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
	inline Fn_glGetTransformFeedbacki64_v s_fn_glGetTransformFeedbacki64_v {};
	typedef void(*Fn_glCreateBuffers)(GLsizei n, GLuint * buffers);
	inline Fn_glCreateBuffers s_fn_glCreateBuffers {};
	typedef void(*Fn_glNamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
	inline Fn_glNamedBufferStorage s_fn_glNamedBufferStorage {};
	typedef void(*Fn_glNamedBufferData)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
	inline Fn_glNamedBufferData s_fn_glNamedBufferData {};
	typedef void(*Fn_glNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
	inline Fn_glNamedBufferSubData s_fn_glNamedBufferSubData {};
	typedef void(*Fn_glCopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	inline Fn_glCopyNamedBufferSubData s_fn_glCopyNamedBufferSubData {};
	typedef void(*Fn_glClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
	inline Fn_glClearNamedBufferData s_fn_glClearNamedBufferData {};
	typedef void(*Fn_glClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
	inline Fn_glClearNamedBufferSubData s_fn_glClearNamedBufferSubData {};
	typedef void *(*Fn_glMapNamedBuffer)(GLuint buffer, GLenum access);
	inline Fn_glMapNamedBuffer s_fn_glMapNamedBuffer {};
	typedef void *(*Fn_glMapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	inline Fn_glMapNamedBufferRange s_fn_glMapNamedBufferRange {};
	typedef GLboolean(*Fn_glUnmapNamedBuffer)(GLuint buffer);
	inline Fn_glUnmapNamedBuffer s_fn_glUnmapNamedBuffer {};
	typedef void(*Fn_glFlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length);
	inline Fn_glFlushMappedNamedBufferRange s_fn_glFlushMappedNamedBufferRange {};
	typedef void(*Fn_glGetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint * params);
	inline Fn_glGetNamedBufferParameteriv s_fn_glGetNamedBufferParameteriv {};
	typedef void(*Fn_glGetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64 * params);
	inline Fn_glGetNamedBufferParameteri64v s_fn_glGetNamedBufferParameteri64v {};
	typedef void(*Fn_glGetNamedBufferPointerv)(GLuint buffer, GLenum pname, void ** params);
	inline Fn_glGetNamedBufferPointerv s_fn_glGetNamedBufferPointerv {};
	typedef void(*Fn_glGetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
	inline Fn_glGetNamedBufferSubData s_fn_glGetNamedBufferSubData {};
	typedef void(*Fn_glCreateFramebuffers)(GLsizei n, GLuint * framebuffers);
	inline Fn_glCreateFramebuffers s_fn_glCreateFramebuffers {};
	typedef void(*Fn_glNamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	inline Fn_glNamedFramebufferRenderbuffer s_fn_glNamedFramebufferRenderbuffer {};
	typedef void(*Fn_glNamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param);
	inline Fn_glNamedFramebufferParameteri s_fn_glNamedFramebufferParameteri {};
	typedef void(*Fn_glNamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	inline Fn_glNamedFramebufferTexture s_fn_glNamedFramebufferTexture {};
	typedef void(*Fn_glNamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	inline Fn_glNamedFramebufferTextureLayer s_fn_glNamedFramebufferTextureLayer {};
	typedef void(*Fn_glNamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf);
	inline Fn_glNamedFramebufferDrawBuffer s_fn_glNamedFramebufferDrawBuffer {};
	typedef void(*Fn_glNamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
	inline Fn_glNamedFramebufferDrawBuffers s_fn_glNamedFramebufferDrawBuffers {};
	typedef void(*Fn_glNamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src);
	inline Fn_glNamedFramebufferReadBuffer s_fn_glNamedFramebufferReadBuffer {};
	typedef void(*Fn_glInvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
	inline Fn_glInvalidateNamedFramebufferData s_fn_glInvalidateNamedFramebufferData {};
	typedef void(*Fn_glInvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glInvalidateNamedFramebufferSubData s_fn_glInvalidateNamedFramebufferSubData {};
	typedef void(*Fn_glClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
	inline Fn_glClearNamedFramebufferiv s_fn_glClearNamedFramebufferiv {};
	typedef void(*Fn_glClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
	inline Fn_glClearNamedFramebufferuiv s_fn_glClearNamedFramebufferuiv {};
	typedef void(*Fn_glClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
	inline Fn_glClearNamedFramebufferfv s_fn_glClearNamedFramebufferfv {};
	typedef void(*Fn_glClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	inline Fn_glClearNamedFramebufferfi s_fn_glClearNamedFramebufferfi {};
	typedef void(*Fn_glBlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	inline Fn_glBlitNamedFramebuffer s_fn_glBlitNamedFramebuffer {};
	typedef GLenum(*Fn_glCheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target);
	inline Fn_glCheckNamedFramebufferStatus s_fn_glCheckNamedFramebufferStatus {};
	typedef void(*Fn_glGetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint * param);
	inline Fn_glGetNamedFramebufferParameteriv s_fn_glGetNamedFramebufferParameteriv {};
	typedef void(*Fn_glGetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
	inline Fn_glGetNamedFramebufferAttachmentParameteriv s_fn_glGetNamedFramebufferAttachmentParameteriv {};
	typedef void(*Fn_glCreateRenderbuffers)(GLsizei n, GLuint * renderbuffers);
	inline Fn_glCreateRenderbuffers s_fn_glCreateRenderbuffers {};
	typedef void(*Fn_glNamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	inline Fn_glNamedRenderbufferStorage s_fn_glNamedRenderbufferStorage {};
	typedef void(*Fn_glNamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	inline Fn_glNamedRenderbufferStorageMultisample s_fn_glNamedRenderbufferStorageMultisample {};
	typedef void(*Fn_glGetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint * params);
	inline Fn_glGetNamedRenderbufferParameteriv s_fn_glGetNamedRenderbufferParameteriv {};
	typedef void(*Fn_glCreateTextures)(GLenum target, GLsizei n, GLuint * textures);
	inline Fn_glCreateTextures s_fn_glCreateTextures {};
	typedef void(*Fn_glTextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer);
	inline Fn_glTextureBuffer s_fn_glTextureBuffer {};
	typedef void(*Fn_glTextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	inline Fn_glTextureBufferRange s_fn_glTextureBufferRange {};
	typedef void(*Fn_glTextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
	inline Fn_glTextureStorage1D s_fn_glTextureStorage1D {};
	typedef void(*Fn_glTextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	inline Fn_glTextureStorage2D s_fn_glTextureStorage2D {};
	typedef void(*Fn_glTextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	inline Fn_glTextureStorage3D s_fn_glTextureStorage3D {};
	typedef void(*Fn_glTextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	inline Fn_glTextureStorage2DMultisample s_fn_glTextureStorage2DMultisample {};
	typedef void(*Fn_glTextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	inline Fn_glTextureStorage3DMultisample s_fn_glTextureStorage3DMultisample {};
	typedef void(*Fn_glTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTextureSubImage1D s_fn_glTextureSubImage1D {};
	typedef void(*Fn_glTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTextureSubImage2D s_fn_glTextureSubImage2D {};
	typedef void(*Fn_glTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
	inline Fn_glTextureSubImage3D s_fn_glTextureSubImage3D {};
	typedef void(*Fn_glCompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTextureSubImage1D s_fn_glCompressedTextureSubImage1D {};
	typedef void(*Fn_glCompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTextureSubImage2D s_fn_glCompressedTextureSubImage2D {};
	typedef void(*Fn_glCompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
	inline Fn_glCompressedTextureSubImage3D s_fn_glCompressedTextureSubImage3D {};
	typedef void(*Fn_glCopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	inline Fn_glCopyTextureSubImage1D s_fn_glCopyTextureSubImage1D {};
	typedef void(*Fn_glCopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glCopyTextureSubImage2D s_fn_glCopyTextureSubImage2D {};
	typedef void(*Fn_glCopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	inline Fn_glCopyTextureSubImage3D s_fn_glCopyTextureSubImage3D {};
	typedef void(*Fn_glTextureParameterf)(GLuint texture, GLenum pname, GLfloat param);
	inline Fn_glTextureParameterf s_fn_glTextureParameterf {};
	typedef void(*Fn_glTextureParameterfv)(GLuint texture, GLenum pname, const GLfloat * param);
	inline Fn_glTextureParameterfv s_fn_glTextureParameterfv {};
	typedef void(*Fn_glTextureParameteri)(GLuint texture, GLenum pname, GLint param);
	inline Fn_glTextureParameteri s_fn_glTextureParameteri {};
	typedef void(*Fn_glTextureParameterIiv)(GLuint texture, GLenum pname, const GLint * params);
	inline Fn_glTextureParameterIiv s_fn_glTextureParameterIiv {};
	typedef void(*Fn_glTextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint * params);
	inline Fn_glTextureParameterIuiv s_fn_glTextureParameterIuiv {};
	typedef void(*Fn_glTextureParameteriv)(GLuint texture, GLenum pname, const GLint * param);
	inline Fn_glTextureParameteriv s_fn_glTextureParameteriv {};
	typedef void(*Fn_glGenerateTextureMipmap)(GLuint texture);
	inline Fn_glGenerateTextureMipmap s_fn_glGenerateTextureMipmap {};
	typedef void(*Fn_glBindTextureUnit)(GLuint unit, GLuint texture);
	inline Fn_glBindTextureUnit s_fn_glBindTextureUnit {};
	typedef void(*Fn_glGetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
	inline Fn_glGetTextureImage s_fn_glGetTextureImage {};
	typedef void(*Fn_glGetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
	inline Fn_glGetCompressedTextureImage s_fn_glGetCompressedTextureImage {};
	typedef void(*Fn_glGetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
	inline Fn_glGetTextureLevelParameterfv s_fn_glGetTextureLevelParameterfv {};
	typedef void(*Fn_glGetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint * params);
	inline Fn_glGetTextureLevelParameteriv s_fn_glGetTextureLevelParameteriv {};
	typedef void(*Fn_glGetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat * params);
	inline Fn_glGetTextureParameterfv s_fn_glGetTextureParameterfv {};
	typedef void(*Fn_glGetTextureParameterIiv)(GLuint texture, GLenum pname, GLint * params);
	inline Fn_glGetTextureParameterIiv s_fn_glGetTextureParameterIiv {};
	typedef void(*Fn_glGetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint * params);
	inline Fn_glGetTextureParameterIuiv s_fn_glGetTextureParameterIuiv {};
	typedef void(*Fn_glGetTextureParameteriv)(GLuint texture, GLenum pname, GLint * params);
	inline Fn_glGetTextureParameteriv s_fn_glGetTextureParameteriv {};
	typedef void(*Fn_glCreateVertexArrays)(GLsizei n, GLuint * arrays);
	inline Fn_glCreateVertexArrays s_fn_glCreateVertexArrays {};
	typedef void(*Fn_glDisableVertexArrayAttrib)(GLuint vaobj, GLuint index);
	inline Fn_glDisableVertexArrayAttrib s_fn_glDisableVertexArrayAttrib {};
	typedef void(*Fn_glEnableVertexArrayAttrib)(GLuint vaobj, GLuint index);
	inline Fn_glEnableVertexArrayAttrib s_fn_glEnableVertexArrayAttrib {};
	typedef void(*Fn_glVertexArrayElementBuffer)(GLuint vaobj, GLuint buffer);
	inline Fn_glVertexArrayElementBuffer s_fn_glVertexArrayElementBuffer {};
	typedef void(*Fn_glVertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	inline Fn_glVertexArrayVertexBuffer s_fn_glVertexArrayVertexBuffer {};
	typedef void(*Fn_glVertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
	inline Fn_glVertexArrayVertexBuffers s_fn_glVertexArrayVertexBuffers {};
	typedef void(*Fn_glVertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	inline Fn_glVertexArrayAttribBinding s_fn_glVertexArrayAttribBinding {};
	typedef void(*Fn_glVertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	inline Fn_glVertexArrayAttribFormat s_fn_glVertexArrayAttribFormat {};
	typedef void(*Fn_glVertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	inline Fn_glVertexArrayAttribIFormat s_fn_glVertexArrayAttribIFormat {};
	typedef void(*Fn_glVertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	inline Fn_glVertexArrayAttribLFormat s_fn_glVertexArrayAttribLFormat {};
	typedef void(*Fn_glVertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	inline Fn_glVertexArrayBindingDivisor s_fn_glVertexArrayBindingDivisor {};
	typedef void(*Fn_glGetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint * param);
	inline Fn_glGetVertexArrayiv s_fn_glGetVertexArrayiv {};
	typedef void(*Fn_glGetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
	inline Fn_glGetVertexArrayIndexediv s_fn_glGetVertexArrayIndexediv {};
	typedef void(*Fn_glGetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
	inline Fn_glGetVertexArrayIndexed64iv s_fn_glGetVertexArrayIndexed64iv {};
	typedef void(*Fn_glCreateSamplers)(GLsizei n, GLuint * samplers);
	inline Fn_glCreateSamplers s_fn_glCreateSamplers {};
	typedef void(*Fn_glCreateProgramPipelines)(GLsizei n, GLuint * pipelines);
	inline Fn_glCreateProgramPipelines s_fn_glCreateProgramPipelines {};
	typedef void(*Fn_glCreateQueries)(GLenum target, GLsizei n, GLuint * ids);
	inline Fn_glCreateQueries s_fn_glCreateQueries {};
	typedef void(*Fn_glGetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	inline Fn_glGetQueryBufferObjecti64v s_fn_glGetQueryBufferObjecti64v {};
	typedef void(*Fn_glGetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	inline Fn_glGetQueryBufferObjectiv s_fn_glGetQueryBufferObjectiv {};
	typedef void(*Fn_glGetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	inline Fn_glGetQueryBufferObjectui64v s_fn_glGetQueryBufferObjectui64v {};
	typedef void(*Fn_glGetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	inline Fn_glGetQueryBufferObjectuiv s_fn_glGetQueryBufferObjectuiv {};
	typedef void(*Fn_glMemoryBarrierByRegion)(GLbitfield barriers);
	inline Fn_glMemoryBarrierByRegion s_fn_glMemoryBarrierByRegion {};
	typedef void(*Fn_glGetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
	inline Fn_glGetTextureSubImage s_fn_glGetTextureSubImage {};
	typedef void(*Fn_glGetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
	inline Fn_glGetCompressedTextureSubImage s_fn_glGetCompressedTextureSubImage {};
	typedef GLenum(*Fn_glGetGraphicsResetStatus)();
	inline Fn_glGetGraphicsResetStatus s_fn_glGetGraphicsResetStatus {};
	typedef void(*Fn_glGetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
	inline Fn_glGetnCompressedTexImage s_fn_glGetnCompressedTexImage {};
	typedef void(*Fn_glGetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
	inline Fn_glGetnTexImage s_fn_glGetnTexImage {};
	typedef void(*Fn_glGetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
	inline Fn_glGetnUniformdv s_fn_glGetnUniformdv {};
	typedef void(*Fn_glGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
	inline Fn_glGetnUniformfv s_fn_glGetnUniformfv {};
	typedef void(*Fn_glGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
	inline Fn_glGetnUniformiv s_fn_glGetnUniformiv {};
	typedef void(*Fn_glGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
	inline Fn_glGetnUniformuiv s_fn_glGetnUniformuiv {};
	typedef void(*Fn_glReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
	inline Fn_glReadnPixels s_fn_glReadnPixels {};
	typedef void(*Fn_glGetnMapdv)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
	inline Fn_glGetnMapdv s_fn_glGetnMapdv {};
	typedef void(*Fn_glGetnMapfv)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
	inline Fn_glGetnMapfv s_fn_glGetnMapfv {};
	typedef void(*Fn_glGetnMapiv)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
	inline Fn_glGetnMapiv s_fn_glGetnMapiv {};
	typedef void(*Fn_glGetnPixelMapfv)(GLenum map, GLsizei bufSize, GLfloat * values);
	inline Fn_glGetnPixelMapfv s_fn_glGetnPixelMapfv {};
	typedef void(*Fn_glGetnPixelMapuiv)(GLenum map, GLsizei bufSize, GLuint * values);
	inline Fn_glGetnPixelMapuiv s_fn_glGetnPixelMapuiv {};
	typedef void(*Fn_glGetnPixelMapusv)(GLenum map, GLsizei bufSize, GLushort * values);
	inline Fn_glGetnPixelMapusv s_fn_glGetnPixelMapusv {};
	typedef void(*Fn_glGetnPolygonStipple)(GLsizei bufSize, GLubyte * pattern);
	inline Fn_glGetnPolygonStipple s_fn_glGetnPolygonStipple {};
	typedef void(*Fn_glGetnColorTable)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
	inline Fn_glGetnColorTable s_fn_glGetnColorTable {};
	typedef void(*Fn_glGetnConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
	inline Fn_glGetnConvolutionFilter s_fn_glGetnConvolutionFilter {};
	typedef void(*Fn_glGetnSeparableFilter)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
	inline Fn_glGetnSeparableFilter s_fn_glGetnSeparableFilter {};
	typedef void(*Fn_glGetnHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
	inline Fn_glGetnHistogram s_fn_glGetnHistogram {};
	typedef void(*Fn_glGetnMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
	inline Fn_glGetnMinmax s_fn_glGetnMinmax {};
	typedef void(*Fn_glTextureBarrier)();
	inline Fn_glTextureBarrier s_fn_glTextureBarrier {};
	typedef void(*Fn_glSpecializeShader)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
	inline Fn_glSpecializeShader s_fn_glSpecializeShader {};
	typedef void(*Fn_glMultiDrawArraysIndirectCount)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
	inline Fn_glMultiDrawArraysIndirectCount s_fn_glMultiDrawArraysIndirectCount {};
	typedef void(*Fn_glMultiDrawElementsIndirectCount)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
	inline Fn_glMultiDrawElementsIndirectCount s_fn_glMultiDrawElementsIndirectCount {};
	typedef void(*Fn_glPolygonOffsetClamp)(GLfloat factor, GLfloat units, GLfloat clamp);
	inline Fn_glPolygonOffsetClamp s_fn_glPolygonOffsetClamp {};

	inline void GLLoadFunctionPointers(Version initVersion, Fn_GetProcAddress proc) {
		if (initVersion >= Version {1, 0}) {
			s_fn_glCullFace = (Fn_glCullFace)proc("glCullFace");
			s_fn_glFrontFace = (Fn_glFrontFace)proc("glFrontFace");
			s_fn_glHint = (Fn_glHint)proc("glHint");
			s_fn_glLineWidth = (Fn_glLineWidth)proc("glLineWidth");
			s_fn_glPointSize = (Fn_glPointSize)proc("glPointSize");
			s_fn_glPolygonMode = (Fn_glPolygonMode)proc("glPolygonMode");
			s_fn_glScissor = (Fn_glScissor)proc("glScissor");
			s_fn_glTexParameterf = (Fn_glTexParameterf)proc("glTexParameterf");
			s_fn_glTexParameterfv = (Fn_glTexParameterfv)proc("glTexParameterfv");
			s_fn_glTexParameteri = (Fn_glTexParameteri)proc("glTexParameteri");
			s_fn_glTexParameteriv = (Fn_glTexParameteriv)proc("glTexParameteriv");
			s_fn_glTexImage1D = (Fn_glTexImage1D)proc("glTexImage1D");
			s_fn_glTexImage2D = (Fn_glTexImage2D)proc("glTexImage2D");
			s_fn_glDrawBuffer = (Fn_glDrawBuffer)proc("glDrawBuffer");
			s_fn_glClear = (Fn_glClear)proc("glClear");
			s_fn_glClearColor = (Fn_glClearColor)proc("glClearColor");
			s_fn_glClearStencil = (Fn_glClearStencil)proc("glClearStencil");
			s_fn_glClearDepth = (Fn_glClearDepth)proc("glClearDepth");
			s_fn_glStencilMask = (Fn_glStencilMask)proc("glStencilMask");
			s_fn_glColorMask = (Fn_glColorMask)proc("glColorMask");
			s_fn_glDepthMask = (Fn_glDepthMask)proc("glDepthMask");
			s_fn_glDisable = (Fn_glDisable)proc("glDisable");
			s_fn_glEnable = (Fn_glEnable)proc("glEnable");
			s_fn_glFinish = (Fn_glFinish)proc("glFinish");
			s_fn_glFlush = (Fn_glFlush)proc("glFlush");
			s_fn_glBlendFunc = (Fn_glBlendFunc)proc("glBlendFunc");
			s_fn_glLogicOp = (Fn_glLogicOp)proc("glLogicOp");
			s_fn_glStencilFunc = (Fn_glStencilFunc)proc("glStencilFunc");
			s_fn_glStencilOp = (Fn_glStencilOp)proc("glStencilOp");
			s_fn_glDepthFunc = (Fn_glDepthFunc)proc("glDepthFunc");
			s_fn_glPixelStoref = (Fn_glPixelStoref)proc("glPixelStoref");
			s_fn_glPixelStorei = (Fn_glPixelStorei)proc("glPixelStorei");
			s_fn_glReadBuffer = (Fn_glReadBuffer)proc("glReadBuffer");
			s_fn_glReadPixels = (Fn_glReadPixels)proc("glReadPixels");
			s_fn_glGetBooleanv = (Fn_glGetBooleanv)proc("glGetBooleanv");
			s_fn_glGetDoublev = (Fn_glGetDoublev)proc("glGetDoublev");
			s_fn_glGetError = (Fn_glGetError)proc("glGetError");
			s_fn_glGetFloatv = (Fn_glGetFloatv)proc("glGetFloatv");
			s_fn_glGetIntegerv = (Fn_glGetIntegerv)proc("glGetIntegerv");
			s_fn_glGetString = (Fn_glGetString)proc("glGetString");
			s_fn_glGetTexImage = (Fn_glGetTexImage)proc("glGetTexImage");
			s_fn_glGetTexParameterfv = (Fn_glGetTexParameterfv)proc("glGetTexParameterfv");
			s_fn_glGetTexParameteriv = (Fn_glGetTexParameteriv)proc("glGetTexParameteriv");
			s_fn_glGetTexLevelParameterfv = (Fn_glGetTexLevelParameterfv)proc("glGetTexLevelParameterfv");
			s_fn_glGetTexLevelParameteriv = (Fn_glGetTexLevelParameteriv)proc("glGetTexLevelParameteriv");
			s_fn_glIsEnabled = (Fn_glIsEnabled)proc("glIsEnabled");
			s_fn_glDepthRange = (Fn_glDepthRange)proc("glDepthRange");
			s_fn_glViewport = (Fn_glViewport)proc("glViewport");
			s_fn_glNewList = (Fn_glNewList)proc("glNewList");
			s_fn_glEndList = (Fn_glEndList)proc("glEndList");
			s_fn_glCallList = (Fn_glCallList)proc("glCallList");
			s_fn_glCallLists = (Fn_glCallLists)proc("glCallLists");
			s_fn_glDeleteLists = (Fn_glDeleteLists)proc("glDeleteLists");
			s_fn_glGenLists = (Fn_glGenLists)proc("glGenLists");
			s_fn_glListBase = (Fn_glListBase)proc("glListBase");
			s_fn_glBegin = (Fn_glBegin)proc("glBegin");
			s_fn_glBitmap = (Fn_glBitmap)proc("glBitmap");
			s_fn_glColor3b = (Fn_glColor3b)proc("glColor3b");
			s_fn_glColor3bv = (Fn_glColor3bv)proc("glColor3bv");
			s_fn_glColor3d = (Fn_glColor3d)proc("glColor3d");
			s_fn_glColor3dv = (Fn_glColor3dv)proc("glColor3dv");
			s_fn_glColor3f = (Fn_glColor3f)proc("glColor3f");
			s_fn_glColor3fv = (Fn_glColor3fv)proc("glColor3fv");
			s_fn_glColor3i = (Fn_glColor3i)proc("glColor3i");
			s_fn_glColor3iv = (Fn_glColor3iv)proc("glColor3iv");
			s_fn_glColor3s = (Fn_glColor3s)proc("glColor3s");
			s_fn_glColor3sv = (Fn_glColor3sv)proc("glColor3sv");
			s_fn_glColor3ub = (Fn_glColor3ub)proc("glColor3ub");
			s_fn_glColor3ubv = (Fn_glColor3ubv)proc("glColor3ubv");
			s_fn_glColor3ui = (Fn_glColor3ui)proc("glColor3ui");
			s_fn_glColor3uiv = (Fn_glColor3uiv)proc("glColor3uiv");
			s_fn_glColor3us = (Fn_glColor3us)proc("glColor3us");
			s_fn_glColor3usv = (Fn_glColor3usv)proc("glColor3usv");
			s_fn_glColor4b = (Fn_glColor4b)proc("glColor4b");
			s_fn_glColor4bv = (Fn_glColor4bv)proc("glColor4bv");
			s_fn_glColor4d = (Fn_glColor4d)proc("glColor4d");
			s_fn_glColor4dv = (Fn_glColor4dv)proc("glColor4dv");
			s_fn_glColor4f = (Fn_glColor4f)proc("glColor4f");
			s_fn_glColor4fv = (Fn_glColor4fv)proc("glColor4fv");
			s_fn_glColor4i = (Fn_glColor4i)proc("glColor4i");
			s_fn_glColor4iv = (Fn_glColor4iv)proc("glColor4iv");
			s_fn_glColor4s = (Fn_glColor4s)proc("glColor4s");
			s_fn_glColor4sv = (Fn_glColor4sv)proc("glColor4sv");
			s_fn_glColor4ub = (Fn_glColor4ub)proc("glColor4ub");
			s_fn_glColor4ubv = (Fn_glColor4ubv)proc("glColor4ubv");
			s_fn_glColor4ui = (Fn_glColor4ui)proc("glColor4ui");
			s_fn_glColor4uiv = (Fn_glColor4uiv)proc("glColor4uiv");
			s_fn_glColor4us = (Fn_glColor4us)proc("glColor4us");
			s_fn_glColor4usv = (Fn_glColor4usv)proc("glColor4usv");
			s_fn_glEdgeFlag = (Fn_glEdgeFlag)proc("glEdgeFlag");
			s_fn_glEdgeFlagv = (Fn_glEdgeFlagv)proc("glEdgeFlagv");
			s_fn_glEnd = (Fn_glEnd)proc("glEnd");
			s_fn_glIndexd = (Fn_glIndexd)proc("glIndexd");
			s_fn_glIndexdv = (Fn_glIndexdv)proc("glIndexdv");
			s_fn_glIndexf = (Fn_glIndexf)proc("glIndexf");
			s_fn_glIndexfv = (Fn_glIndexfv)proc("glIndexfv");
			s_fn_glIndexi = (Fn_glIndexi)proc("glIndexi");
			s_fn_glIndexiv = (Fn_glIndexiv)proc("glIndexiv");
			s_fn_glIndexs = (Fn_glIndexs)proc("glIndexs");
			s_fn_glIndexsv = (Fn_glIndexsv)proc("glIndexsv");
			s_fn_glNormal3b = (Fn_glNormal3b)proc("glNormal3b");
			s_fn_glNormal3bv = (Fn_glNormal3bv)proc("glNormal3bv");
			s_fn_glNormal3d = (Fn_glNormal3d)proc("glNormal3d");
			s_fn_glNormal3dv = (Fn_glNormal3dv)proc("glNormal3dv");
			s_fn_glNormal3f = (Fn_glNormal3f)proc("glNormal3f");
			s_fn_glNormal3fv = (Fn_glNormal3fv)proc("glNormal3fv");
			s_fn_glNormal3i = (Fn_glNormal3i)proc("glNormal3i");
			s_fn_glNormal3iv = (Fn_glNormal3iv)proc("glNormal3iv");
			s_fn_glNormal3s = (Fn_glNormal3s)proc("glNormal3s");
			s_fn_glNormal3sv = (Fn_glNormal3sv)proc("glNormal3sv");
			s_fn_glRasterPos2d = (Fn_glRasterPos2d)proc("glRasterPos2d");
			s_fn_glRasterPos2dv = (Fn_glRasterPos2dv)proc("glRasterPos2dv");
			s_fn_glRasterPos2f = (Fn_glRasterPos2f)proc("glRasterPos2f");
			s_fn_glRasterPos2fv = (Fn_glRasterPos2fv)proc("glRasterPos2fv");
			s_fn_glRasterPos2i = (Fn_glRasterPos2i)proc("glRasterPos2i");
			s_fn_glRasterPos2iv = (Fn_glRasterPos2iv)proc("glRasterPos2iv");
			s_fn_glRasterPos2s = (Fn_glRasterPos2s)proc("glRasterPos2s");
			s_fn_glRasterPos2sv = (Fn_glRasterPos2sv)proc("glRasterPos2sv");
			s_fn_glRasterPos3d = (Fn_glRasterPos3d)proc("glRasterPos3d");
			s_fn_glRasterPos3dv = (Fn_glRasterPos3dv)proc("glRasterPos3dv");
			s_fn_glRasterPos3f = (Fn_glRasterPos3f)proc("glRasterPos3f");
			s_fn_glRasterPos3fv = (Fn_glRasterPos3fv)proc("glRasterPos3fv");
			s_fn_glRasterPos3i = (Fn_glRasterPos3i)proc("glRasterPos3i");
			s_fn_glRasterPos3iv = (Fn_glRasterPos3iv)proc("glRasterPos3iv");
			s_fn_glRasterPos3s = (Fn_glRasterPos3s)proc("glRasterPos3s");
			s_fn_glRasterPos3sv = (Fn_glRasterPos3sv)proc("glRasterPos3sv");
			s_fn_glRasterPos4d = (Fn_glRasterPos4d)proc("glRasterPos4d");
			s_fn_glRasterPos4dv = (Fn_glRasterPos4dv)proc("glRasterPos4dv");
			s_fn_glRasterPos4f = (Fn_glRasterPos4f)proc("glRasterPos4f");
			s_fn_glRasterPos4fv = (Fn_glRasterPos4fv)proc("glRasterPos4fv");
			s_fn_glRasterPos4i = (Fn_glRasterPos4i)proc("glRasterPos4i");
			s_fn_glRasterPos4iv = (Fn_glRasterPos4iv)proc("glRasterPos4iv");
			s_fn_glRasterPos4s = (Fn_glRasterPos4s)proc("glRasterPos4s");
			s_fn_glRasterPos4sv = (Fn_glRasterPos4sv)proc("glRasterPos4sv");
			s_fn_glRectd = (Fn_glRectd)proc("glRectd");
			s_fn_glRectdv = (Fn_glRectdv)proc("glRectdv");
			s_fn_glRectf = (Fn_glRectf)proc("glRectf");
			s_fn_glRectfv = (Fn_glRectfv)proc("glRectfv");
			s_fn_glRecti = (Fn_glRecti)proc("glRecti");
			s_fn_glRectiv = (Fn_glRectiv)proc("glRectiv");
			s_fn_glRects = (Fn_glRects)proc("glRects");
			s_fn_glRectsv = (Fn_glRectsv)proc("glRectsv");
			s_fn_glTexCoord1d = (Fn_glTexCoord1d)proc("glTexCoord1d");
			s_fn_glTexCoord1dv = (Fn_glTexCoord1dv)proc("glTexCoord1dv");
			s_fn_glTexCoord1f = (Fn_glTexCoord1f)proc("glTexCoord1f");
			s_fn_glTexCoord1fv = (Fn_glTexCoord1fv)proc("glTexCoord1fv");
			s_fn_glTexCoord1i = (Fn_glTexCoord1i)proc("glTexCoord1i");
			s_fn_glTexCoord1iv = (Fn_glTexCoord1iv)proc("glTexCoord1iv");
			s_fn_glTexCoord1s = (Fn_glTexCoord1s)proc("glTexCoord1s");
			s_fn_glTexCoord1sv = (Fn_glTexCoord1sv)proc("glTexCoord1sv");
			s_fn_glTexCoord2d = (Fn_glTexCoord2d)proc("glTexCoord2d");
			s_fn_glTexCoord2dv = (Fn_glTexCoord2dv)proc("glTexCoord2dv");
			s_fn_glTexCoord2f = (Fn_glTexCoord2f)proc("glTexCoord2f");
			s_fn_glTexCoord2fv = (Fn_glTexCoord2fv)proc("glTexCoord2fv");
			s_fn_glTexCoord2i = (Fn_glTexCoord2i)proc("glTexCoord2i");
			s_fn_glTexCoord2iv = (Fn_glTexCoord2iv)proc("glTexCoord2iv");
			s_fn_glTexCoord2s = (Fn_glTexCoord2s)proc("glTexCoord2s");
			s_fn_glTexCoord2sv = (Fn_glTexCoord2sv)proc("glTexCoord2sv");
			s_fn_glTexCoord3d = (Fn_glTexCoord3d)proc("glTexCoord3d");
			s_fn_glTexCoord3dv = (Fn_glTexCoord3dv)proc("glTexCoord3dv");
			s_fn_glTexCoord3f = (Fn_glTexCoord3f)proc("glTexCoord3f");
			s_fn_glTexCoord3fv = (Fn_glTexCoord3fv)proc("glTexCoord3fv");
			s_fn_glTexCoord3i = (Fn_glTexCoord3i)proc("glTexCoord3i");
			s_fn_glTexCoord3iv = (Fn_glTexCoord3iv)proc("glTexCoord3iv");
			s_fn_glTexCoord3s = (Fn_glTexCoord3s)proc("glTexCoord3s");
			s_fn_glTexCoord3sv = (Fn_glTexCoord3sv)proc("glTexCoord3sv");
			s_fn_glTexCoord4d = (Fn_glTexCoord4d)proc("glTexCoord4d");
			s_fn_glTexCoord4dv = (Fn_glTexCoord4dv)proc("glTexCoord4dv");
			s_fn_glTexCoord4f = (Fn_glTexCoord4f)proc("glTexCoord4f");
			s_fn_glTexCoord4fv = (Fn_glTexCoord4fv)proc("glTexCoord4fv");
			s_fn_glTexCoord4i = (Fn_glTexCoord4i)proc("glTexCoord4i");
			s_fn_glTexCoord4iv = (Fn_glTexCoord4iv)proc("glTexCoord4iv");
			s_fn_glTexCoord4s = (Fn_glTexCoord4s)proc("glTexCoord4s");
			s_fn_glTexCoord4sv = (Fn_glTexCoord4sv)proc("glTexCoord4sv");
			s_fn_glVertex2d = (Fn_glVertex2d)proc("glVertex2d");
			s_fn_glVertex2dv = (Fn_glVertex2dv)proc("glVertex2dv");
			s_fn_glVertex2f = (Fn_glVertex2f)proc("glVertex2f");
			s_fn_glVertex2fv = (Fn_glVertex2fv)proc("glVertex2fv");
			s_fn_glVertex2i = (Fn_glVertex2i)proc("glVertex2i");
			s_fn_glVertex2iv = (Fn_glVertex2iv)proc("glVertex2iv");
			s_fn_glVertex2s = (Fn_glVertex2s)proc("glVertex2s");
			s_fn_glVertex2sv = (Fn_glVertex2sv)proc("glVertex2sv");
			s_fn_glVertex3d = (Fn_glVertex3d)proc("glVertex3d");
			s_fn_glVertex3dv = (Fn_glVertex3dv)proc("glVertex3dv");
			s_fn_glVertex3f = (Fn_glVertex3f)proc("glVertex3f");
			s_fn_glVertex3fv = (Fn_glVertex3fv)proc("glVertex3fv");
			s_fn_glVertex3i = (Fn_glVertex3i)proc("glVertex3i");
			s_fn_glVertex3iv = (Fn_glVertex3iv)proc("glVertex3iv");
			s_fn_glVertex3s = (Fn_glVertex3s)proc("glVertex3s");
			s_fn_glVertex3sv = (Fn_glVertex3sv)proc("glVertex3sv");
			s_fn_glVertex4d = (Fn_glVertex4d)proc("glVertex4d");
			s_fn_glVertex4dv = (Fn_glVertex4dv)proc("glVertex4dv");
			s_fn_glVertex4f = (Fn_glVertex4f)proc("glVertex4f");
			s_fn_glVertex4fv = (Fn_glVertex4fv)proc("glVertex4fv");
			s_fn_glVertex4i = (Fn_glVertex4i)proc("glVertex4i");
			s_fn_glVertex4iv = (Fn_glVertex4iv)proc("glVertex4iv");
			s_fn_glVertex4s = (Fn_glVertex4s)proc("glVertex4s");
			s_fn_glVertex4sv = (Fn_glVertex4sv)proc("glVertex4sv");
			s_fn_glClipPlane = (Fn_glClipPlane)proc("glClipPlane");
			s_fn_glColorMaterial = (Fn_glColorMaterial)proc("glColorMaterial");
			s_fn_glFogf = (Fn_glFogf)proc("glFogf");
			s_fn_glFogfv = (Fn_glFogfv)proc("glFogfv");
			s_fn_glFogi = (Fn_glFogi)proc("glFogi");
			s_fn_glFogiv = (Fn_glFogiv)proc("glFogiv");
			s_fn_glLightf = (Fn_glLightf)proc("glLightf");
			s_fn_glLightfv = (Fn_glLightfv)proc("glLightfv");
			s_fn_glLighti = (Fn_glLighti)proc("glLighti");
			s_fn_glLightiv = (Fn_glLightiv)proc("glLightiv");
			s_fn_glLightModelf = (Fn_glLightModelf)proc("glLightModelf");
			s_fn_glLightModelfv = (Fn_glLightModelfv)proc("glLightModelfv");
			s_fn_glLightModeli = (Fn_glLightModeli)proc("glLightModeli");
			s_fn_glLightModeliv = (Fn_glLightModeliv)proc("glLightModeliv");
			s_fn_glLineStipple = (Fn_glLineStipple)proc("glLineStipple");
			s_fn_glMaterialf = (Fn_glMaterialf)proc("glMaterialf");
			s_fn_glMaterialfv = (Fn_glMaterialfv)proc("glMaterialfv");
			s_fn_glMateriali = (Fn_glMateriali)proc("glMateriali");
			s_fn_glMaterialiv = (Fn_glMaterialiv)proc("glMaterialiv");
			s_fn_glPolygonStipple = (Fn_glPolygonStipple)proc("glPolygonStipple");
			s_fn_glShadeModel = (Fn_glShadeModel)proc("glShadeModel");
			s_fn_glTexEnvf = (Fn_glTexEnvf)proc("glTexEnvf");
			s_fn_glTexEnvfv = (Fn_glTexEnvfv)proc("glTexEnvfv");
			s_fn_glTexEnvi = (Fn_glTexEnvi)proc("glTexEnvi");
			s_fn_glTexEnviv = (Fn_glTexEnviv)proc("glTexEnviv");
			s_fn_glTexGend = (Fn_glTexGend)proc("glTexGend");
			s_fn_glTexGendv = (Fn_glTexGendv)proc("glTexGendv");
			s_fn_glTexGenf = (Fn_glTexGenf)proc("glTexGenf");
			s_fn_glTexGenfv = (Fn_glTexGenfv)proc("glTexGenfv");
			s_fn_glTexGeni = (Fn_glTexGeni)proc("glTexGeni");
			s_fn_glTexGeniv = (Fn_glTexGeniv)proc("glTexGeniv");
			s_fn_glFeedbackBuffer = (Fn_glFeedbackBuffer)proc("glFeedbackBuffer");
			s_fn_glSelectBuffer = (Fn_glSelectBuffer)proc("glSelectBuffer");
			s_fn_glRenderMode = (Fn_glRenderMode)proc("glRenderMode");
			s_fn_glInitNames = (Fn_glInitNames)proc("glInitNames");
			s_fn_glLoadName = (Fn_glLoadName)proc("glLoadName");
			s_fn_glPassThrough = (Fn_glPassThrough)proc("glPassThrough");
			s_fn_glPopName = (Fn_glPopName)proc("glPopName");
			s_fn_glPushName = (Fn_glPushName)proc("glPushName");
			s_fn_glClearAccum = (Fn_glClearAccum)proc("glClearAccum");
			s_fn_glClearIndex = (Fn_glClearIndex)proc("glClearIndex");
			s_fn_glIndexMask = (Fn_glIndexMask)proc("glIndexMask");
			s_fn_glAccum = (Fn_glAccum)proc("glAccum");
			s_fn_glPopAttrib = (Fn_glPopAttrib)proc("glPopAttrib");
			s_fn_glPushAttrib = (Fn_glPushAttrib)proc("glPushAttrib");
			s_fn_glMap1d = (Fn_glMap1d)proc("glMap1d");
			s_fn_glMap1f = (Fn_glMap1f)proc("glMap1f");
			s_fn_glMap2d = (Fn_glMap2d)proc("glMap2d");
			s_fn_glMap2f = (Fn_glMap2f)proc("glMap2f");
			s_fn_glMapGrid1d = (Fn_glMapGrid1d)proc("glMapGrid1d");
			s_fn_glMapGrid1f = (Fn_glMapGrid1f)proc("glMapGrid1f");
			s_fn_glMapGrid2d = (Fn_glMapGrid2d)proc("glMapGrid2d");
			s_fn_glMapGrid2f = (Fn_glMapGrid2f)proc("glMapGrid2f");
			s_fn_glEvalCoord1d = (Fn_glEvalCoord1d)proc("glEvalCoord1d");
			s_fn_glEvalCoord1dv = (Fn_glEvalCoord1dv)proc("glEvalCoord1dv");
			s_fn_glEvalCoord1f = (Fn_glEvalCoord1f)proc("glEvalCoord1f");
			s_fn_glEvalCoord1fv = (Fn_glEvalCoord1fv)proc("glEvalCoord1fv");
			s_fn_glEvalCoord2d = (Fn_glEvalCoord2d)proc("glEvalCoord2d");
			s_fn_glEvalCoord2dv = (Fn_glEvalCoord2dv)proc("glEvalCoord2dv");
			s_fn_glEvalCoord2f = (Fn_glEvalCoord2f)proc("glEvalCoord2f");
			s_fn_glEvalCoord2fv = (Fn_glEvalCoord2fv)proc("glEvalCoord2fv");
			s_fn_glEvalMesh1 = (Fn_glEvalMesh1)proc("glEvalMesh1");
			s_fn_glEvalPoint1 = (Fn_glEvalPoint1)proc("glEvalPoint1");
			s_fn_glEvalMesh2 = (Fn_glEvalMesh2)proc("glEvalMesh2");
			s_fn_glEvalPoint2 = (Fn_glEvalPoint2)proc("glEvalPoint2");
			s_fn_glAlphaFunc = (Fn_glAlphaFunc)proc("glAlphaFunc");
			s_fn_glPixelZoom = (Fn_glPixelZoom)proc("glPixelZoom");
			s_fn_glPixelTransferf = (Fn_glPixelTransferf)proc("glPixelTransferf");
			s_fn_glPixelTransferi = (Fn_glPixelTransferi)proc("glPixelTransferi");
			s_fn_glPixelMapfv = (Fn_glPixelMapfv)proc("glPixelMapfv");
			s_fn_glPixelMapuiv = (Fn_glPixelMapuiv)proc("glPixelMapuiv");
			s_fn_glPixelMapusv = (Fn_glPixelMapusv)proc("glPixelMapusv");
			s_fn_glCopyPixels = (Fn_glCopyPixels)proc("glCopyPixels");
			s_fn_glDrawPixels = (Fn_glDrawPixels)proc("glDrawPixels");
			s_fn_glGetClipPlane = (Fn_glGetClipPlane)proc("glGetClipPlane");
			s_fn_glGetLightfv = (Fn_glGetLightfv)proc("glGetLightfv");
			s_fn_glGetLightiv = (Fn_glGetLightiv)proc("glGetLightiv");
			s_fn_glGetMapdv = (Fn_glGetMapdv)proc("glGetMapdv");
			s_fn_glGetMapfv = (Fn_glGetMapfv)proc("glGetMapfv");
			s_fn_glGetMapiv = (Fn_glGetMapiv)proc("glGetMapiv");
			s_fn_glGetMaterialfv = (Fn_glGetMaterialfv)proc("glGetMaterialfv");
			s_fn_glGetMaterialiv = (Fn_glGetMaterialiv)proc("glGetMaterialiv");
			s_fn_glGetPixelMapfv = (Fn_glGetPixelMapfv)proc("glGetPixelMapfv");
			s_fn_glGetPixelMapuiv = (Fn_glGetPixelMapuiv)proc("glGetPixelMapuiv");
			s_fn_glGetPixelMapusv = (Fn_glGetPixelMapusv)proc("glGetPixelMapusv");
			s_fn_glGetPolygonStipple = (Fn_glGetPolygonStipple)proc("glGetPolygonStipple");
			s_fn_glGetTexEnvfv = (Fn_glGetTexEnvfv)proc("glGetTexEnvfv");
			s_fn_glGetTexEnviv = (Fn_glGetTexEnviv)proc("glGetTexEnviv");
			s_fn_glGetTexGendv = (Fn_glGetTexGendv)proc("glGetTexGendv");
			s_fn_glGetTexGenfv = (Fn_glGetTexGenfv)proc("glGetTexGenfv");
			s_fn_glGetTexGeniv = (Fn_glGetTexGeniv)proc("glGetTexGeniv");
			s_fn_glIsList = (Fn_glIsList)proc("glIsList");
			s_fn_glFrustum = (Fn_glFrustum)proc("glFrustum");
			s_fn_glLoadIdentity = (Fn_glLoadIdentity)proc("glLoadIdentity");
			s_fn_glLoadMatrixf = (Fn_glLoadMatrixf)proc("glLoadMatrixf");
			s_fn_glLoadMatrixd = (Fn_glLoadMatrixd)proc("glLoadMatrixd");
			s_fn_glMatrixMode = (Fn_glMatrixMode)proc("glMatrixMode");
			s_fn_glMultMatrixf = (Fn_glMultMatrixf)proc("glMultMatrixf");
			s_fn_glMultMatrixd = (Fn_glMultMatrixd)proc("glMultMatrixd");
			s_fn_glOrtho = (Fn_glOrtho)proc("glOrtho");
			s_fn_glPopMatrix = (Fn_glPopMatrix)proc("glPopMatrix");
			s_fn_glPushMatrix = (Fn_glPushMatrix)proc("glPushMatrix");
			s_fn_glRotated = (Fn_glRotated)proc("glRotated");
			s_fn_glRotatef = (Fn_glRotatef)proc("glRotatef");
			s_fn_glScaled = (Fn_glScaled)proc("glScaled");
			s_fn_glScalef = (Fn_glScalef)proc("glScalef");
			s_fn_glTranslated = (Fn_glTranslated)proc("glTranslated");
			s_fn_glTranslatef = (Fn_glTranslatef)proc("glTranslatef");
		}
		else return;

		if (initVersion >= Version {1, 1}) {
			s_fn_glDrawArrays = (Fn_glDrawArrays)proc("glDrawArrays");
			s_fn_glDrawElements = (Fn_glDrawElements)proc("glDrawElements");
			s_fn_glGetPointerv = (Fn_glGetPointerv)proc("glGetPointerv");
			s_fn_glPolygonOffset = (Fn_glPolygonOffset)proc("glPolygonOffset");
			s_fn_glCopyTexImage1D = (Fn_glCopyTexImage1D)proc("glCopyTexImage1D");
			s_fn_glCopyTexImage2D = (Fn_glCopyTexImage2D)proc("glCopyTexImage2D");
			s_fn_glCopyTexSubImage1D = (Fn_glCopyTexSubImage1D)proc("glCopyTexSubImage1D");
			s_fn_glCopyTexSubImage2D = (Fn_glCopyTexSubImage2D)proc("glCopyTexSubImage2D");
			s_fn_glTexSubImage1D = (Fn_glTexSubImage1D)proc("glTexSubImage1D");
			s_fn_glTexSubImage2D = (Fn_glTexSubImage2D)proc("glTexSubImage2D");
			s_fn_glBindTexture = (Fn_glBindTexture)proc("glBindTexture");
			s_fn_glDeleteTextures = (Fn_glDeleteTextures)proc("glDeleteTextures");
			s_fn_glGenTextures = (Fn_glGenTextures)proc("glGenTextures");
			s_fn_glIsTexture = (Fn_glIsTexture)proc("glIsTexture");
			s_fn_glArrayElement = (Fn_glArrayElement)proc("glArrayElement");
			s_fn_glColorPointer = (Fn_glColorPointer)proc("glColorPointer");
			s_fn_glDisableClientState = (Fn_glDisableClientState)proc("glDisableClientState");
			s_fn_glEdgeFlagPointer = (Fn_glEdgeFlagPointer)proc("glEdgeFlagPointer");
			s_fn_glEnableClientState = (Fn_glEnableClientState)proc("glEnableClientState");
			s_fn_glIndexPointer = (Fn_glIndexPointer)proc("glIndexPointer");
			s_fn_glInterleavedArrays = (Fn_glInterleavedArrays)proc("glInterleavedArrays");
			s_fn_glNormalPointer = (Fn_glNormalPointer)proc("glNormalPointer");
			s_fn_glTexCoordPointer = (Fn_glTexCoordPointer)proc("glTexCoordPointer");
			s_fn_glVertexPointer = (Fn_glVertexPointer)proc("glVertexPointer");
			s_fn_glAreTexturesResident = (Fn_glAreTexturesResident)proc("glAreTexturesResident");
			s_fn_glPrioritizeTextures = (Fn_glPrioritizeTextures)proc("glPrioritizeTextures");
			s_fn_glIndexub = (Fn_glIndexub)proc("glIndexub");
			s_fn_glIndexubv = (Fn_glIndexubv)proc("glIndexubv");
			s_fn_glPopClientAttrib = (Fn_glPopClientAttrib)proc("glPopClientAttrib");
			s_fn_glPushClientAttrib = (Fn_glPushClientAttrib)proc("glPushClientAttrib");
		}
		else return;

		if (initVersion >= Version {1, 2}) {
			s_fn_glDrawRangeElements = (Fn_glDrawRangeElements)proc("glDrawRangeElements");
			s_fn_glTexImage3D = (Fn_glTexImage3D)proc("glTexImage3D");
			s_fn_glTexSubImage3D = (Fn_glTexSubImage3D)proc("glTexSubImage3D");
			s_fn_glCopyTexSubImage3D = (Fn_glCopyTexSubImage3D)proc("glCopyTexSubImage3D");
		}
		else return;

		if (initVersion >= Version {1, 3}) {
			s_fn_glActiveTexture = (Fn_glActiveTexture)proc("glActiveTexture");
			s_fn_glSampleCoverage = (Fn_glSampleCoverage)proc("glSampleCoverage");
			s_fn_glCompressedTexImage3D = (Fn_glCompressedTexImage3D)proc("glCompressedTexImage3D");
			s_fn_glCompressedTexImage2D = (Fn_glCompressedTexImage2D)proc("glCompressedTexImage2D");
			s_fn_glCompressedTexImage1D = (Fn_glCompressedTexImage1D)proc("glCompressedTexImage1D");
			s_fn_glCompressedTexSubImage3D = (Fn_glCompressedTexSubImage3D)proc("glCompressedTexSubImage3D");
			s_fn_glCompressedTexSubImage2D = (Fn_glCompressedTexSubImage2D)proc("glCompressedTexSubImage2D");
			s_fn_glCompressedTexSubImage1D = (Fn_glCompressedTexSubImage1D)proc("glCompressedTexSubImage1D");
			s_fn_glGetCompressedTexImage = (Fn_glGetCompressedTexImage)proc("glGetCompressedTexImage");
			s_fn_glClientActiveTexture = (Fn_glClientActiveTexture)proc("glClientActiveTexture");
			s_fn_glMultiTexCoord1d = (Fn_glMultiTexCoord1d)proc("glMultiTexCoord1d");
			s_fn_glMultiTexCoord1dv = (Fn_glMultiTexCoord1dv)proc("glMultiTexCoord1dv");
			s_fn_glMultiTexCoord1f = (Fn_glMultiTexCoord1f)proc("glMultiTexCoord1f");
			s_fn_glMultiTexCoord1fv = (Fn_glMultiTexCoord1fv)proc("glMultiTexCoord1fv");
			s_fn_glMultiTexCoord1i = (Fn_glMultiTexCoord1i)proc("glMultiTexCoord1i");
			s_fn_glMultiTexCoord1iv = (Fn_glMultiTexCoord1iv)proc("glMultiTexCoord1iv");
			s_fn_glMultiTexCoord1s = (Fn_glMultiTexCoord1s)proc("glMultiTexCoord1s");
			s_fn_glMultiTexCoord1sv = (Fn_glMultiTexCoord1sv)proc("glMultiTexCoord1sv");
			s_fn_glMultiTexCoord2d = (Fn_glMultiTexCoord2d)proc("glMultiTexCoord2d");
			s_fn_glMultiTexCoord2dv = (Fn_glMultiTexCoord2dv)proc("glMultiTexCoord2dv");
			s_fn_glMultiTexCoord2f = (Fn_glMultiTexCoord2f)proc("glMultiTexCoord2f");
			s_fn_glMultiTexCoord2fv = (Fn_glMultiTexCoord2fv)proc("glMultiTexCoord2fv");
			s_fn_glMultiTexCoord2i = (Fn_glMultiTexCoord2i)proc("glMultiTexCoord2i");
			s_fn_glMultiTexCoord2iv = (Fn_glMultiTexCoord2iv)proc("glMultiTexCoord2iv");
			s_fn_glMultiTexCoord2s = (Fn_glMultiTexCoord2s)proc("glMultiTexCoord2s");
			s_fn_glMultiTexCoord2sv = (Fn_glMultiTexCoord2sv)proc("glMultiTexCoord2sv");
			s_fn_glMultiTexCoord3d = (Fn_glMultiTexCoord3d)proc("glMultiTexCoord3d");
			s_fn_glMultiTexCoord3dv = (Fn_glMultiTexCoord3dv)proc("glMultiTexCoord3dv");
			s_fn_glMultiTexCoord3f = (Fn_glMultiTexCoord3f)proc("glMultiTexCoord3f");
			s_fn_glMultiTexCoord3fv = (Fn_glMultiTexCoord3fv)proc("glMultiTexCoord3fv");
			s_fn_glMultiTexCoord3i = (Fn_glMultiTexCoord3i)proc("glMultiTexCoord3i");
			s_fn_glMultiTexCoord3iv = (Fn_glMultiTexCoord3iv)proc("glMultiTexCoord3iv");
			s_fn_glMultiTexCoord3s = (Fn_glMultiTexCoord3s)proc("glMultiTexCoord3s");
			s_fn_glMultiTexCoord3sv = (Fn_glMultiTexCoord3sv)proc("glMultiTexCoord3sv");
			s_fn_glMultiTexCoord4d = (Fn_glMultiTexCoord4d)proc("glMultiTexCoord4d");
			s_fn_glMultiTexCoord4dv = (Fn_glMultiTexCoord4dv)proc("glMultiTexCoord4dv");
			s_fn_glMultiTexCoord4f = (Fn_glMultiTexCoord4f)proc("glMultiTexCoord4f");
			s_fn_glMultiTexCoord4fv = (Fn_glMultiTexCoord4fv)proc("glMultiTexCoord4fv");
			s_fn_glMultiTexCoord4i = (Fn_glMultiTexCoord4i)proc("glMultiTexCoord4i");
			s_fn_glMultiTexCoord4iv = (Fn_glMultiTexCoord4iv)proc("glMultiTexCoord4iv");
			s_fn_glMultiTexCoord4s = (Fn_glMultiTexCoord4s)proc("glMultiTexCoord4s");
			s_fn_glMultiTexCoord4sv = (Fn_glMultiTexCoord4sv)proc("glMultiTexCoord4sv");
			s_fn_glLoadTransposeMatrixf = (Fn_glLoadTransposeMatrixf)proc("glLoadTransposeMatrixf");
			s_fn_glLoadTransposeMatrixd = (Fn_glLoadTransposeMatrixd)proc("glLoadTransposeMatrixd");
			s_fn_glMultTransposeMatrixf = (Fn_glMultTransposeMatrixf)proc("glMultTransposeMatrixf");
			s_fn_glMultTransposeMatrixd = (Fn_glMultTransposeMatrixd)proc("glMultTransposeMatrixd");
		}
		else return;

		if (initVersion >= Version {1, 4}) {
			s_fn_glBlendFuncSeparate = (Fn_glBlendFuncSeparate)proc("glBlendFuncSeparate");
			s_fn_glMultiDrawArrays = (Fn_glMultiDrawArrays)proc("glMultiDrawArrays");
			s_fn_glMultiDrawElements = (Fn_glMultiDrawElements)proc("glMultiDrawElements");
			s_fn_glPointParameterf = (Fn_glPointParameterf)proc("glPointParameterf");
			s_fn_glPointParameterfv = (Fn_glPointParameterfv)proc("glPointParameterfv");
			s_fn_glPointParameteri = (Fn_glPointParameteri)proc("glPointParameteri");
			s_fn_glPointParameteriv = (Fn_glPointParameteriv)proc("glPointParameteriv");
			s_fn_glFogCoordf = (Fn_glFogCoordf)proc("glFogCoordf");
			s_fn_glFogCoordfv = (Fn_glFogCoordfv)proc("glFogCoordfv");
			s_fn_glFogCoordd = (Fn_glFogCoordd)proc("glFogCoordd");
			s_fn_glFogCoorddv = (Fn_glFogCoorddv)proc("glFogCoorddv");
			s_fn_glFogCoordPointer = (Fn_glFogCoordPointer)proc("glFogCoordPointer");
			s_fn_glSecondaryColor3b = (Fn_glSecondaryColor3b)proc("glSecondaryColor3b");
			s_fn_glSecondaryColor3bv = (Fn_glSecondaryColor3bv)proc("glSecondaryColor3bv");
			s_fn_glSecondaryColor3d = (Fn_glSecondaryColor3d)proc("glSecondaryColor3d");
			s_fn_glSecondaryColor3dv = (Fn_glSecondaryColor3dv)proc("glSecondaryColor3dv");
			s_fn_glSecondaryColor3f = (Fn_glSecondaryColor3f)proc("glSecondaryColor3f");
			s_fn_glSecondaryColor3fv = (Fn_glSecondaryColor3fv)proc("glSecondaryColor3fv");
			s_fn_glSecondaryColor3i = (Fn_glSecondaryColor3i)proc("glSecondaryColor3i");
			s_fn_glSecondaryColor3iv = (Fn_glSecondaryColor3iv)proc("glSecondaryColor3iv");
			s_fn_glSecondaryColor3s = (Fn_glSecondaryColor3s)proc("glSecondaryColor3s");
			s_fn_glSecondaryColor3sv = (Fn_glSecondaryColor3sv)proc("glSecondaryColor3sv");
			s_fn_glSecondaryColor3ub = (Fn_glSecondaryColor3ub)proc("glSecondaryColor3ub");
			s_fn_glSecondaryColor3ubv = (Fn_glSecondaryColor3ubv)proc("glSecondaryColor3ubv");
			s_fn_glSecondaryColor3ui = (Fn_glSecondaryColor3ui)proc("glSecondaryColor3ui");
			s_fn_glSecondaryColor3uiv = (Fn_glSecondaryColor3uiv)proc("glSecondaryColor3uiv");
			s_fn_glSecondaryColor3us = (Fn_glSecondaryColor3us)proc("glSecondaryColor3us");
			s_fn_glSecondaryColor3usv = (Fn_glSecondaryColor3usv)proc("glSecondaryColor3usv");
			s_fn_glSecondaryColorPointer = (Fn_glSecondaryColorPointer)proc("glSecondaryColorPointer");
			s_fn_glWindowPos2d = (Fn_glWindowPos2d)proc("glWindowPos2d");
			s_fn_glWindowPos2dv = (Fn_glWindowPos2dv)proc("glWindowPos2dv");
			s_fn_glWindowPos2f = (Fn_glWindowPos2f)proc("glWindowPos2f");
			s_fn_glWindowPos2fv = (Fn_glWindowPos2fv)proc("glWindowPos2fv");
			s_fn_glWindowPos2i = (Fn_glWindowPos2i)proc("glWindowPos2i");
			s_fn_glWindowPos2iv = (Fn_glWindowPos2iv)proc("glWindowPos2iv");
			s_fn_glWindowPos2s = (Fn_glWindowPos2s)proc("glWindowPos2s");
			s_fn_glWindowPos2sv = (Fn_glWindowPos2sv)proc("glWindowPos2sv");
			s_fn_glWindowPos3d = (Fn_glWindowPos3d)proc("glWindowPos3d");
			s_fn_glWindowPos3dv = (Fn_glWindowPos3dv)proc("glWindowPos3dv");
			s_fn_glWindowPos3f = (Fn_glWindowPos3f)proc("glWindowPos3f");
			s_fn_glWindowPos3fv = (Fn_glWindowPos3fv)proc("glWindowPos3fv");
			s_fn_glWindowPos3i = (Fn_glWindowPos3i)proc("glWindowPos3i");
			s_fn_glWindowPos3iv = (Fn_glWindowPos3iv)proc("glWindowPos3iv");
			s_fn_glWindowPos3s = (Fn_glWindowPos3s)proc("glWindowPos3s");
			s_fn_glWindowPos3sv = (Fn_glWindowPos3sv)proc("glWindowPos3sv");
			s_fn_glBlendColor = (Fn_glBlendColor)proc("glBlendColor");
			s_fn_glBlendEquation = (Fn_glBlendEquation)proc("glBlendEquation");
		}
		else return;

		if (initVersion >= Version {1, 5}) {
			s_fn_glGenQueries = (Fn_glGenQueries)proc("glGenQueries");
			s_fn_glDeleteQueries = (Fn_glDeleteQueries)proc("glDeleteQueries");
			s_fn_glIsQuery = (Fn_glIsQuery)proc("glIsQuery");
			s_fn_glBeginQuery = (Fn_glBeginQuery)proc("glBeginQuery");
			s_fn_glEndQuery = (Fn_glEndQuery)proc("glEndQuery");
			s_fn_glGetQueryiv = (Fn_glGetQueryiv)proc("glGetQueryiv");
			s_fn_glGetQueryObjectiv = (Fn_glGetQueryObjectiv)proc("glGetQueryObjectiv");
			s_fn_glGetQueryObjectuiv = (Fn_glGetQueryObjectuiv)proc("glGetQueryObjectuiv");
			s_fn_glBindBuffer = (Fn_glBindBuffer)proc("glBindBuffer");
			s_fn_glDeleteBuffers = (Fn_glDeleteBuffers)proc("glDeleteBuffers");
			s_fn_glGenBuffers = (Fn_glGenBuffers)proc("glGenBuffers");
			s_fn_glIsBuffer = (Fn_glIsBuffer)proc("glIsBuffer");
			s_fn_glBufferData = (Fn_glBufferData)proc("glBufferData");
			s_fn_glBufferSubData = (Fn_glBufferSubData)proc("glBufferSubData");
			s_fn_glGetBufferSubData = (Fn_glGetBufferSubData)proc("glGetBufferSubData");
			s_fn_glMapBuffer = (Fn_glMapBuffer)proc("glMapBuffer");
			s_fn_glUnmapBuffer = (Fn_glUnmapBuffer)proc("glUnmapBuffer");
			s_fn_glGetBufferParameteriv = (Fn_glGetBufferParameteriv)proc("glGetBufferParameteriv");
			s_fn_glGetBufferPointerv = (Fn_glGetBufferPointerv)proc("glGetBufferPointerv");
		}
		else return;

		if (initVersion >= Version {2, 0}) {
			s_fn_glBlendEquationSeparate = (Fn_glBlendEquationSeparate)proc("glBlendEquationSeparate");
			s_fn_glDrawBuffers = (Fn_glDrawBuffers)proc("glDrawBuffers");
			s_fn_glStencilOpSeparate = (Fn_glStencilOpSeparate)proc("glStencilOpSeparate");
			s_fn_glStencilFuncSeparate = (Fn_glStencilFuncSeparate)proc("glStencilFuncSeparate");
			s_fn_glStencilMaskSeparate = (Fn_glStencilMaskSeparate)proc("glStencilMaskSeparate");
			s_fn_glAttachShader = (Fn_glAttachShader)proc("glAttachShader");
			s_fn_glBindAttribLocation = (Fn_glBindAttribLocation)proc("glBindAttribLocation");
			s_fn_glCompileShader = (Fn_glCompileShader)proc("glCompileShader");
			s_fn_glCreateProgram = (Fn_glCreateProgram)proc("glCreateProgram");
			s_fn_glCreateShader = (Fn_glCreateShader)proc("glCreateShader");
			s_fn_glDeleteProgram = (Fn_glDeleteProgram)proc("glDeleteProgram");
			s_fn_glDeleteShader = (Fn_glDeleteShader)proc("glDeleteShader");
			s_fn_glDetachShader = (Fn_glDetachShader)proc("glDetachShader");
			s_fn_glDisableVertexAttribArray = (Fn_glDisableVertexAttribArray)proc("glDisableVertexAttribArray");
			s_fn_glEnableVertexAttribArray = (Fn_glEnableVertexAttribArray)proc("glEnableVertexAttribArray");
			s_fn_glGetActiveAttrib = (Fn_glGetActiveAttrib)proc("glGetActiveAttrib");
			s_fn_glGetActiveUniform = (Fn_glGetActiveUniform)proc("glGetActiveUniform");
			s_fn_glGetAttachedShaders = (Fn_glGetAttachedShaders)proc("glGetAttachedShaders");
			s_fn_glGetAttribLocation = (Fn_glGetAttribLocation)proc("glGetAttribLocation");
			s_fn_glGetProgramiv = (Fn_glGetProgramiv)proc("glGetProgramiv");
			s_fn_glGetProgramInfoLog = (Fn_glGetProgramInfoLog)proc("glGetProgramInfoLog");
			s_fn_glGetShaderiv = (Fn_glGetShaderiv)proc("glGetShaderiv");
			s_fn_glGetShaderInfoLog = (Fn_glGetShaderInfoLog)proc("glGetShaderInfoLog");
			s_fn_glGetShaderSource = (Fn_glGetShaderSource)proc("glGetShaderSource");
			s_fn_glGetUniformLocation = (Fn_glGetUniformLocation)proc("glGetUniformLocation");
			s_fn_glGetUniformfv = (Fn_glGetUniformfv)proc("glGetUniformfv");
			s_fn_glGetUniformiv = (Fn_glGetUniformiv)proc("glGetUniformiv");
			s_fn_glGetVertexAttribdv = (Fn_glGetVertexAttribdv)proc("glGetVertexAttribdv");
			s_fn_glGetVertexAttribfv = (Fn_glGetVertexAttribfv)proc("glGetVertexAttribfv");
			s_fn_glGetVertexAttribiv = (Fn_glGetVertexAttribiv)proc("glGetVertexAttribiv");
			s_fn_glGetVertexAttribPointerv = (Fn_glGetVertexAttribPointerv)proc("glGetVertexAttribPointerv");
			s_fn_glIsProgram = (Fn_glIsProgram)proc("glIsProgram");
			s_fn_glIsShader = (Fn_glIsShader)proc("glIsShader");
			s_fn_glLinkProgram = (Fn_glLinkProgram)proc("glLinkProgram");
			s_fn_glShaderSource = (Fn_glShaderSource)proc("glShaderSource");
			s_fn_glUseProgram = (Fn_glUseProgram)proc("glUseProgram");
			s_fn_glUniform1f = (Fn_glUniform1f)proc("glUniform1f");
			s_fn_glUniform2f = (Fn_glUniform2f)proc("glUniform2f");
			s_fn_glUniform3f = (Fn_glUniform3f)proc("glUniform3f");
			s_fn_glUniform4f = (Fn_glUniform4f)proc("glUniform4f");
			s_fn_glUniform1i = (Fn_glUniform1i)proc("glUniform1i");
			s_fn_glUniform2i = (Fn_glUniform2i)proc("glUniform2i");
			s_fn_glUniform3i = (Fn_glUniform3i)proc("glUniform3i");
			s_fn_glUniform4i = (Fn_glUniform4i)proc("glUniform4i");
			s_fn_glUniform1fv = (Fn_glUniform1fv)proc("glUniform1fv");
			s_fn_glUniform2fv = (Fn_glUniform2fv)proc("glUniform2fv");
			s_fn_glUniform3fv = (Fn_glUniform3fv)proc("glUniform3fv");
			s_fn_glUniform4fv = (Fn_glUniform4fv)proc("glUniform4fv");
			s_fn_glUniform1iv = (Fn_glUniform1iv)proc("glUniform1iv");
			s_fn_glUniform2iv = (Fn_glUniform2iv)proc("glUniform2iv");
			s_fn_glUniform3iv = (Fn_glUniform3iv)proc("glUniform3iv");
			s_fn_glUniform4iv = (Fn_glUniform4iv)proc("glUniform4iv");
			s_fn_glUniformMatrix2fv = (Fn_glUniformMatrix2fv)proc("glUniformMatrix2fv");
			s_fn_glUniformMatrix3fv = (Fn_glUniformMatrix3fv)proc("glUniformMatrix3fv");
			s_fn_glUniformMatrix4fv = (Fn_glUniformMatrix4fv)proc("glUniformMatrix4fv");
			s_fn_glValidateProgram = (Fn_glValidateProgram)proc("glValidateProgram");
			s_fn_glVertexAttrib1d = (Fn_glVertexAttrib1d)proc("glVertexAttrib1d");
			s_fn_glVertexAttrib1dv = (Fn_glVertexAttrib1dv)proc("glVertexAttrib1dv");
			s_fn_glVertexAttrib1f = (Fn_glVertexAttrib1f)proc("glVertexAttrib1f");
			s_fn_glVertexAttrib1fv = (Fn_glVertexAttrib1fv)proc("glVertexAttrib1fv");
			s_fn_glVertexAttrib1s = (Fn_glVertexAttrib1s)proc("glVertexAttrib1s");
			s_fn_glVertexAttrib1sv = (Fn_glVertexAttrib1sv)proc("glVertexAttrib1sv");
			s_fn_glVertexAttrib2d = (Fn_glVertexAttrib2d)proc("glVertexAttrib2d");
			s_fn_glVertexAttrib2dv = (Fn_glVertexAttrib2dv)proc("glVertexAttrib2dv");
			s_fn_glVertexAttrib2f = (Fn_glVertexAttrib2f)proc("glVertexAttrib2f");
			s_fn_glVertexAttrib2fv = (Fn_glVertexAttrib2fv)proc("glVertexAttrib2fv");
			s_fn_glVertexAttrib2s = (Fn_glVertexAttrib2s)proc("glVertexAttrib2s");
			s_fn_glVertexAttrib2sv = (Fn_glVertexAttrib2sv)proc("glVertexAttrib2sv");
			s_fn_glVertexAttrib3d = (Fn_glVertexAttrib3d)proc("glVertexAttrib3d");
			s_fn_glVertexAttrib3dv = (Fn_glVertexAttrib3dv)proc("glVertexAttrib3dv");
			s_fn_glVertexAttrib3f = (Fn_glVertexAttrib3f)proc("glVertexAttrib3f");
			s_fn_glVertexAttrib3fv = (Fn_glVertexAttrib3fv)proc("glVertexAttrib3fv");
			s_fn_glVertexAttrib3s = (Fn_glVertexAttrib3s)proc("glVertexAttrib3s");
			s_fn_glVertexAttrib3sv = (Fn_glVertexAttrib3sv)proc("glVertexAttrib3sv");
			s_fn_glVertexAttrib4Nbv = (Fn_glVertexAttrib4Nbv)proc("glVertexAttrib4Nbv");
			s_fn_glVertexAttrib4Niv = (Fn_glVertexAttrib4Niv)proc("glVertexAttrib4Niv");
			s_fn_glVertexAttrib4Nsv = (Fn_glVertexAttrib4Nsv)proc("glVertexAttrib4Nsv");
			s_fn_glVertexAttrib4Nub = (Fn_glVertexAttrib4Nub)proc("glVertexAttrib4Nub");
			s_fn_glVertexAttrib4Nubv = (Fn_glVertexAttrib4Nubv)proc("glVertexAttrib4Nubv");
			s_fn_glVertexAttrib4Nuiv = (Fn_glVertexAttrib4Nuiv)proc("glVertexAttrib4Nuiv");
			s_fn_glVertexAttrib4Nusv = (Fn_glVertexAttrib4Nusv)proc("glVertexAttrib4Nusv");
			s_fn_glVertexAttrib4bv = (Fn_glVertexAttrib4bv)proc("glVertexAttrib4bv");
			s_fn_glVertexAttrib4d = (Fn_glVertexAttrib4d)proc("glVertexAttrib4d");
			s_fn_glVertexAttrib4dv = (Fn_glVertexAttrib4dv)proc("glVertexAttrib4dv");
			s_fn_glVertexAttrib4f = (Fn_glVertexAttrib4f)proc("glVertexAttrib4f");
			s_fn_glVertexAttrib4fv = (Fn_glVertexAttrib4fv)proc("glVertexAttrib4fv");
			s_fn_glVertexAttrib4iv = (Fn_glVertexAttrib4iv)proc("glVertexAttrib4iv");
			s_fn_glVertexAttrib4s = (Fn_glVertexAttrib4s)proc("glVertexAttrib4s");
			s_fn_glVertexAttrib4sv = (Fn_glVertexAttrib4sv)proc("glVertexAttrib4sv");
			s_fn_glVertexAttrib4ubv = (Fn_glVertexAttrib4ubv)proc("glVertexAttrib4ubv");
			s_fn_glVertexAttrib4uiv = (Fn_glVertexAttrib4uiv)proc("glVertexAttrib4uiv");
			s_fn_glVertexAttrib4usv = (Fn_glVertexAttrib4usv)proc("glVertexAttrib4usv");
			s_fn_glVertexAttribPointer = (Fn_glVertexAttribPointer)proc("glVertexAttribPointer");
		}
		else return;

		if (initVersion >= Version {2, 1}) {
			s_fn_glUniformMatrix2x3fv = (Fn_glUniformMatrix2x3fv)proc("glUniformMatrix2x3fv");
			s_fn_glUniformMatrix3x2fv = (Fn_glUniformMatrix3x2fv)proc("glUniformMatrix3x2fv");
			s_fn_glUniformMatrix2x4fv = (Fn_glUniformMatrix2x4fv)proc("glUniformMatrix2x4fv");
			s_fn_glUniformMatrix4x2fv = (Fn_glUniformMatrix4x2fv)proc("glUniformMatrix4x2fv");
			s_fn_glUniformMatrix3x4fv = (Fn_glUniformMatrix3x4fv)proc("glUniformMatrix3x4fv");
			s_fn_glUniformMatrix4x3fv = (Fn_glUniformMatrix4x3fv)proc("glUniformMatrix4x3fv");
		}
		else return;

		if (initVersion >= Version {3, 0}) {
			s_fn_glColorMaski = (Fn_glColorMaski)proc("glColorMaski");
			s_fn_glGetBooleani_v = (Fn_glGetBooleani_v)proc("glGetBooleani_v");
			s_fn_glGetIntegeri_v = (Fn_glGetIntegeri_v)proc("glGetIntegeri_v");
			s_fn_glEnablei = (Fn_glEnablei)proc("glEnablei");
			s_fn_glDisablei = (Fn_glDisablei)proc("glDisablei");
			s_fn_glIsEnabledi = (Fn_glIsEnabledi)proc("glIsEnabledi");
			s_fn_glBeginTransformFeedback = (Fn_glBeginTransformFeedback)proc("glBeginTransformFeedback");
			s_fn_glEndTransformFeedback = (Fn_glEndTransformFeedback)proc("glEndTransformFeedback");
			s_fn_glBindBufferRange = (Fn_glBindBufferRange)proc("glBindBufferRange");
			s_fn_glBindBufferBase = (Fn_glBindBufferBase)proc("glBindBufferBase");
			s_fn_glTransformFeedbackVaryings = (Fn_glTransformFeedbackVaryings)proc("glTransformFeedbackVaryings");
			s_fn_glGetTransformFeedbackVarying = (Fn_glGetTransformFeedbackVarying)proc("glGetTransformFeedbackVarying");
			s_fn_glClampColor = (Fn_glClampColor)proc("glClampColor");
			s_fn_glBeginConditionalRender = (Fn_glBeginConditionalRender)proc("glBeginConditionalRender");
			s_fn_glEndConditionalRender = (Fn_glEndConditionalRender)proc("glEndConditionalRender");
			s_fn_glVertexAttribIPointer = (Fn_glVertexAttribIPointer)proc("glVertexAttribIPointer");
			s_fn_glGetVertexAttribIiv = (Fn_glGetVertexAttribIiv)proc("glGetVertexAttribIiv");
			s_fn_glGetVertexAttribIuiv = (Fn_glGetVertexAttribIuiv)proc("glGetVertexAttribIuiv");
			s_fn_glVertexAttribI1i = (Fn_glVertexAttribI1i)proc("glVertexAttribI1i");
			s_fn_glVertexAttribI2i = (Fn_glVertexAttribI2i)proc("glVertexAttribI2i");
			s_fn_glVertexAttribI3i = (Fn_glVertexAttribI3i)proc("glVertexAttribI3i");
			s_fn_glVertexAttribI4i = (Fn_glVertexAttribI4i)proc("glVertexAttribI4i");
			s_fn_glVertexAttribI1ui = (Fn_glVertexAttribI1ui)proc("glVertexAttribI1ui");
			s_fn_glVertexAttribI2ui = (Fn_glVertexAttribI2ui)proc("glVertexAttribI2ui");
			s_fn_glVertexAttribI3ui = (Fn_glVertexAttribI3ui)proc("glVertexAttribI3ui");
			s_fn_glVertexAttribI4ui = (Fn_glVertexAttribI4ui)proc("glVertexAttribI4ui");
			s_fn_glVertexAttribI1iv = (Fn_glVertexAttribI1iv)proc("glVertexAttribI1iv");
			s_fn_glVertexAttribI2iv = (Fn_glVertexAttribI2iv)proc("glVertexAttribI2iv");
			s_fn_glVertexAttribI3iv = (Fn_glVertexAttribI3iv)proc("glVertexAttribI3iv");
			s_fn_glVertexAttribI4iv = (Fn_glVertexAttribI4iv)proc("glVertexAttribI4iv");
			s_fn_glVertexAttribI1uiv = (Fn_glVertexAttribI1uiv)proc("glVertexAttribI1uiv");
			s_fn_glVertexAttribI2uiv = (Fn_glVertexAttribI2uiv)proc("glVertexAttribI2uiv");
			s_fn_glVertexAttribI3uiv = (Fn_glVertexAttribI3uiv)proc("glVertexAttribI3uiv");
			s_fn_glVertexAttribI4uiv = (Fn_glVertexAttribI4uiv)proc("glVertexAttribI4uiv");
			s_fn_glVertexAttribI4bv = (Fn_glVertexAttribI4bv)proc("glVertexAttribI4bv");
			s_fn_glVertexAttribI4sv = (Fn_glVertexAttribI4sv)proc("glVertexAttribI4sv");
			s_fn_glVertexAttribI4ubv = (Fn_glVertexAttribI4ubv)proc("glVertexAttribI4ubv");
			s_fn_glVertexAttribI4usv = (Fn_glVertexAttribI4usv)proc("glVertexAttribI4usv");
			s_fn_glGetUniformuiv = (Fn_glGetUniformuiv)proc("glGetUniformuiv");
			s_fn_glBindFragDataLocation = (Fn_glBindFragDataLocation)proc("glBindFragDataLocation");
			s_fn_glGetFragDataLocation = (Fn_glGetFragDataLocation)proc("glGetFragDataLocation");
			s_fn_glUniform1ui = (Fn_glUniform1ui)proc("glUniform1ui");
			s_fn_glUniform2ui = (Fn_glUniform2ui)proc("glUniform2ui");
			s_fn_glUniform3ui = (Fn_glUniform3ui)proc("glUniform3ui");
			s_fn_glUniform4ui = (Fn_glUniform4ui)proc("glUniform4ui");
			s_fn_glUniform1uiv = (Fn_glUniform1uiv)proc("glUniform1uiv");
			s_fn_glUniform2uiv = (Fn_glUniform2uiv)proc("glUniform2uiv");
			s_fn_glUniform3uiv = (Fn_glUniform3uiv)proc("glUniform3uiv");
			s_fn_glUniform4uiv = (Fn_glUniform4uiv)proc("glUniform4uiv");
			s_fn_glTexParameterIiv = (Fn_glTexParameterIiv)proc("glTexParameterIiv");
			s_fn_glTexParameterIuiv = (Fn_glTexParameterIuiv)proc("glTexParameterIuiv");
			s_fn_glGetTexParameterIiv = (Fn_glGetTexParameterIiv)proc("glGetTexParameterIiv");
			s_fn_glGetTexParameterIuiv = (Fn_glGetTexParameterIuiv)proc("glGetTexParameterIuiv");
			s_fn_glClearBufferiv = (Fn_glClearBufferiv)proc("glClearBufferiv");
			s_fn_glClearBufferuiv = (Fn_glClearBufferuiv)proc("glClearBufferuiv");
			s_fn_glClearBufferfv = (Fn_glClearBufferfv)proc("glClearBufferfv");
			s_fn_glClearBufferfi = (Fn_glClearBufferfi)proc("glClearBufferfi");
			s_fn_glGetStringi = (Fn_glGetStringi)proc("glGetStringi");
			s_fn_glIsRenderbuffer = (Fn_glIsRenderbuffer)proc("glIsRenderbuffer");
			s_fn_glBindRenderbuffer = (Fn_glBindRenderbuffer)proc("glBindRenderbuffer");
			s_fn_glDeleteRenderbuffers = (Fn_glDeleteRenderbuffers)proc("glDeleteRenderbuffers");
			s_fn_glGenRenderbuffers = (Fn_glGenRenderbuffers)proc("glGenRenderbuffers");
			s_fn_glRenderbufferStorage = (Fn_glRenderbufferStorage)proc("glRenderbufferStorage");
			s_fn_glGetRenderbufferParameteriv = (Fn_glGetRenderbufferParameteriv)proc("glGetRenderbufferParameteriv");
			s_fn_glIsFramebuffer = (Fn_glIsFramebuffer)proc("glIsFramebuffer");
			s_fn_glBindFramebuffer = (Fn_glBindFramebuffer)proc("glBindFramebuffer");
			s_fn_glDeleteFramebuffers = (Fn_glDeleteFramebuffers)proc("glDeleteFramebuffers");
			s_fn_glGenFramebuffers = (Fn_glGenFramebuffers)proc("glGenFramebuffers");
			s_fn_glCheckFramebufferStatus = (Fn_glCheckFramebufferStatus)proc("glCheckFramebufferStatus");
			s_fn_glFramebufferTexture1D = (Fn_glFramebufferTexture1D)proc("glFramebufferTexture1D");
			s_fn_glFramebufferTexture2D = (Fn_glFramebufferTexture2D)proc("glFramebufferTexture2D");
			s_fn_glFramebufferTexture3D = (Fn_glFramebufferTexture3D)proc("glFramebufferTexture3D");
			s_fn_glFramebufferRenderbuffer = (Fn_glFramebufferRenderbuffer)proc("glFramebufferRenderbuffer");
			s_fn_glGetFramebufferAttachmentParameteriv = (Fn_glGetFramebufferAttachmentParameteriv)proc("glGetFramebufferAttachmentParameteriv");
			s_fn_glGenerateMipmap = (Fn_glGenerateMipmap)proc("glGenerateMipmap");
			s_fn_glBlitFramebuffer = (Fn_glBlitFramebuffer)proc("glBlitFramebuffer");
			s_fn_glRenderbufferStorageMultisample = (Fn_glRenderbufferStorageMultisample)proc("glRenderbufferStorageMultisample");
			s_fn_glFramebufferTextureLayer = (Fn_glFramebufferTextureLayer)proc("glFramebufferTextureLayer");
			s_fn_glMapBufferRange = (Fn_glMapBufferRange)proc("glMapBufferRange");
			s_fn_glFlushMappedBufferRange = (Fn_glFlushMappedBufferRange)proc("glFlushMappedBufferRange");
			s_fn_glBindVertexArray = (Fn_glBindVertexArray)proc("glBindVertexArray");
			s_fn_glDeleteVertexArrays = (Fn_glDeleteVertexArrays)proc("glDeleteVertexArrays");
			s_fn_glGenVertexArrays = (Fn_glGenVertexArrays)proc("glGenVertexArrays");
			s_fn_glIsVertexArray = (Fn_glIsVertexArray)proc("glIsVertexArray");
		}
		else return;

		if (initVersion >= Version {3, 1}) {
			s_fn_glDrawArraysInstanced = (Fn_glDrawArraysInstanced)proc("glDrawArraysInstanced");
			s_fn_glDrawElementsInstanced = (Fn_glDrawElementsInstanced)proc("glDrawElementsInstanced");
			s_fn_glTexBuffer = (Fn_glTexBuffer)proc("glTexBuffer");
			s_fn_glPrimitiveRestartIndex = (Fn_glPrimitiveRestartIndex)proc("glPrimitiveRestartIndex");
			s_fn_glCopyBufferSubData = (Fn_glCopyBufferSubData)proc("glCopyBufferSubData");
			s_fn_glGetUniformIndices = (Fn_glGetUniformIndices)proc("glGetUniformIndices");
			s_fn_glGetActiveUniformsiv = (Fn_glGetActiveUniformsiv)proc("glGetActiveUniformsiv");
			s_fn_glGetActiveUniformName = (Fn_glGetActiveUniformName)proc("glGetActiveUniformName");
			s_fn_glGetUniformBlockIndex = (Fn_glGetUniformBlockIndex)proc("glGetUniformBlockIndex");
			s_fn_glGetActiveUniformBlockiv = (Fn_glGetActiveUniformBlockiv)proc("glGetActiveUniformBlockiv");
			s_fn_glGetActiveUniformBlockName = (Fn_glGetActiveUniformBlockName)proc("glGetActiveUniformBlockName");
			s_fn_glUniformBlockBinding = (Fn_glUniformBlockBinding)proc("glUniformBlockBinding");
		}
		else return;

		if (initVersion >= Version {3, 2}) {
			s_fn_glDrawElementsBaseVertex = (Fn_glDrawElementsBaseVertex)proc("glDrawElementsBaseVertex");
			s_fn_glDrawRangeElementsBaseVertex = (Fn_glDrawRangeElementsBaseVertex)proc("glDrawRangeElementsBaseVertex");
			s_fn_glDrawElementsInstancedBaseVertex = (Fn_glDrawElementsInstancedBaseVertex)proc("glDrawElementsInstancedBaseVertex");
			s_fn_glMultiDrawElementsBaseVertex = (Fn_glMultiDrawElementsBaseVertex)proc("glMultiDrawElementsBaseVertex");
			s_fn_glProvokingVertex = (Fn_glProvokingVertex)proc("glProvokingVertex");
			s_fn_glFenceSync = (Fn_glFenceSync)proc("glFenceSync");
			s_fn_glIsSync = (Fn_glIsSync)proc("glIsSync");
			s_fn_glDeleteSync = (Fn_glDeleteSync)proc("glDeleteSync");
			s_fn_glClientWaitSync = (Fn_glClientWaitSync)proc("glClientWaitSync");
			s_fn_glWaitSync = (Fn_glWaitSync)proc("glWaitSync");
			s_fn_glGetInteger64v = (Fn_glGetInteger64v)proc("glGetInteger64v");
			s_fn_glGetSynciv = (Fn_glGetSynciv)proc("glGetSynciv");
			s_fn_glGetInteger64i_v = (Fn_glGetInteger64i_v)proc("glGetInteger64i_v");
			s_fn_glGetBufferParameteri64v = (Fn_glGetBufferParameteri64v)proc("glGetBufferParameteri64v");
			s_fn_glFramebufferTexture = (Fn_glFramebufferTexture)proc("glFramebufferTexture");
			s_fn_glTexImage2DMultisample = (Fn_glTexImage2DMultisample)proc("glTexImage2DMultisample");
			s_fn_glTexImage3DMultisample = (Fn_glTexImage3DMultisample)proc("glTexImage3DMultisample");
			s_fn_glGetMultisamplefv = (Fn_glGetMultisamplefv)proc("glGetMultisamplefv");
			s_fn_glSampleMaski = (Fn_glSampleMaski)proc("glSampleMaski");
		}
		else return;

		if (initVersion >= Version {3, 3}) {
			s_fn_glBindFragDataLocationIndexed = (Fn_glBindFragDataLocationIndexed)proc("glBindFragDataLocationIndexed");
			s_fn_glGetFragDataIndex = (Fn_glGetFragDataIndex)proc("glGetFragDataIndex");
			s_fn_glGenSamplers = (Fn_glGenSamplers)proc("glGenSamplers");
			s_fn_glDeleteSamplers = (Fn_glDeleteSamplers)proc("glDeleteSamplers");
			s_fn_glIsSampler = (Fn_glIsSampler)proc("glIsSampler");
			s_fn_glBindSampler = (Fn_glBindSampler)proc("glBindSampler");
			s_fn_glSamplerParameteri = (Fn_glSamplerParameteri)proc("glSamplerParameteri");
			s_fn_glSamplerParameteriv = (Fn_glSamplerParameteriv)proc("glSamplerParameteriv");
			s_fn_glSamplerParameterf = (Fn_glSamplerParameterf)proc("glSamplerParameterf");
			s_fn_glSamplerParameterfv = (Fn_glSamplerParameterfv)proc("glSamplerParameterfv");
			s_fn_glSamplerParameterIiv = (Fn_glSamplerParameterIiv)proc("glSamplerParameterIiv");
			s_fn_glSamplerParameterIuiv = (Fn_glSamplerParameterIuiv)proc("glSamplerParameterIuiv");
			s_fn_glGetSamplerParameteriv = (Fn_glGetSamplerParameteriv)proc("glGetSamplerParameteriv");
			s_fn_glGetSamplerParameterIiv = (Fn_glGetSamplerParameterIiv)proc("glGetSamplerParameterIiv");
			s_fn_glGetSamplerParameterfv = (Fn_glGetSamplerParameterfv)proc("glGetSamplerParameterfv");
			s_fn_glGetSamplerParameterIuiv = (Fn_glGetSamplerParameterIuiv)proc("glGetSamplerParameterIuiv");
			s_fn_glQueryCounter = (Fn_glQueryCounter)proc("glQueryCounter");
			s_fn_glGetQueryObjecti64v = (Fn_glGetQueryObjecti64v)proc("glGetQueryObjecti64v");
			s_fn_glGetQueryObjectui64v = (Fn_glGetQueryObjectui64v)proc("glGetQueryObjectui64v");
			s_fn_glVertexAttribDivisor = (Fn_glVertexAttribDivisor)proc("glVertexAttribDivisor");
			s_fn_glVertexAttribP1ui = (Fn_glVertexAttribP1ui)proc("glVertexAttribP1ui");
			s_fn_glVertexAttribP1uiv = (Fn_glVertexAttribP1uiv)proc("glVertexAttribP1uiv");
			s_fn_glVertexAttribP2ui = (Fn_glVertexAttribP2ui)proc("glVertexAttribP2ui");
			s_fn_glVertexAttribP2uiv = (Fn_glVertexAttribP2uiv)proc("glVertexAttribP2uiv");
			s_fn_glVertexAttribP3ui = (Fn_glVertexAttribP3ui)proc("glVertexAttribP3ui");
			s_fn_glVertexAttribP3uiv = (Fn_glVertexAttribP3uiv)proc("glVertexAttribP3uiv");
			s_fn_glVertexAttribP4ui = (Fn_glVertexAttribP4ui)proc("glVertexAttribP4ui");
			s_fn_glVertexAttribP4uiv = (Fn_glVertexAttribP4uiv)proc("glVertexAttribP4uiv");
			s_fn_glVertexP2ui = (Fn_glVertexP2ui)proc("glVertexP2ui");
			s_fn_glVertexP2uiv = (Fn_glVertexP2uiv)proc("glVertexP2uiv");
			s_fn_glVertexP3ui = (Fn_glVertexP3ui)proc("glVertexP3ui");
			s_fn_glVertexP3uiv = (Fn_glVertexP3uiv)proc("glVertexP3uiv");
			s_fn_glVertexP4ui = (Fn_glVertexP4ui)proc("glVertexP4ui");
			s_fn_glVertexP4uiv = (Fn_glVertexP4uiv)proc("glVertexP4uiv");
			s_fn_glTexCoordP1ui = (Fn_glTexCoordP1ui)proc("glTexCoordP1ui");
			s_fn_glTexCoordP1uiv = (Fn_glTexCoordP1uiv)proc("glTexCoordP1uiv");
			s_fn_glTexCoordP2ui = (Fn_glTexCoordP2ui)proc("glTexCoordP2ui");
			s_fn_glTexCoordP2uiv = (Fn_glTexCoordP2uiv)proc("glTexCoordP2uiv");
			s_fn_glTexCoordP3ui = (Fn_glTexCoordP3ui)proc("glTexCoordP3ui");
			s_fn_glTexCoordP3uiv = (Fn_glTexCoordP3uiv)proc("glTexCoordP3uiv");
			s_fn_glTexCoordP4ui = (Fn_glTexCoordP4ui)proc("glTexCoordP4ui");
			s_fn_glTexCoordP4uiv = (Fn_glTexCoordP4uiv)proc("glTexCoordP4uiv");
			s_fn_glMultiTexCoordP1ui = (Fn_glMultiTexCoordP1ui)proc("glMultiTexCoordP1ui");
			s_fn_glMultiTexCoordP1uiv = (Fn_glMultiTexCoordP1uiv)proc("glMultiTexCoordP1uiv");
			s_fn_glMultiTexCoordP2ui = (Fn_glMultiTexCoordP2ui)proc("glMultiTexCoordP2ui");
			s_fn_glMultiTexCoordP2uiv = (Fn_glMultiTexCoordP2uiv)proc("glMultiTexCoordP2uiv");
			s_fn_glMultiTexCoordP3ui = (Fn_glMultiTexCoordP3ui)proc("glMultiTexCoordP3ui");
			s_fn_glMultiTexCoordP3uiv = (Fn_glMultiTexCoordP3uiv)proc("glMultiTexCoordP3uiv");
			s_fn_glMultiTexCoordP4ui = (Fn_glMultiTexCoordP4ui)proc("glMultiTexCoordP4ui");
			s_fn_glMultiTexCoordP4uiv = (Fn_glMultiTexCoordP4uiv)proc("glMultiTexCoordP4uiv");
			s_fn_glNormalP3ui = (Fn_glNormalP3ui)proc("glNormalP3ui");
			s_fn_glNormalP3uiv = (Fn_glNormalP3uiv)proc("glNormalP3uiv");
			s_fn_glColorP3ui = (Fn_glColorP3ui)proc("glColorP3ui");
			s_fn_glColorP3uiv = (Fn_glColorP3uiv)proc("glColorP3uiv");
			s_fn_glColorP4ui = (Fn_glColorP4ui)proc("glColorP4ui");
			s_fn_glColorP4uiv = (Fn_glColorP4uiv)proc("glColorP4uiv");
			s_fn_glSecondaryColorP3ui = (Fn_glSecondaryColorP3ui)proc("glSecondaryColorP3ui");
			s_fn_glSecondaryColorP3uiv = (Fn_glSecondaryColorP3uiv)proc("glSecondaryColorP3uiv");
		}
		else return;

		if (initVersion >= Version {4, 0}) {
			s_fn_glMinSampleShading = (Fn_glMinSampleShading)proc("glMinSampleShading");
			s_fn_glBlendEquationi = (Fn_glBlendEquationi)proc("glBlendEquationi");
			s_fn_glBlendEquationSeparatei = (Fn_glBlendEquationSeparatei)proc("glBlendEquationSeparatei");
			s_fn_glBlendFunci = (Fn_glBlendFunci)proc("glBlendFunci");
			s_fn_glBlendFuncSeparatei = (Fn_glBlendFuncSeparatei)proc("glBlendFuncSeparatei");
			s_fn_glDrawArraysIndirect = (Fn_glDrawArraysIndirect)proc("glDrawArraysIndirect");
			s_fn_glDrawElementsIndirect = (Fn_glDrawElementsIndirect)proc("glDrawElementsIndirect");
			s_fn_glUniform1d = (Fn_glUniform1d)proc("glUniform1d");
			s_fn_glUniform2d = (Fn_glUniform2d)proc("glUniform2d");
			s_fn_glUniform3d = (Fn_glUniform3d)proc("glUniform3d");
			s_fn_glUniform4d = (Fn_glUniform4d)proc("glUniform4d");
			s_fn_glUniform1dv = (Fn_glUniform1dv)proc("glUniform1dv");
			s_fn_glUniform2dv = (Fn_glUniform2dv)proc("glUniform2dv");
			s_fn_glUniform3dv = (Fn_glUniform3dv)proc("glUniform3dv");
			s_fn_glUniform4dv = (Fn_glUniform4dv)proc("glUniform4dv");
			s_fn_glUniformMatrix2dv = (Fn_glUniformMatrix2dv)proc("glUniformMatrix2dv");
			s_fn_glUniformMatrix3dv = (Fn_glUniformMatrix3dv)proc("glUniformMatrix3dv");
			s_fn_glUniformMatrix4dv = (Fn_glUniformMatrix4dv)proc("glUniformMatrix4dv");
			s_fn_glUniformMatrix2x3dv = (Fn_glUniformMatrix2x3dv)proc("glUniformMatrix2x3dv");
			s_fn_glUniformMatrix2x4dv = (Fn_glUniformMatrix2x4dv)proc("glUniformMatrix2x4dv");
			s_fn_glUniformMatrix3x2dv = (Fn_glUniformMatrix3x2dv)proc("glUniformMatrix3x2dv");
			s_fn_glUniformMatrix3x4dv = (Fn_glUniformMatrix3x4dv)proc("glUniformMatrix3x4dv");
			s_fn_glUniformMatrix4x2dv = (Fn_glUniformMatrix4x2dv)proc("glUniformMatrix4x2dv");
			s_fn_glUniformMatrix4x3dv = (Fn_glUniformMatrix4x3dv)proc("glUniformMatrix4x3dv");
			s_fn_glGetUniformdv = (Fn_glGetUniformdv)proc("glGetUniformdv");
			s_fn_glGetSubroutineUniformLocation = (Fn_glGetSubroutineUniformLocation)proc("glGetSubroutineUniformLocation");
			s_fn_glGetSubroutineIndex = (Fn_glGetSubroutineIndex)proc("glGetSubroutineIndex");
			s_fn_glGetActiveSubroutineUniformiv = (Fn_glGetActiveSubroutineUniformiv)proc("glGetActiveSubroutineUniformiv");
			s_fn_glGetActiveSubroutineUniformName = (Fn_glGetActiveSubroutineUniformName)proc("glGetActiveSubroutineUniformName");
			s_fn_glGetActiveSubroutineName = (Fn_glGetActiveSubroutineName)proc("glGetActiveSubroutineName");
			s_fn_glUniformSubroutinesuiv = (Fn_glUniformSubroutinesuiv)proc("glUniformSubroutinesuiv");
			s_fn_glGetUniformSubroutineuiv = (Fn_glGetUniformSubroutineuiv)proc("glGetUniformSubroutineuiv");
			s_fn_glGetProgramStageiv = (Fn_glGetProgramStageiv)proc("glGetProgramStageiv");
			s_fn_glPatchParameteri = (Fn_glPatchParameteri)proc("glPatchParameteri");
			s_fn_glPatchParameterfv = (Fn_glPatchParameterfv)proc("glPatchParameterfv");
			s_fn_glBindTransformFeedback = (Fn_glBindTransformFeedback)proc("glBindTransformFeedback");
			s_fn_glDeleteTransformFeedbacks = (Fn_glDeleteTransformFeedbacks)proc("glDeleteTransformFeedbacks");
			s_fn_glGenTransformFeedbacks = (Fn_glGenTransformFeedbacks)proc("glGenTransformFeedbacks");
			s_fn_glIsTransformFeedback = (Fn_glIsTransformFeedback)proc("glIsTransformFeedback");
			s_fn_glPauseTransformFeedback = (Fn_glPauseTransformFeedback)proc("glPauseTransformFeedback");
			s_fn_glResumeTransformFeedback = (Fn_glResumeTransformFeedback)proc("glResumeTransformFeedback");
			s_fn_glDrawTransformFeedback = (Fn_glDrawTransformFeedback)proc("glDrawTransformFeedback");
			s_fn_glDrawTransformFeedbackStream = (Fn_glDrawTransformFeedbackStream)proc("glDrawTransformFeedbackStream");
			s_fn_glBeginQueryIndexed = (Fn_glBeginQueryIndexed)proc("glBeginQueryIndexed");
			s_fn_glEndQueryIndexed = (Fn_glEndQueryIndexed)proc("glEndQueryIndexed");
			s_fn_glGetQueryIndexediv = (Fn_glGetQueryIndexediv)proc("glGetQueryIndexediv");
		}
		else return;

		if (initVersion >= Version {4, 1}) {
			s_fn_glReleaseShaderCompiler = (Fn_glReleaseShaderCompiler)proc("glReleaseShaderCompiler");
			s_fn_glShaderBinary = (Fn_glShaderBinary)proc("glShaderBinary");
			s_fn_glGetShaderPrecisionFormat = (Fn_glGetShaderPrecisionFormat)proc("glGetShaderPrecisionFormat");
			s_fn_glDepthRangef = (Fn_glDepthRangef)proc("glDepthRangef");
			s_fn_glClearDepthf = (Fn_glClearDepthf)proc("glClearDepthf");
			s_fn_glGetProgramBinary = (Fn_glGetProgramBinary)proc("glGetProgramBinary");
			s_fn_glProgramBinary = (Fn_glProgramBinary)proc("glProgramBinary");
			s_fn_glProgramParameteri = (Fn_glProgramParameteri)proc("glProgramParameteri");
			s_fn_glUseProgramStages = (Fn_glUseProgramStages)proc("glUseProgramStages");
			s_fn_glActiveShaderProgram = (Fn_glActiveShaderProgram)proc("glActiveShaderProgram");
			s_fn_glCreateShaderProgramv = (Fn_glCreateShaderProgramv)proc("glCreateShaderProgramv");
			s_fn_glBindProgramPipeline = (Fn_glBindProgramPipeline)proc("glBindProgramPipeline");
			s_fn_glDeleteProgramPipelines = (Fn_glDeleteProgramPipelines)proc("glDeleteProgramPipelines");
			s_fn_glGenProgramPipelines = (Fn_glGenProgramPipelines)proc("glGenProgramPipelines");
			s_fn_glIsProgramPipeline = (Fn_glIsProgramPipeline)proc("glIsProgramPipeline");
			s_fn_glGetProgramPipelineiv = (Fn_glGetProgramPipelineiv)proc("glGetProgramPipelineiv");
			s_fn_glProgramUniform1i = (Fn_glProgramUniform1i)proc("glProgramUniform1i");
			s_fn_glProgramUniform1iv = (Fn_glProgramUniform1iv)proc("glProgramUniform1iv");
			s_fn_glProgramUniform1f = (Fn_glProgramUniform1f)proc("glProgramUniform1f");
			s_fn_glProgramUniform1fv = (Fn_glProgramUniform1fv)proc("glProgramUniform1fv");
			s_fn_glProgramUniform1d = (Fn_glProgramUniform1d)proc("glProgramUniform1d");
			s_fn_glProgramUniform1dv = (Fn_glProgramUniform1dv)proc("glProgramUniform1dv");
			s_fn_glProgramUniform1ui = (Fn_glProgramUniform1ui)proc("glProgramUniform1ui");
			s_fn_glProgramUniform1uiv = (Fn_glProgramUniform1uiv)proc("glProgramUniform1uiv");
			s_fn_glProgramUniform2i = (Fn_glProgramUniform2i)proc("glProgramUniform2i");
			s_fn_glProgramUniform2iv = (Fn_glProgramUniform2iv)proc("glProgramUniform2iv");
			s_fn_glProgramUniform2f = (Fn_glProgramUniform2f)proc("glProgramUniform2f");
			s_fn_glProgramUniform2fv = (Fn_glProgramUniform2fv)proc("glProgramUniform2fv");
			s_fn_glProgramUniform2d = (Fn_glProgramUniform2d)proc("glProgramUniform2d");
			s_fn_glProgramUniform2dv = (Fn_glProgramUniform2dv)proc("glProgramUniform2dv");
			s_fn_glProgramUniform2ui = (Fn_glProgramUniform2ui)proc("glProgramUniform2ui");
			s_fn_glProgramUniform2uiv = (Fn_glProgramUniform2uiv)proc("glProgramUniform2uiv");
			s_fn_glProgramUniform3i = (Fn_glProgramUniform3i)proc("glProgramUniform3i");
			s_fn_glProgramUniform3iv = (Fn_glProgramUniform3iv)proc("glProgramUniform3iv");
			s_fn_glProgramUniform3f = (Fn_glProgramUniform3f)proc("glProgramUniform3f");
			s_fn_glProgramUniform3fv = (Fn_glProgramUniform3fv)proc("glProgramUniform3fv");
			s_fn_glProgramUniform3d = (Fn_glProgramUniform3d)proc("glProgramUniform3d");
			s_fn_glProgramUniform3dv = (Fn_glProgramUniform3dv)proc("glProgramUniform3dv");
			s_fn_glProgramUniform3ui = (Fn_glProgramUniform3ui)proc("glProgramUniform3ui");
			s_fn_glProgramUniform3uiv = (Fn_glProgramUniform3uiv)proc("glProgramUniform3uiv");
			s_fn_glProgramUniform4i = (Fn_glProgramUniform4i)proc("glProgramUniform4i");
			s_fn_glProgramUniform4iv = (Fn_glProgramUniform4iv)proc("glProgramUniform4iv");
			s_fn_glProgramUniform4f = (Fn_glProgramUniform4f)proc("glProgramUniform4f");
			s_fn_glProgramUniform4fv = (Fn_glProgramUniform4fv)proc("glProgramUniform4fv");
			s_fn_glProgramUniform4d = (Fn_glProgramUniform4d)proc("glProgramUniform4d");
			s_fn_glProgramUniform4dv = (Fn_glProgramUniform4dv)proc("glProgramUniform4dv");
			s_fn_glProgramUniform4ui = (Fn_glProgramUniform4ui)proc("glProgramUniform4ui");
			s_fn_glProgramUniform4uiv = (Fn_glProgramUniform4uiv)proc("glProgramUniform4uiv");
			s_fn_glProgramUniformMatrix2fv = (Fn_glProgramUniformMatrix2fv)proc("glProgramUniformMatrix2fv");
			s_fn_glProgramUniformMatrix3fv = (Fn_glProgramUniformMatrix3fv)proc("glProgramUniformMatrix3fv");
			s_fn_glProgramUniformMatrix4fv = (Fn_glProgramUniformMatrix4fv)proc("glProgramUniformMatrix4fv");
			s_fn_glProgramUniformMatrix2dv = (Fn_glProgramUniformMatrix2dv)proc("glProgramUniformMatrix2dv");
			s_fn_glProgramUniformMatrix3dv = (Fn_glProgramUniformMatrix3dv)proc("glProgramUniformMatrix3dv");
			s_fn_glProgramUniformMatrix4dv = (Fn_glProgramUniformMatrix4dv)proc("glProgramUniformMatrix4dv");
			s_fn_glProgramUniformMatrix2x3fv = (Fn_glProgramUniformMatrix2x3fv)proc("glProgramUniformMatrix2x3fv");
			s_fn_glProgramUniformMatrix3x2fv = (Fn_glProgramUniformMatrix3x2fv)proc("glProgramUniformMatrix3x2fv");
			s_fn_glProgramUniformMatrix2x4fv = (Fn_glProgramUniformMatrix2x4fv)proc("glProgramUniformMatrix2x4fv");
			s_fn_glProgramUniformMatrix4x2fv = (Fn_glProgramUniformMatrix4x2fv)proc("glProgramUniformMatrix4x2fv");
			s_fn_glProgramUniformMatrix3x4fv = (Fn_glProgramUniformMatrix3x4fv)proc("glProgramUniformMatrix3x4fv");
			s_fn_glProgramUniformMatrix4x3fv = (Fn_glProgramUniformMatrix4x3fv)proc("glProgramUniformMatrix4x3fv");
			s_fn_glProgramUniformMatrix2x3dv = (Fn_glProgramUniformMatrix2x3dv)proc("glProgramUniformMatrix2x3dv");
			s_fn_glProgramUniformMatrix3x2dv = (Fn_glProgramUniformMatrix3x2dv)proc("glProgramUniformMatrix3x2dv");
			s_fn_glProgramUniformMatrix2x4dv = (Fn_glProgramUniformMatrix2x4dv)proc("glProgramUniformMatrix2x4dv");
			s_fn_glProgramUniformMatrix4x2dv = (Fn_glProgramUniformMatrix4x2dv)proc("glProgramUniformMatrix4x2dv");
			s_fn_glProgramUniformMatrix3x4dv = (Fn_glProgramUniformMatrix3x4dv)proc("glProgramUniformMatrix3x4dv");
			s_fn_glProgramUniformMatrix4x3dv = (Fn_glProgramUniformMatrix4x3dv)proc("glProgramUniformMatrix4x3dv");
			s_fn_glValidateProgramPipeline = (Fn_glValidateProgramPipeline)proc("glValidateProgramPipeline");
			s_fn_glGetProgramPipelineInfoLog = (Fn_glGetProgramPipelineInfoLog)proc("glGetProgramPipelineInfoLog");
			s_fn_glVertexAttribL1d = (Fn_glVertexAttribL1d)proc("glVertexAttribL1d");
			s_fn_glVertexAttribL2d = (Fn_glVertexAttribL2d)proc("glVertexAttribL2d");
			s_fn_glVertexAttribL3d = (Fn_glVertexAttribL3d)proc("glVertexAttribL3d");
			s_fn_glVertexAttribL4d = (Fn_glVertexAttribL4d)proc("glVertexAttribL4d");
			s_fn_glVertexAttribL1dv = (Fn_glVertexAttribL1dv)proc("glVertexAttribL1dv");
			s_fn_glVertexAttribL2dv = (Fn_glVertexAttribL2dv)proc("glVertexAttribL2dv");
			s_fn_glVertexAttribL3dv = (Fn_glVertexAttribL3dv)proc("glVertexAttribL3dv");
			s_fn_glVertexAttribL4dv = (Fn_glVertexAttribL4dv)proc("glVertexAttribL4dv");
			s_fn_glVertexAttribLPointer = (Fn_glVertexAttribLPointer)proc("glVertexAttribLPointer");
			s_fn_glGetVertexAttribLdv = (Fn_glGetVertexAttribLdv)proc("glGetVertexAttribLdv");
			s_fn_glViewportArrayv = (Fn_glViewportArrayv)proc("glViewportArrayv");
			s_fn_glViewportIndexedf = (Fn_glViewportIndexedf)proc("glViewportIndexedf");
			s_fn_glViewportIndexedfv = (Fn_glViewportIndexedfv)proc("glViewportIndexedfv");
			s_fn_glScissorArrayv = (Fn_glScissorArrayv)proc("glScissorArrayv");
			s_fn_glScissorIndexed = (Fn_glScissorIndexed)proc("glScissorIndexed");
			s_fn_glScissorIndexedv = (Fn_glScissorIndexedv)proc("glScissorIndexedv");
			s_fn_glDepthRangeArrayv = (Fn_glDepthRangeArrayv)proc("glDepthRangeArrayv");
			s_fn_glDepthRangeIndexed = (Fn_glDepthRangeIndexed)proc("glDepthRangeIndexed");
			s_fn_glGetFloati_v = (Fn_glGetFloati_v)proc("glGetFloati_v");
			s_fn_glGetDoublei_v = (Fn_glGetDoublei_v)proc("glGetDoublei_v");
		}
		else return;

		if (initVersion >= Version {4, 2}) {
			s_fn_glDrawArraysInstancedBaseInstance = (Fn_glDrawArraysInstancedBaseInstance)proc("glDrawArraysInstancedBaseInstance");
			s_fn_glDrawElementsInstancedBaseInstance = (Fn_glDrawElementsInstancedBaseInstance)proc("glDrawElementsInstancedBaseInstance");
			s_fn_glDrawElementsInstancedBaseVertexBaseInstance = (Fn_glDrawElementsInstancedBaseVertexBaseInstance)proc("glDrawElementsInstancedBaseVertexBaseInstance");
			s_fn_glGetInternalformativ = (Fn_glGetInternalformativ)proc("glGetInternalformativ");
			s_fn_glGetActiveAtomicCounterBufferiv = (Fn_glGetActiveAtomicCounterBufferiv)proc("glGetActiveAtomicCounterBufferiv");
			s_fn_glBindImageTexture = (Fn_glBindImageTexture)proc("glBindImageTexture");
			s_fn_glMemoryBarrier = (Fn_glMemoryBarrier)proc("glMemoryBarrier");
			s_fn_glTexStorage1D = (Fn_glTexStorage1D)proc("glTexStorage1D");
			s_fn_glTexStorage2D = (Fn_glTexStorage2D)proc("glTexStorage2D");
			s_fn_glTexStorage3D = (Fn_glTexStorage3D)proc("glTexStorage3D");
			s_fn_glDrawTransformFeedbackInstanced = (Fn_glDrawTransformFeedbackInstanced)proc("glDrawTransformFeedbackInstanced");
			s_fn_glDrawTransformFeedbackStreamInstanced = (Fn_glDrawTransformFeedbackStreamInstanced)proc("glDrawTransformFeedbackStreamInstanced");
		}
		else return;

		if (initVersion >= Version {4, 3}) {
			s_fn_glClearBufferData = (Fn_glClearBufferData)proc("glClearBufferData");
			s_fn_glClearBufferSubData = (Fn_glClearBufferSubData)proc("glClearBufferSubData");
			s_fn_glDispatchCompute = (Fn_glDispatchCompute)proc("glDispatchCompute");
			s_fn_glDispatchComputeIndirect = (Fn_glDispatchComputeIndirect)proc("glDispatchComputeIndirect");
			s_fn_glCopyImageSubData = (Fn_glCopyImageSubData)proc("glCopyImageSubData");
			s_fn_glFramebufferParameteri = (Fn_glFramebufferParameteri)proc("glFramebufferParameteri");
			s_fn_glGetFramebufferParameteriv = (Fn_glGetFramebufferParameteriv)proc("glGetFramebufferParameteriv");
			s_fn_glGetInternalformati64v = (Fn_glGetInternalformati64v)proc("glGetInternalformati64v");
			s_fn_glInvalidateTexSubImage = (Fn_glInvalidateTexSubImage)proc("glInvalidateTexSubImage");
			s_fn_glInvalidateTexImage = (Fn_glInvalidateTexImage)proc("glInvalidateTexImage");
			s_fn_glInvalidateBufferSubData = (Fn_glInvalidateBufferSubData)proc("glInvalidateBufferSubData");
			s_fn_glInvalidateBufferData = (Fn_glInvalidateBufferData)proc("glInvalidateBufferData");
			s_fn_glInvalidateFramebuffer = (Fn_glInvalidateFramebuffer)proc("glInvalidateFramebuffer");
			s_fn_glInvalidateSubFramebuffer = (Fn_glInvalidateSubFramebuffer)proc("glInvalidateSubFramebuffer");
			s_fn_glMultiDrawArraysIndirect = (Fn_glMultiDrawArraysIndirect)proc("glMultiDrawArraysIndirect");
			s_fn_glMultiDrawElementsIndirect = (Fn_glMultiDrawElementsIndirect)proc("glMultiDrawElementsIndirect");
			s_fn_glGetProgramInterfaceiv = (Fn_glGetProgramInterfaceiv)proc("glGetProgramInterfaceiv");
			s_fn_glGetProgramResourceIndex = (Fn_glGetProgramResourceIndex)proc("glGetProgramResourceIndex");
			s_fn_glGetProgramResourceName = (Fn_glGetProgramResourceName)proc("glGetProgramResourceName");
			s_fn_glGetProgramResourceiv = (Fn_glGetProgramResourceiv)proc("glGetProgramResourceiv");
			s_fn_glGetProgramResourceLocation = (Fn_glGetProgramResourceLocation)proc("glGetProgramResourceLocation");
			s_fn_glGetProgramResourceLocationIndex = (Fn_glGetProgramResourceLocationIndex)proc("glGetProgramResourceLocationIndex");
			s_fn_glShaderStorageBlockBinding = (Fn_glShaderStorageBlockBinding)proc("glShaderStorageBlockBinding");
			s_fn_glTexBufferRange = (Fn_glTexBufferRange)proc("glTexBufferRange");
			s_fn_glTexStorage2DMultisample = (Fn_glTexStorage2DMultisample)proc("glTexStorage2DMultisample");
			s_fn_glTexStorage3DMultisample = (Fn_glTexStorage3DMultisample)proc("glTexStorage3DMultisample");
			s_fn_glTextureView = (Fn_glTextureView)proc("glTextureView");
			s_fn_glBindVertexBuffer = (Fn_glBindVertexBuffer)proc("glBindVertexBuffer");
			s_fn_glVertexAttribFormat = (Fn_glVertexAttribFormat)proc("glVertexAttribFormat");
			s_fn_glVertexAttribIFormat = (Fn_glVertexAttribIFormat)proc("glVertexAttribIFormat");
			s_fn_glVertexAttribLFormat = (Fn_glVertexAttribLFormat)proc("glVertexAttribLFormat");
			s_fn_glVertexAttribBinding = (Fn_glVertexAttribBinding)proc("glVertexAttribBinding");
			s_fn_glVertexBindingDivisor = (Fn_glVertexBindingDivisor)proc("glVertexBindingDivisor");
			s_fn_glDebugMessageControl = (Fn_glDebugMessageControl)proc("glDebugMessageControl");
			s_fn_glDebugMessageInsert = (Fn_glDebugMessageInsert)proc("glDebugMessageInsert");
			s_fn_glDebugMessageCallback = (Fn_glDebugMessageCallback)proc("glDebugMessageCallback");
			s_fn_glGetDebugMessageLog = (Fn_glGetDebugMessageLog)proc("glGetDebugMessageLog");
			s_fn_glPushDebugGroup = (Fn_glPushDebugGroup)proc("glPushDebugGroup");
			s_fn_glPopDebugGroup = (Fn_glPopDebugGroup)proc("glPopDebugGroup");
			s_fn_glObjectLabel = (Fn_glObjectLabel)proc("glObjectLabel");
			s_fn_glGetObjectLabel = (Fn_glGetObjectLabel)proc("glGetObjectLabel");
			s_fn_glObjectPtrLabel = (Fn_glObjectPtrLabel)proc("glObjectPtrLabel");
			s_fn_glGetObjectPtrLabel = (Fn_glGetObjectPtrLabel)proc("glGetObjectPtrLabel");
		}
		else return;

		if (initVersion >= Version {4, 4}) {
			s_fn_glBufferStorage = (Fn_glBufferStorage)proc("glBufferStorage");
			s_fn_glClearTexImage = (Fn_glClearTexImage)proc("glClearTexImage");
			s_fn_glClearTexSubImage = (Fn_glClearTexSubImage)proc("glClearTexSubImage");
			s_fn_glBindBuffersBase = (Fn_glBindBuffersBase)proc("glBindBuffersBase");
			s_fn_glBindBuffersRange = (Fn_glBindBuffersRange)proc("glBindBuffersRange");
			s_fn_glBindTextures = (Fn_glBindTextures)proc("glBindTextures");
			s_fn_glBindSamplers = (Fn_glBindSamplers)proc("glBindSamplers");
			s_fn_glBindImageTextures = (Fn_glBindImageTextures)proc("glBindImageTextures");
			s_fn_glBindVertexBuffers = (Fn_glBindVertexBuffers)proc("glBindVertexBuffers");
		}
		else return;

		if (initVersion >= Version {4, 5}) {
			s_fn_glClipControl = (Fn_glClipControl)proc("glClipControl");
			s_fn_glCreateTransformFeedbacks = (Fn_glCreateTransformFeedbacks)proc("glCreateTransformFeedbacks");
			s_fn_glTransformFeedbackBufferBase = (Fn_glTransformFeedbackBufferBase)proc("glTransformFeedbackBufferBase");
			s_fn_glTransformFeedbackBufferRange = (Fn_glTransformFeedbackBufferRange)proc("glTransformFeedbackBufferRange");
			s_fn_glGetTransformFeedbackiv = (Fn_glGetTransformFeedbackiv)proc("glGetTransformFeedbackiv");
			s_fn_glGetTransformFeedbacki_v = (Fn_glGetTransformFeedbacki_v)proc("glGetTransformFeedbacki_v");
			s_fn_glGetTransformFeedbacki64_v = (Fn_glGetTransformFeedbacki64_v)proc("glGetTransformFeedbacki64_v");
			s_fn_glCreateBuffers = (Fn_glCreateBuffers)proc("glCreateBuffers");
			s_fn_glNamedBufferStorage = (Fn_glNamedBufferStorage)proc("glNamedBufferStorage");
			s_fn_glNamedBufferData = (Fn_glNamedBufferData)proc("glNamedBufferData");
			s_fn_glNamedBufferSubData = (Fn_glNamedBufferSubData)proc("glNamedBufferSubData");
			s_fn_glCopyNamedBufferSubData = (Fn_glCopyNamedBufferSubData)proc("glCopyNamedBufferSubData");
			s_fn_glClearNamedBufferData = (Fn_glClearNamedBufferData)proc("glClearNamedBufferData");
			s_fn_glClearNamedBufferSubData = (Fn_glClearNamedBufferSubData)proc("glClearNamedBufferSubData");
			s_fn_glMapNamedBuffer = (Fn_glMapNamedBuffer)proc("glMapNamedBuffer");
			s_fn_glMapNamedBufferRange = (Fn_glMapNamedBufferRange)proc("glMapNamedBufferRange");
			s_fn_glUnmapNamedBuffer = (Fn_glUnmapNamedBuffer)proc("glUnmapNamedBuffer");
			s_fn_glFlushMappedNamedBufferRange = (Fn_glFlushMappedNamedBufferRange)proc("glFlushMappedNamedBufferRange");
			s_fn_glGetNamedBufferParameteriv = (Fn_glGetNamedBufferParameteriv)proc("glGetNamedBufferParameteriv");
			s_fn_glGetNamedBufferParameteri64v = (Fn_glGetNamedBufferParameteri64v)proc("glGetNamedBufferParameteri64v");
			s_fn_glGetNamedBufferPointerv = (Fn_glGetNamedBufferPointerv)proc("glGetNamedBufferPointerv");
			s_fn_glGetNamedBufferSubData = (Fn_glGetNamedBufferSubData)proc("glGetNamedBufferSubData");
			s_fn_glCreateFramebuffers = (Fn_glCreateFramebuffers)proc("glCreateFramebuffers");
			s_fn_glNamedFramebufferRenderbuffer = (Fn_glNamedFramebufferRenderbuffer)proc("glNamedFramebufferRenderbuffer");
			s_fn_glNamedFramebufferParameteri = (Fn_glNamedFramebufferParameteri)proc("glNamedFramebufferParameteri");
			s_fn_glNamedFramebufferTexture = (Fn_glNamedFramebufferTexture)proc("glNamedFramebufferTexture");
			s_fn_glNamedFramebufferTextureLayer = (Fn_glNamedFramebufferTextureLayer)proc("glNamedFramebufferTextureLayer");
			s_fn_glNamedFramebufferDrawBuffer = (Fn_glNamedFramebufferDrawBuffer)proc("glNamedFramebufferDrawBuffer");
			s_fn_glNamedFramebufferDrawBuffers = (Fn_glNamedFramebufferDrawBuffers)proc("glNamedFramebufferDrawBuffers");
			s_fn_glNamedFramebufferReadBuffer = (Fn_glNamedFramebufferReadBuffer)proc("glNamedFramebufferReadBuffer");
			s_fn_glInvalidateNamedFramebufferData = (Fn_glInvalidateNamedFramebufferData)proc("glInvalidateNamedFramebufferData");
			s_fn_glInvalidateNamedFramebufferSubData = (Fn_glInvalidateNamedFramebufferSubData)proc("glInvalidateNamedFramebufferSubData");
			s_fn_glClearNamedFramebufferiv = (Fn_glClearNamedFramebufferiv)proc("glClearNamedFramebufferiv");
			s_fn_glClearNamedFramebufferuiv = (Fn_glClearNamedFramebufferuiv)proc("glClearNamedFramebufferuiv");
			s_fn_glClearNamedFramebufferfv = (Fn_glClearNamedFramebufferfv)proc("glClearNamedFramebufferfv");
			s_fn_glClearNamedFramebufferfi = (Fn_glClearNamedFramebufferfi)proc("glClearNamedFramebufferfi");
			s_fn_glBlitNamedFramebuffer = (Fn_glBlitNamedFramebuffer)proc("glBlitNamedFramebuffer");
			s_fn_glCheckNamedFramebufferStatus = (Fn_glCheckNamedFramebufferStatus)proc("glCheckNamedFramebufferStatus");
			s_fn_glGetNamedFramebufferParameteriv = (Fn_glGetNamedFramebufferParameteriv)proc("glGetNamedFramebufferParameteriv");
			s_fn_glGetNamedFramebufferAttachmentParameteriv = (Fn_glGetNamedFramebufferAttachmentParameteriv)proc("glGetNamedFramebufferAttachmentParameteriv");
			s_fn_glCreateRenderbuffers = (Fn_glCreateRenderbuffers)proc("glCreateRenderbuffers");
			s_fn_glNamedRenderbufferStorage = (Fn_glNamedRenderbufferStorage)proc("glNamedRenderbufferStorage");
			s_fn_glNamedRenderbufferStorageMultisample = (Fn_glNamedRenderbufferStorageMultisample)proc("glNamedRenderbufferStorageMultisample");
			s_fn_glGetNamedRenderbufferParameteriv = (Fn_glGetNamedRenderbufferParameteriv)proc("glGetNamedRenderbufferParameteriv");
			s_fn_glCreateTextures = (Fn_glCreateTextures)proc("glCreateTextures");
			s_fn_glTextureBuffer = (Fn_glTextureBuffer)proc("glTextureBuffer");
			s_fn_glTextureBufferRange = (Fn_glTextureBufferRange)proc("glTextureBufferRange");
			s_fn_glTextureStorage1D = (Fn_glTextureStorage1D)proc("glTextureStorage1D");
			s_fn_glTextureStorage2D = (Fn_glTextureStorage2D)proc("glTextureStorage2D");
			s_fn_glTextureStorage3D = (Fn_glTextureStorage3D)proc("glTextureStorage3D");
			s_fn_glTextureStorage2DMultisample = (Fn_glTextureStorage2DMultisample)proc("glTextureStorage2DMultisample");
			s_fn_glTextureStorage3DMultisample = (Fn_glTextureStorage3DMultisample)proc("glTextureStorage3DMultisample");
			s_fn_glTextureSubImage1D = (Fn_glTextureSubImage1D)proc("glTextureSubImage1D");
			s_fn_glTextureSubImage2D = (Fn_glTextureSubImage2D)proc("glTextureSubImage2D");
			s_fn_glTextureSubImage3D = (Fn_glTextureSubImage3D)proc("glTextureSubImage3D");
			s_fn_glCompressedTextureSubImage1D = (Fn_glCompressedTextureSubImage1D)proc("glCompressedTextureSubImage1D");
			s_fn_glCompressedTextureSubImage2D = (Fn_glCompressedTextureSubImage2D)proc("glCompressedTextureSubImage2D");
			s_fn_glCompressedTextureSubImage3D = (Fn_glCompressedTextureSubImage3D)proc("glCompressedTextureSubImage3D");
			s_fn_glCopyTextureSubImage1D = (Fn_glCopyTextureSubImage1D)proc("glCopyTextureSubImage1D");
			s_fn_glCopyTextureSubImage2D = (Fn_glCopyTextureSubImage2D)proc("glCopyTextureSubImage2D");
			s_fn_glCopyTextureSubImage3D = (Fn_glCopyTextureSubImage3D)proc("glCopyTextureSubImage3D");
			s_fn_glTextureParameterf = (Fn_glTextureParameterf)proc("glTextureParameterf");
			s_fn_glTextureParameterfv = (Fn_glTextureParameterfv)proc("glTextureParameterfv");
			s_fn_glTextureParameteri = (Fn_glTextureParameteri)proc("glTextureParameteri");
			s_fn_glTextureParameterIiv = (Fn_glTextureParameterIiv)proc("glTextureParameterIiv");
			s_fn_glTextureParameterIuiv = (Fn_glTextureParameterIuiv)proc("glTextureParameterIuiv");
			s_fn_glTextureParameteriv = (Fn_glTextureParameteriv)proc("glTextureParameteriv");
			s_fn_glGenerateTextureMipmap = (Fn_glGenerateTextureMipmap)proc("glGenerateTextureMipmap");
			s_fn_glBindTextureUnit = (Fn_glBindTextureUnit)proc("glBindTextureUnit");
			s_fn_glGetTextureImage = (Fn_glGetTextureImage)proc("glGetTextureImage");
			s_fn_glGetCompressedTextureImage = (Fn_glGetCompressedTextureImage)proc("glGetCompressedTextureImage");
			s_fn_glGetTextureLevelParameterfv = (Fn_glGetTextureLevelParameterfv)proc("glGetTextureLevelParameterfv");
			s_fn_glGetTextureLevelParameteriv = (Fn_glGetTextureLevelParameteriv)proc("glGetTextureLevelParameteriv");
			s_fn_glGetTextureParameterfv = (Fn_glGetTextureParameterfv)proc("glGetTextureParameterfv");
			s_fn_glGetTextureParameterIiv = (Fn_glGetTextureParameterIiv)proc("glGetTextureParameterIiv");
			s_fn_glGetTextureParameterIuiv = (Fn_glGetTextureParameterIuiv)proc("glGetTextureParameterIuiv");
			s_fn_glGetTextureParameteriv = (Fn_glGetTextureParameteriv)proc("glGetTextureParameteriv");
			s_fn_glCreateVertexArrays = (Fn_glCreateVertexArrays)proc("glCreateVertexArrays");
			s_fn_glDisableVertexArrayAttrib = (Fn_glDisableVertexArrayAttrib)proc("glDisableVertexArrayAttrib");
			s_fn_glEnableVertexArrayAttrib = (Fn_glEnableVertexArrayAttrib)proc("glEnableVertexArrayAttrib");
			s_fn_glVertexArrayElementBuffer = (Fn_glVertexArrayElementBuffer)proc("glVertexArrayElementBuffer");
			s_fn_glVertexArrayVertexBuffer = (Fn_glVertexArrayVertexBuffer)proc("glVertexArrayVertexBuffer");
			s_fn_glVertexArrayVertexBuffers = (Fn_glVertexArrayVertexBuffers)proc("glVertexArrayVertexBuffers");
			s_fn_glVertexArrayAttribBinding = (Fn_glVertexArrayAttribBinding)proc("glVertexArrayAttribBinding");
			s_fn_glVertexArrayAttribFormat = (Fn_glVertexArrayAttribFormat)proc("glVertexArrayAttribFormat");
			s_fn_glVertexArrayAttribIFormat = (Fn_glVertexArrayAttribIFormat)proc("glVertexArrayAttribIFormat");
			s_fn_glVertexArrayAttribLFormat = (Fn_glVertexArrayAttribLFormat)proc("glVertexArrayAttribLFormat");
			s_fn_glVertexArrayBindingDivisor = (Fn_glVertexArrayBindingDivisor)proc("glVertexArrayBindingDivisor");
			s_fn_glGetVertexArrayiv = (Fn_glGetVertexArrayiv)proc("glGetVertexArrayiv");
			s_fn_glGetVertexArrayIndexediv = (Fn_glGetVertexArrayIndexediv)proc("glGetVertexArrayIndexediv");
			s_fn_glGetVertexArrayIndexed64iv = (Fn_glGetVertexArrayIndexed64iv)proc("glGetVertexArrayIndexed64iv");
			s_fn_glCreateSamplers = (Fn_glCreateSamplers)proc("glCreateSamplers");
			s_fn_glCreateProgramPipelines = (Fn_glCreateProgramPipelines)proc("glCreateProgramPipelines");
			s_fn_glCreateQueries = (Fn_glCreateQueries)proc("glCreateQueries");
			s_fn_glGetQueryBufferObjecti64v = (Fn_glGetQueryBufferObjecti64v)proc("glGetQueryBufferObjecti64v");
			s_fn_glGetQueryBufferObjectiv = (Fn_glGetQueryBufferObjectiv)proc("glGetQueryBufferObjectiv");
			s_fn_glGetQueryBufferObjectui64v = (Fn_glGetQueryBufferObjectui64v)proc("glGetQueryBufferObjectui64v");
			s_fn_glGetQueryBufferObjectuiv = (Fn_glGetQueryBufferObjectuiv)proc("glGetQueryBufferObjectuiv");
			s_fn_glMemoryBarrierByRegion = (Fn_glMemoryBarrierByRegion)proc("glMemoryBarrierByRegion");
			s_fn_glGetTextureSubImage = (Fn_glGetTextureSubImage)proc("glGetTextureSubImage");
			s_fn_glGetCompressedTextureSubImage = (Fn_glGetCompressedTextureSubImage)proc("glGetCompressedTextureSubImage");
			s_fn_glGetGraphicsResetStatus = (Fn_glGetGraphicsResetStatus)proc("glGetGraphicsResetStatus");
			s_fn_glGetnCompressedTexImage = (Fn_glGetnCompressedTexImage)proc("glGetnCompressedTexImage");
			s_fn_glGetnTexImage = (Fn_glGetnTexImage)proc("glGetnTexImage");
			s_fn_glGetnUniformdv = (Fn_glGetnUniformdv)proc("glGetnUniformdv");
			s_fn_glGetnUniformfv = (Fn_glGetnUniformfv)proc("glGetnUniformfv");
			s_fn_glGetnUniformiv = (Fn_glGetnUniformiv)proc("glGetnUniformiv");
			s_fn_glGetnUniformuiv = (Fn_glGetnUniformuiv)proc("glGetnUniformuiv");
			s_fn_glReadnPixels = (Fn_glReadnPixels)proc("glReadnPixels");
			s_fn_glGetnMapdv = (Fn_glGetnMapdv)proc("glGetnMapdv");
			s_fn_glGetnMapfv = (Fn_glGetnMapfv)proc("glGetnMapfv");
			s_fn_glGetnMapiv = (Fn_glGetnMapiv)proc("glGetnMapiv");
			s_fn_glGetnPixelMapfv = (Fn_glGetnPixelMapfv)proc("glGetnPixelMapfv");
			s_fn_glGetnPixelMapuiv = (Fn_glGetnPixelMapuiv)proc("glGetnPixelMapuiv");
			s_fn_glGetnPixelMapusv = (Fn_glGetnPixelMapusv)proc("glGetnPixelMapusv");
			s_fn_glGetnPolygonStipple = (Fn_glGetnPolygonStipple)proc("glGetnPolygonStipple");
			s_fn_glGetnColorTable = (Fn_glGetnColorTable)proc("glGetnColorTable");
			s_fn_glGetnConvolutionFilter = (Fn_glGetnConvolutionFilter)proc("glGetnConvolutionFilter");
			s_fn_glGetnSeparableFilter = (Fn_glGetnSeparableFilter)proc("glGetnSeparableFilter");
			s_fn_glGetnHistogram = (Fn_glGetnHistogram)proc("glGetnHistogram");
			s_fn_glGetnMinmax = (Fn_glGetnMinmax)proc("glGetnMinmax");
			s_fn_glTextureBarrier = (Fn_glTextureBarrier)proc("glTextureBarrier");
		}
		else return;

		if (initVersion >= Version {4, 6}) {
			s_fn_glSpecializeShader = (Fn_glSpecializeShader)proc("glSpecializeShader");
			s_fn_glMultiDrawArraysIndirectCount = (Fn_glMultiDrawArraysIndirectCount)proc("glMultiDrawArraysIndirectCount");
			s_fn_glMultiDrawElementsIndirectCount = (Fn_glMultiDrawElementsIndirectCount)proc("glMultiDrawElementsIndirectCount");
			s_fn_glPolygonOffsetClamp = (Fn_glPolygonOffsetClamp)proc("glPolygonOffsetClamp");
		}
		else return;
	}
}

extern "C" {
	inline void glCullFace(GLenum mode) { return HLF::GL::s_fn_glCullFace(mode); }
	inline void glFrontFace(GLenum mode) { return HLF::GL::s_fn_glFrontFace(mode); }
	inline void glHint(GLenum target, GLenum mode) { return HLF::GL::s_fn_glHint(target, mode); }
	inline void glLineWidth(GLfloat width) { return HLF::GL::s_fn_glLineWidth(width); }
	inline void glPointSize(GLfloat size) { return HLF::GL::s_fn_glPointSize(size); }
	inline void glPolygonMode(GLenum face, GLenum mode) { return HLF::GL::s_fn_glPolygonMode(face, mode); }
	inline void glScissor(GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glScissor(x, y, width, height); }
	inline void glTexParameterf(GLenum target, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glTexParameterf(target, pname, param); }
	inline void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glTexParameterfv(target, pname, params); }
	inline void glTexParameteri(GLenum target, GLenum pname, GLint param) { return HLF::GL::s_fn_glTexParameteri(target, pname, param); }
	inline void glTexParameteriv(GLenum target, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glTexParameteriv(target, pname, params); }
	inline void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTexImage1D(target, level, internalformat, width, border, format, type, pixels); }
	inline void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
	inline void glDrawBuffer(GLenum buf) { return HLF::GL::s_fn_glDrawBuffer(buf); }
	inline void glClear(GLbitfield mask) { return HLF::GL::s_fn_glClear(mask); }
	inline void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return HLF::GL::s_fn_glClearColor(red, green, blue, alpha); }
	inline void glClearStencil(GLint s) { return HLF::GL::s_fn_glClearStencil(s); }
	inline void glClearDepth(GLdouble depth) { return HLF::GL::s_fn_glClearDepth(depth); }
	inline void glStencilMask(GLuint mask) { return HLF::GL::s_fn_glStencilMask(mask); }
	inline void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { return HLF::GL::s_fn_glColorMask(red, green, blue, alpha); }
	inline void glDepthMask(GLboolean flag) { return HLF::GL::s_fn_glDepthMask(flag); }
	inline void glDisable(GLenum cap) { return HLF::GL::s_fn_glDisable(cap); }
	inline void glEnable(GLenum cap) { return HLF::GL::s_fn_glEnable(cap); }
	inline void glFinish() { return HLF::GL::s_fn_glFinish(); }
	inline void glFlush() { return HLF::GL::s_fn_glFlush(); }
	inline void glBlendFunc(GLenum sfactor, GLenum dfactor) { return HLF::GL::s_fn_glBlendFunc(sfactor, dfactor); }
	inline void glLogicOp(GLenum opcode) { return HLF::GL::s_fn_glLogicOp(opcode); }
	inline void glStencilFunc(GLenum func, GLint ref, GLuint mask) { return HLF::GL::s_fn_glStencilFunc(func, ref, mask); }
	inline void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { return HLF::GL::s_fn_glStencilOp(fail, zfail, zpass); }
	inline void glDepthFunc(GLenum func) { return HLF::GL::s_fn_glDepthFunc(func); }
	inline void glPixelStoref(GLenum pname, GLfloat param) { return HLF::GL::s_fn_glPixelStoref(pname, param); }
	inline void glPixelStorei(GLenum pname, GLint param) { return HLF::GL::s_fn_glPixelStorei(pname, param); }
	inline void glReadBuffer(GLenum src) { return HLF::GL::s_fn_glReadBuffer(src); }
	inline void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { return HLF::GL::s_fn_glReadPixels(x, y, width, height, format, type, pixels); }
	inline void glGetBooleanv(GLenum pname, GLboolean * data) { return HLF::GL::s_fn_glGetBooleanv(pname, data); }
	inline void glGetDoublev(GLenum pname, GLdouble * data) { return HLF::GL::s_fn_glGetDoublev(pname, data); }
	inline GLenum glGetError() { return HLF::GL::s_fn_glGetError(); }
	inline void glGetFloatv(GLenum pname, GLfloat * data) { return HLF::GL::s_fn_glGetFloatv(pname, data); }
	inline void glGetIntegerv(GLenum pname, GLint * data) { return HLF::GL::s_fn_glGetIntegerv(pname, data); }
	inline const GLubyte * glGetString(GLenum name) { return HLF::GL::s_fn_glGetString(name); }
	inline void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { return HLF::GL::s_fn_glGetTexImage(target, level, format, type, pixels); }
	inline void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetTexParameterfv(target, pname, params); }
	inline void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTexParameteriv(target, pname, params); }
	inline void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetTexLevelParameterfv(target, level, pname, params); }
	inline void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTexLevelParameteriv(target, level, pname, params); }
	inline GLboolean glIsEnabled(GLenum cap) { return HLF::GL::s_fn_glIsEnabled(cap); }
	inline void glDepthRange(GLdouble n, GLdouble f) { return HLF::GL::s_fn_glDepthRange(n, f); }
	inline void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glViewport(x, y, width, height); }
	inline void glNewList(GLuint list, GLenum mode) { return HLF::GL::s_fn_glNewList(list, mode); }
	inline void glEndList() { return HLF::GL::s_fn_glEndList(); }
	inline void glCallList(GLuint list) { return HLF::GL::s_fn_glCallList(list); }
	inline void glCallLists(GLsizei n, GLenum type, const void * lists) { return HLF::GL::s_fn_glCallLists(n, type, lists); }
	inline void glDeleteLists(GLuint list, GLsizei range) { return HLF::GL::s_fn_glDeleteLists(list, range); }
	inline GLuint glGenLists(GLsizei range) { return HLF::GL::s_fn_glGenLists(range); }
	inline void glListBase(GLuint base) { return HLF::GL::s_fn_glListBase(base); }
	inline void glBegin(GLenum mode) { return HLF::GL::s_fn_glBegin(mode); }
	inline void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { return HLF::GL::s_fn_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap); }
	inline void glColor3b(GLbyte red, GLbyte green, GLbyte blue) { return HLF::GL::s_fn_glColor3b(red, green, blue); }
	inline void glColor3bv(const GLbyte * v) { return HLF::GL::s_fn_glColor3bv(v); }
	inline void glColor3d(GLdouble red, GLdouble green, GLdouble blue) { return HLF::GL::s_fn_glColor3d(red, green, blue); }
	inline void glColor3dv(const GLdouble * v) { return HLF::GL::s_fn_glColor3dv(v); }
	inline void glColor3f(GLfloat red, GLfloat green, GLfloat blue) { return HLF::GL::s_fn_glColor3f(red, green, blue); }
	inline void glColor3fv(const GLfloat * v) { return HLF::GL::s_fn_glColor3fv(v); }
	inline void glColor3i(GLint red, GLint green, GLint blue) { return HLF::GL::s_fn_glColor3i(red, green, blue); }
	inline void glColor3iv(const GLint * v) { return HLF::GL::s_fn_glColor3iv(v); }
	inline void glColor3s(GLshort red, GLshort green, GLshort blue) { return HLF::GL::s_fn_glColor3s(red, green, blue); }
	inline void glColor3sv(const GLshort * v) { return HLF::GL::s_fn_glColor3sv(v); }
	inline void glColor3ub(GLubyte red, GLubyte green, GLubyte blue) { return HLF::GL::s_fn_glColor3ub(red, green, blue); }
	inline void glColor3ubv(const GLubyte * v) { return HLF::GL::s_fn_glColor3ubv(v); }
	inline void glColor3ui(GLuint red, GLuint green, GLuint blue) { return HLF::GL::s_fn_glColor3ui(red, green, blue); }
	inline void glColor3uiv(const GLuint * v) { return HLF::GL::s_fn_glColor3uiv(v); }
	inline void glColor3us(GLushort red, GLushort green, GLushort blue) { return HLF::GL::s_fn_glColor3us(red, green, blue); }
	inline void glColor3usv(const GLushort * v) { return HLF::GL::s_fn_glColor3usv(v); }
	inline void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { return HLF::GL::s_fn_glColor4b(red, green, blue, alpha); }
	inline void glColor4bv(const GLbyte * v) { return HLF::GL::s_fn_glColor4bv(v); }
	inline void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { return HLF::GL::s_fn_glColor4d(red, green, blue, alpha); }
	inline void glColor4dv(const GLdouble * v) { return HLF::GL::s_fn_glColor4dv(v); }
	inline void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return HLF::GL::s_fn_glColor4f(red, green, blue, alpha); }
	inline void glColor4fv(const GLfloat * v) { return HLF::GL::s_fn_glColor4fv(v); }
	inline void glColor4i(GLint red, GLint green, GLint blue, GLint alpha) { return HLF::GL::s_fn_glColor4i(red, green, blue, alpha); }
	inline void glColor4iv(const GLint * v) { return HLF::GL::s_fn_glColor4iv(v); }
	inline void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) { return HLF::GL::s_fn_glColor4s(red, green, blue, alpha); }
	inline void glColor4sv(const GLshort * v) { return HLF::GL::s_fn_glColor4sv(v); }
	inline void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { return HLF::GL::s_fn_glColor4ub(red, green, blue, alpha); }
	inline void glColor4ubv(const GLubyte * v) { return HLF::GL::s_fn_glColor4ubv(v); }
	inline void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) { return HLF::GL::s_fn_glColor4ui(red, green, blue, alpha); }
	inline void glColor4uiv(const GLuint * v) { return HLF::GL::s_fn_glColor4uiv(v); }
	inline void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) { return HLF::GL::s_fn_glColor4us(red, green, blue, alpha); }
	inline void glColor4usv(const GLushort * v) { return HLF::GL::s_fn_glColor4usv(v); }
	inline void glEdgeFlag(GLboolean flag) { return HLF::GL::s_fn_glEdgeFlag(flag); }
	inline void glEdgeFlagv(const GLboolean * flag) { return HLF::GL::s_fn_glEdgeFlagv(flag); }
	inline void glEnd() { return HLF::GL::s_fn_glEnd(); }
	inline void glIndexd(GLdouble c) { return HLF::GL::s_fn_glIndexd(c); }
	inline void glIndexdv(const GLdouble * c) { return HLF::GL::s_fn_glIndexdv(c); }
	inline void glIndexf(GLfloat c) { return HLF::GL::s_fn_glIndexf(c); }
	inline void glIndexfv(const GLfloat * c) { return HLF::GL::s_fn_glIndexfv(c); }
	inline void glIndexi(GLint c) { return HLF::GL::s_fn_glIndexi(c); }
	inline void glIndexiv(const GLint * c) { return HLF::GL::s_fn_glIndexiv(c); }
	inline void glIndexs(GLshort c) { return HLF::GL::s_fn_glIndexs(c); }
	inline void glIndexsv(const GLshort * c) { return HLF::GL::s_fn_glIndexsv(c); }
	inline void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) { return HLF::GL::s_fn_glNormal3b(nx, ny, nz); }
	inline void glNormal3bv(const GLbyte * v) { return HLF::GL::s_fn_glNormal3bv(v); }
	inline void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) { return HLF::GL::s_fn_glNormal3d(nx, ny, nz); }
	inline void glNormal3dv(const GLdouble * v) { return HLF::GL::s_fn_glNormal3dv(v); }
	inline void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) { return HLF::GL::s_fn_glNormal3f(nx, ny, nz); }
	inline void glNormal3fv(const GLfloat * v) { return HLF::GL::s_fn_glNormal3fv(v); }
	inline void glNormal3i(GLint nx, GLint ny, GLint nz) { return HLF::GL::s_fn_glNormal3i(nx, ny, nz); }
	inline void glNormal3iv(const GLint * v) { return HLF::GL::s_fn_glNormal3iv(v); }
	inline void glNormal3s(GLshort nx, GLshort ny, GLshort nz) { return HLF::GL::s_fn_glNormal3s(nx, ny, nz); }
	inline void glNormal3sv(const GLshort * v) { return HLF::GL::s_fn_glNormal3sv(v); }
	inline void glRasterPos2d(GLdouble x, GLdouble y) { return HLF::GL::s_fn_glRasterPos2d(x, y); }
	inline void glRasterPos2dv(const GLdouble * v) { return HLF::GL::s_fn_glRasterPos2dv(v); }
	inline void glRasterPos2f(GLfloat x, GLfloat y) { return HLF::GL::s_fn_glRasterPos2f(x, y); }
	inline void glRasterPos2fv(const GLfloat * v) { return HLF::GL::s_fn_glRasterPos2fv(v); }
	inline void glRasterPos2i(GLint x, GLint y) { return HLF::GL::s_fn_glRasterPos2i(x, y); }
	inline void glRasterPos2iv(const GLint * v) { return HLF::GL::s_fn_glRasterPos2iv(v); }
	inline void glRasterPos2s(GLshort x, GLshort y) { return HLF::GL::s_fn_glRasterPos2s(x, y); }
	inline void glRasterPos2sv(const GLshort * v) { return HLF::GL::s_fn_glRasterPos2sv(v); }
	inline void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glRasterPos3d(x, y, z); }
	inline void glRasterPos3dv(const GLdouble * v) { return HLF::GL::s_fn_glRasterPos3dv(v); }
	inline void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glRasterPos3f(x, y, z); }
	inline void glRasterPos3fv(const GLfloat * v) { return HLF::GL::s_fn_glRasterPos3fv(v); }
	inline void glRasterPos3i(GLint x, GLint y, GLint z) { return HLF::GL::s_fn_glRasterPos3i(x, y, z); }
	inline void glRasterPos3iv(const GLint * v) { return HLF::GL::s_fn_glRasterPos3iv(v); }
	inline void glRasterPos3s(GLshort x, GLshort y, GLshort z) { return HLF::GL::s_fn_glRasterPos3s(x, y, z); }
	inline void glRasterPos3sv(const GLshort * v) { return HLF::GL::s_fn_glRasterPos3sv(v); }
	inline void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return HLF::GL::s_fn_glRasterPos4d(x, y, z, w); }
	inline void glRasterPos4dv(const GLdouble * v) { return HLF::GL::s_fn_glRasterPos4dv(v); }
	inline void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return HLF::GL::s_fn_glRasterPos4f(x, y, z, w); }
	inline void glRasterPos4fv(const GLfloat * v) { return HLF::GL::s_fn_glRasterPos4fv(v); }
	inline void glRasterPos4i(GLint x, GLint y, GLint z, GLint w) { return HLF::GL::s_fn_glRasterPos4i(x, y, z, w); }
	inline void glRasterPos4iv(const GLint * v) { return HLF::GL::s_fn_glRasterPos4iv(v); }
	inline void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) { return HLF::GL::s_fn_glRasterPos4s(x, y, z, w); }
	inline void glRasterPos4sv(const GLshort * v) { return HLF::GL::s_fn_glRasterPos4sv(v); }
	inline void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { return HLF::GL::s_fn_glRectd(x1, y1, x2, y2); }
	inline void glRectdv(const GLdouble * v1, const GLdouble * v2) { return HLF::GL::s_fn_glRectdv(v1, v2); }
	inline void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { return HLF::GL::s_fn_glRectf(x1, y1, x2, y2); }
	inline void glRectfv(const GLfloat * v1, const GLfloat * v2) { return HLF::GL::s_fn_glRectfv(v1, v2); }
	inline void glRecti(GLint x1, GLint y1, GLint x2, GLint y2) { return HLF::GL::s_fn_glRecti(x1, y1, x2, y2); }
	inline void glRectiv(const GLint * v1, const GLint * v2) { return HLF::GL::s_fn_glRectiv(v1, v2); }
	inline void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) { return HLF::GL::s_fn_glRects(x1, y1, x2, y2); }
	inline void glRectsv(const GLshort * v1, const GLshort * v2) { return HLF::GL::s_fn_glRectsv(v1, v2); }
	inline void glTexCoord1d(GLdouble s) { return HLF::GL::s_fn_glTexCoord1d(s); }
	inline void glTexCoord1dv(const GLdouble * v) { return HLF::GL::s_fn_glTexCoord1dv(v); }
	inline void glTexCoord1f(GLfloat s) { return HLF::GL::s_fn_glTexCoord1f(s); }
	inline void glTexCoord1fv(const GLfloat * v) { return HLF::GL::s_fn_glTexCoord1fv(v); }
	inline void glTexCoord1i(GLint s) { return HLF::GL::s_fn_glTexCoord1i(s); }
	inline void glTexCoord1iv(const GLint * v) { return HLF::GL::s_fn_glTexCoord1iv(v); }
	inline void glTexCoord1s(GLshort s) { return HLF::GL::s_fn_glTexCoord1s(s); }
	inline void glTexCoord1sv(const GLshort * v) { return HLF::GL::s_fn_glTexCoord1sv(v); }
	inline void glTexCoord2d(GLdouble s, GLdouble t) { return HLF::GL::s_fn_glTexCoord2d(s, t); }
	inline void glTexCoord2dv(const GLdouble * v) { return HLF::GL::s_fn_glTexCoord2dv(v); }
	inline void glTexCoord2f(GLfloat s, GLfloat t) { return HLF::GL::s_fn_glTexCoord2f(s, t); }
	inline void glTexCoord2fv(const GLfloat * v) { return HLF::GL::s_fn_glTexCoord2fv(v); }
	inline void glTexCoord2i(GLint s, GLint t) { return HLF::GL::s_fn_glTexCoord2i(s, t); }
	inline void glTexCoord2iv(const GLint * v) { return HLF::GL::s_fn_glTexCoord2iv(v); }
	inline void glTexCoord2s(GLshort s, GLshort t) { return HLF::GL::s_fn_glTexCoord2s(s, t); }
	inline void glTexCoord2sv(const GLshort * v) { return HLF::GL::s_fn_glTexCoord2sv(v); }
	inline void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) { return HLF::GL::s_fn_glTexCoord3d(s, t, r); }
	inline void glTexCoord3dv(const GLdouble * v) { return HLF::GL::s_fn_glTexCoord3dv(v); }
	inline void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) { return HLF::GL::s_fn_glTexCoord3f(s, t, r); }
	inline void glTexCoord3fv(const GLfloat * v) { return HLF::GL::s_fn_glTexCoord3fv(v); }
	inline void glTexCoord3i(GLint s, GLint t, GLint r) { return HLF::GL::s_fn_glTexCoord3i(s, t, r); }
	inline void glTexCoord3iv(const GLint * v) { return HLF::GL::s_fn_glTexCoord3iv(v); }
	inline void glTexCoord3s(GLshort s, GLshort t, GLshort r) { return HLF::GL::s_fn_glTexCoord3s(s, t, r); }
	inline void glTexCoord3sv(const GLshort * v) { return HLF::GL::s_fn_glTexCoord3sv(v); }
	inline void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) { return HLF::GL::s_fn_glTexCoord4d(s, t, r, q); }
	inline void glTexCoord4dv(const GLdouble * v) { return HLF::GL::s_fn_glTexCoord4dv(v); }
	inline void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) { return HLF::GL::s_fn_glTexCoord4f(s, t, r, q); }
	inline void glTexCoord4fv(const GLfloat * v) { return HLF::GL::s_fn_glTexCoord4fv(v); }
	inline void glTexCoord4i(GLint s, GLint t, GLint r, GLint q) { return HLF::GL::s_fn_glTexCoord4i(s, t, r, q); }
	inline void glTexCoord4iv(const GLint * v) { return HLF::GL::s_fn_glTexCoord4iv(v); }
	inline void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) { return HLF::GL::s_fn_glTexCoord4s(s, t, r, q); }
	inline void glTexCoord4sv(const GLshort * v) { return HLF::GL::s_fn_glTexCoord4sv(v); }
	inline void glVertex2d(GLdouble x, GLdouble y) { return HLF::GL::s_fn_glVertex2d(x, y); }
	inline void glVertex2dv(const GLdouble * v) { return HLF::GL::s_fn_glVertex2dv(v); }
	inline void glVertex2f(GLfloat x, GLfloat y) { return HLF::GL::s_fn_glVertex2f(x, y); }
	inline void glVertex2fv(const GLfloat * v) { return HLF::GL::s_fn_glVertex2fv(v); }
	inline void glVertex2i(GLint x, GLint y) { return HLF::GL::s_fn_glVertex2i(x, y); }
	inline void glVertex2iv(const GLint * v) { return HLF::GL::s_fn_glVertex2iv(v); }
	inline void glVertex2s(GLshort x, GLshort y) { return HLF::GL::s_fn_glVertex2s(x, y); }
	inline void glVertex2sv(const GLshort * v) { return HLF::GL::s_fn_glVertex2sv(v); }
	inline void glVertex3d(GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glVertex3d(x, y, z); }
	inline void glVertex3dv(const GLdouble * v) { return HLF::GL::s_fn_glVertex3dv(v); }
	inline void glVertex3f(GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glVertex3f(x, y, z); }
	inline void glVertex3fv(const GLfloat * v) { return HLF::GL::s_fn_glVertex3fv(v); }
	inline void glVertex3i(GLint x, GLint y, GLint z) { return HLF::GL::s_fn_glVertex3i(x, y, z); }
	inline void glVertex3iv(const GLint * v) { return HLF::GL::s_fn_glVertex3iv(v); }
	inline void glVertex3s(GLshort x, GLshort y, GLshort z) { return HLF::GL::s_fn_glVertex3s(x, y, z); }
	inline void glVertex3sv(const GLshort * v) { return HLF::GL::s_fn_glVertex3sv(v); }
	inline void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return HLF::GL::s_fn_glVertex4d(x, y, z, w); }
	inline void glVertex4dv(const GLdouble * v) { return HLF::GL::s_fn_glVertex4dv(v); }
	inline void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return HLF::GL::s_fn_glVertex4f(x, y, z, w); }
	inline void glVertex4fv(const GLfloat * v) { return HLF::GL::s_fn_glVertex4fv(v); }
	inline void glVertex4i(GLint x, GLint y, GLint z, GLint w) { return HLF::GL::s_fn_glVertex4i(x, y, z, w); }
	inline void glVertex4iv(const GLint * v) { return HLF::GL::s_fn_glVertex4iv(v); }
	inline void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) { return HLF::GL::s_fn_glVertex4s(x, y, z, w); }
	inline void glVertex4sv(const GLshort * v) { return HLF::GL::s_fn_glVertex4sv(v); }
	inline void glClipPlane(GLenum plane, const GLdouble * equation) { return HLF::GL::s_fn_glClipPlane(plane, equation); }
	inline void glColorMaterial(GLenum face, GLenum mode) { return HLF::GL::s_fn_glColorMaterial(face, mode); }
	inline void glFogf(GLenum pname, GLfloat param) { return HLF::GL::s_fn_glFogf(pname, param); }
	inline void glFogfv(GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glFogfv(pname, params); }
	inline void glFogi(GLenum pname, GLint param) { return HLF::GL::s_fn_glFogi(pname, param); }
	inline void glFogiv(GLenum pname, const GLint * params) { return HLF::GL::s_fn_glFogiv(pname, params); }
	inline void glLightf(GLenum light, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glLightf(light, pname, param); }
	inline void glLightfv(GLenum light, GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glLightfv(light, pname, params); }
	inline void glLighti(GLenum light, GLenum pname, GLint param) { return HLF::GL::s_fn_glLighti(light, pname, param); }
	inline void glLightiv(GLenum light, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glLightiv(light, pname, params); }
	inline void glLightModelf(GLenum pname, GLfloat param) { return HLF::GL::s_fn_glLightModelf(pname, param); }
	inline void glLightModelfv(GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glLightModelfv(pname, params); }
	inline void glLightModeli(GLenum pname, GLint param) { return HLF::GL::s_fn_glLightModeli(pname, param); }
	inline void glLightModeliv(GLenum pname, const GLint * params) { return HLF::GL::s_fn_glLightModeliv(pname, params); }
	inline void glLineStipple(GLint factor, GLushort pattern) { return HLF::GL::s_fn_glLineStipple(factor, pattern); }
	inline void glMaterialf(GLenum face, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glMaterialf(face, pname, param); }
	inline void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glMaterialfv(face, pname, params); }
	inline void glMateriali(GLenum face, GLenum pname, GLint param) { return HLF::GL::s_fn_glMateriali(face, pname, param); }
	inline void glMaterialiv(GLenum face, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glMaterialiv(face, pname, params); }
	inline void glPolygonStipple(const GLubyte * mask) { return HLF::GL::s_fn_glPolygonStipple(mask); }
	inline void glShadeModel(GLenum mode) { return HLF::GL::s_fn_glShadeModel(mode); }
	inline void glTexEnvf(GLenum target, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glTexEnvf(target, pname, param); }
	inline void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glTexEnvfv(target, pname, params); }
	inline void glTexEnvi(GLenum target, GLenum pname, GLint param) { return HLF::GL::s_fn_glTexEnvi(target, pname, param); }
	inline void glTexEnviv(GLenum target, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glTexEnviv(target, pname, params); }
	inline void glTexGend(GLenum coord, GLenum pname, GLdouble param) { return HLF::GL::s_fn_glTexGend(coord, pname, param); }
	inline void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) { return HLF::GL::s_fn_glTexGendv(coord, pname, params); }
	inline void glTexGenf(GLenum coord, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glTexGenf(coord, pname, param); }
	inline void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glTexGenfv(coord, pname, params); }
	inline void glTexGeni(GLenum coord, GLenum pname, GLint param) { return HLF::GL::s_fn_glTexGeni(coord, pname, param); }
	inline void glTexGeniv(GLenum coord, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glTexGeniv(coord, pname, params); }
	inline void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) { return HLF::GL::s_fn_glFeedbackBuffer(size, type, buffer); }
	inline void glSelectBuffer(GLsizei size, GLuint * buffer) { return HLF::GL::s_fn_glSelectBuffer(size, buffer); }
	inline GLint glRenderMode(GLenum mode) { return HLF::GL::s_fn_glRenderMode(mode); }
	inline void glInitNames() { return HLF::GL::s_fn_glInitNames(); }
	inline void glLoadName(GLuint name) { return HLF::GL::s_fn_glLoadName(name); }
	inline void glPassThrough(GLfloat token) { return HLF::GL::s_fn_glPassThrough(token); }
	inline void glPopName() { return HLF::GL::s_fn_glPopName(); }
	inline void glPushName(GLuint name) { return HLF::GL::s_fn_glPushName(name); }
	inline void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return HLF::GL::s_fn_glClearAccum(red, green, blue, alpha); }
	inline void glClearIndex(GLfloat c) { return HLF::GL::s_fn_glClearIndex(c); }
	inline void glIndexMask(GLuint mask) { return HLF::GL::s_fn_glIndexMask(mask); }
	inline void glAccum(GLenum op, GLfloat value) { return HLF::GL::s_fn_glAccum(op, value); }
	inline void glPopAttrib() { return HLF::GL::s_fn_glPopAttrib(); }
	inline void glPushAttrib(GLbitfield mask) { return HLF::GL::s_fn_glPushAttrib(mask); }
	inline void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { return HLF::GL::s_fn_glMap1d(target, u1, u2, stride, order, points); }
	inline void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { return HLF::GL::s_fn_glMap1f(target, u1, u2, stride, order, points); }
	inline void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { return HLF::GL::s_fn_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
	inline void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { return HLF::GL::s_fn_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
	inline void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) { return HLF::GL::s_fn_glMapGrid1d(un, u1, u2); }
	inline void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) { return HLF::GL::s_fn_glMapGrid1f(un, u1, u2); }
	inline void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { return HLF::GL::s_fn_glMapGrid2d(un, u1, u2, vn, v1, v2); }
	inline void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { return HLF::GL::s_fn_glMapGrid2f(un, u1, u2, vn, v1, v2); }
	inline void glEvalCoord1d(GLdouble u) { return HLF::GL::s_fn_glEvalCoord1d(u); }
	inline void glEvalCoord1dv(const GLdouble * u) { return HLF::GL::s_fn_glEvalCoord1dv(u); }
	inline void glEvalCoord1f(GLfloat u) { return HLF::GL::s_fn_glEvalCoord1f(u); }
	inline void glEvalCoord1fv(const GLfloat * u) { return HLF::GL::s_fn_glEvalCoord1fv(u); }
	inline void glEvalCoord2d(GLdouble u, GLdouble v) { return HLF::GL::s_fn_glEvalCoord2d(u, v); }
	inline void glEvalCoord2dv(const GLdouble * u) { return HLF::GL::s_fn_glEvalCoord2dv(u); }
	inline void glEvalCoord2f(GLfloat u, GLfloat v) { return HLF::GL::s_fn_glEvalCoord2f(u, v); }
	inline void glEvalCoord2fv(const GLfloat * u) { return HLF::GL::s_fn_glEvalCoord2fv(u); }
	inline void glEvalMesh1(GLenum mode, GLint i1, GLint i2) { return HLF::GL::s_fn_glEvalMesh1(mode, i1, i2); }
	inline void glEvalPoint1(GLint i) { return HLF::GL::s_fn_glEvalPoint1(i); }
	inline void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { return HLF::GL::s_fn_glEvalMesh2(mode, i1, i2, j1, j2); }
	inline void glEvalPoint2(GLint i, GLint j) { return HLF::GL::s_fn_glEvalPoint2(i, j); }
	inline void glAlphaFunc(GLenum func, GLfloat ref) { return HLF::GL::s_fn_glAlphaFunc(func, ref); }
	inline void glPixelZoom(GLfloat xfactor, GLfloat yfactor) { return HLF::GL::s_fn_glPixelZoom(xfactor, yfactor); }
	inline void glPixelTransferf(GLenum pname, GLfloat param) { return HLF::GL::s_fn_glPixelTransferf(pname, param); }
	inline void glPixelTransferi(GLenum pname, GLint param) { return HLF::GL::s_fn_glPixelTransferi(pname, param); }
	inline void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) { return HLF::GL::s_fn_glPixelMapfv(map, mapsize, values); }
	inline void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) { return HLF::GL::s_fn_glPixelMapuiv(map, mapsize, values); }
	inline void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) { return HLF::GL::s_fn_glPixelMapusv(map, mapsize, values); }
	inline void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { return HLF::GL::s_fn_glCopyPixels(x, y, width, height, type); }
	inline void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glDrawPixels(width, height, format, type, pixels); }
	inline void glGetClipPlane(GLenum plane, GLdouble * equation) { return HLF::GL::s_fn_glGetClipPlane(plane, equation); }
	inline void glGetLightfv(GLenum light, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetLightfv(light, pname, params); }
	inline void glGetLightiv(GLenum light, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetLightiv(light, pname, params); }
	inline void glGetMapdv(GLenum target, GLenum query, GLdouble * v) { return HLF::GL::s_fn_glGetMapdv(target, query, v); }
	inline void glGetMapfv(GLenum target, GLenum query, GLfloat * v) { return HLF::GL::s_fn_glGetMapfv(target, query, v); }
	inline void glGetMapiv(GLenum target, GLenum query, GLint * v) { return HLF::GL::s_fn_glGetMapiv(target, query, v); }
	inline void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetMaterialfv(face, pname, params); }
	inline void glGetMaterialiv(GLenum face, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetMaterialiv(face, pname, params); }
	inline void glGetPixelMapfv(GLenum map, GLfloat * values) { return HLF::GL::s_fn_glGetPixelMapfv(map, values); }
	inline void glGetPixelMapuiv(GLenum map, GLuint * values) { return HLF::GL::s_fn_glGetPixelMapuiv(map, values); }
	inline void glGetPixelMapusv(GLenum map, GLushort * values) { return HLF::GL::s_fn_glGetPixelMapusv(map, values); }
	inline void glGetPolygonStipple(GLubyte * mask) { return HLF::GL::s_fn_glGetPolygonStipple(mask); }
	inline void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetTexEnvfv(target, pname, params); }
	inline void glGetTexEnviv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTexEnviv(target, pname, params); }
	inline void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) { return HLF::GL::s_fn_glGetTexGendv(coord, pname, params); }
	inline void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetTexGenfv(coord, pname, params); }
	inline void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTexGeniv(coord, pname, params); }
	inline GLboolean glIsList(GLuint list) { return HLF::GL::s_fn_glIsList(list); }
	inline void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { return HLF::GL::s_fn_glFrustum(left, right, bottom, top, zNear, zFar); }
	inline void glLoadIdentity() { return HLF::GL::s_fn_glLoadIdentity(); }
	inline void glLoadMatrixf(const GLfloat * m) { return HLF::GL::s_fn_glLoadMatrixf(m); }
	inline void glLoadMatrixd(const GLdouble * m) { return HLF::GL::s_fn_glLoadMatrixd(m); }
	inline void glMatrixMode(GLenum mode) { return HLF::GL::s_fn_glMatrixMode(mode); }
	inline void glMultMatrixf(const GLfloat * m) { return HLF::GL::s_fn_glMultMatrixf(m); }
	inline void glMultMatrixd(const GLdouble * m) { return HLF::GL::s_fn_glMultMatrixd(m); }
	inline void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { return HLF::GL::s_fn_glOrtho(left, right, bottom, top, zNear, zFar); }
	inline void glPopMatrix() { return HLF::GL::s_fn_glPopMatrix(); }
	inline void glPushMatrix() { return HLF::GL::s_fn_glPushMatrix(); }
	inline void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glRotated(angle, x, y, z); }
	inline void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glRotatef(angle, x, y, z); }
	inline void glScaled(GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glScaled(x, y, z); }
	inline void glScalef(GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glScalef(x, y, z); }
	inline void glTranslated(GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glTranslated(x, y, z); }
	inline void glTranslatef(GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glTranslatef(x, y, z); }
	inline void glDrawArrays(GLenum mode, GLint first, GLsizei count) { return HLF::GL::s_fn_glDrawArrays(mode, first, count); }
	inline void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) { return HLF::GL::s_fn_glDrawElements(mode, count, type, indices); }
	inline void glGetPointerv(GLenum pname, void ** params) { return HLF::GL::s_fn_glGetPointerv(pname, params); }
	inline void glPolygonOffset(GLfloat factor, GLfloat units) { return HLF::GL::s_fn_glPolygonOffset(factor, units); }
	inline void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { return HLF::GL::s_fn_glCopyTexImage1D(target, level, internalformat, x, y, width, border); }
	inline void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { return HLF::GL::s_fn_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
	inline void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return HLF::GL::s_fn_glCopyTexSubImage1D(target, level, xoffset, x, y, width); }
	inline void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
	inline void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTexSubImage1D(target, level, xoffset, width, format, type, pixels); }
	inline void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
	inline void glBindTexture(GLenum target, GLuint texture) { return HLF::GL::s_fn_glBindTexture(target, texture); }
	inline void glDeleteTextures(GLsizei n, const GLuint * textures) { return HLF::GL::s_fn_glDeleteTextures(n, textures); }
	inline void glGenTextures(GLsizei n, GLuint * textures) { return HLF::GL::s_fn_glGenTextures(n, textures); }
	inline GLboolean glIsTexture(GLuint texture) { return HLF::GL::s_fn_glIsTexture(texture); }
	inline void glArrayElement(GLint i) { return HLF::GL::s_fn_glArrayElement(i); }
	inline void glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glColorPointer(size, type, stride, pointer); }
	inline void glDisableClientState(GLenum array) { return HLF::GL::s_fn_glDisableClientState(array); }
	inline void glEdgeFlagPointer(GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glEdgeFlagPointer(stride, pointer); }
	inline void glEnableClientState(GLenum array) { return HLF::GL::s_fn_glEnableClientState(array); }
	inline void glIndexPointer(GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glIndexPointer(type, stride, pointer); }
	inline void glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glInterleavedArrays(format, stride, pointer); }
	inline void glNormalPointer(GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glNormalPointer(type, stride, pointer); }
	inline void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glTexCoordPointer(size, type, stride, pointer); }
	inline void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glVertexPointer(size, type, stride, pointer); }
	inline GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) { return HLF::GL::s_fn_glAreTexturesResident(n, textures, residences); }
	inline void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) { return HLF::GL::s_fn_glPrioritizeTextures(n, textures, priorities); }
	inline void glIndexub(GLubyte c) { return HLF::GL::s_fn_glIndexub(c); }
	inline void glIndexubv(const GLubyte * c) { return HLF::GL::s_fn_glIndexubv(c); }
	inline void glPopClientAttrib() { return HLF::GL::s_fn_glPopClientAttrib(); }
	inline void glPushClientAttrib(GLbitfield mask) { return HLF::GL::s_fn_glPushClientAttrib(mask); }
	inline void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { return HLF::GL::s_fn_glDrawRangeElements(mode, start, end, count, type, indices); }
	inline void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
	inline void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
	inline void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
	inline void glActiveTexture(GLenum texture) { return HLF::GL::s_fn_glActiveTexture(texture); }
	inline void glSampleCoverage(GLfloat value, GLboolean invert) { return HLF::GL::s_fn_glSampleCoverage(value, invert); }
	inline void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
	inline void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
	inline void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
	inline void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
	inline void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
	inline void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
	inline void glGetCompressedTexImage(GLenum target, GLint level, void * img) { return HLF::GL::s_fn_glGetCompressedTexImage(target, level, img); }
	inline void glClientActiveTexture(GLenum texture) { return HLF::GL::s_fn_glClientActiveTexture(texture); }
	inline void glMultiTexCoord1d(GLenum target, GLdouble s) { return HLF::GL::s_fn_glMultiTexCoord1d(target, s); }
	inline void glMultiTexCoord1dv(GLenum target, const GLdouble * v) { return HLF::GL::s_fn_glMultiTexCoord1dv(target, v); }
	inline void glMultiTexCoord1f(GLenum target, GLfloat s) { return HLF::GL::s_fn_glMultiTexCoord1f(target, s); }
	inline void glMultiTexCoord1fv(GLenum target, const GLfloat * v) { return HLF::GL::s_fn_glMultiTexCoord1fv(target, v); }
	inline void glMultiTexCoord1i(GLenum target, GLint s) { return HLF::GL::s_fn_glMultiTexCoord1i(target, s); }
	inline void glMultiTexCoord1iv(GLenum target, const GLint * v) { return HLF::GL::s_fn_glMultiTexCoord1iv(target, v); }
	inline void glMultiTexCoord1s(GLenum target, GLshort s) { return HLF::GL::s_fn_glMultiTexCoord1s(target, s); }
	inline void glMultiTexCoord1sv(GLenum target, const GLshort * v) { return HLF::GL::s_fn_glMultiTexCoord1sv(target, v); }
	inline void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { return HLF::GL::s_fn_glMultiTexCoord2d(target, s, t); }
	inline void glMultiTexCoord2dv(GLenum target, const GLdouble * v) { return HLF::GL::s_fn_glMultiTexCoord2dv(target, v); }
	inline void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { return HLF::GL::s_fn_glMultiTexCoord2f(target, s, t); }
	inline void glMultiTexCoord2fv(GLenum target, const GLfloat * v) { return HLF::GL::s_fn_glMultiTexCoord2fv(target, v); }
	inline void glMultiTexCoord2i(GLenum target, GLint s, GLint t) { return HLF::GL::s_fn_glMultiTexCoord2i(target, s, t); }
	inline void glMultiTexCoord2iv(GLenum target, const GLint * v) { return HLF::GL::s_fn_glMultiTexCoord2iv(target, v); }
	inline void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { return HLF::GL::s_fn_glMultiTexCoord2s(target, s, t); }
	inline void glMultiTexCoord2sv(GLenum target, const GLshort * v) { return HLF::GL::s_fn_glMultiTexCoord2sv(target, v); }
	inline void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { return HLF::GL::s_fn_glMultiTexCoord3d(target, s, t, r); }
	inline void glMultiTexCoord3dv(GLenum target, const GLdouble * v) { return HLF::GL::s_fn_glMultiTexCoord3dv(target, v); }
	inline void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { return HLF::GL::s_fn_glMultiTexCoord3f(target, s, t, r); }
	inline void glMultiTexCoord3fv(GLenum target, const GLfloat * v) { return HLF::GL::s_fn_glMultiTexCoord3fv(target, v); }
	inline void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { return HLF::GL::s_fn_glMultiTexCoord3i(target, s, t, r); }
	inline void glMultiTexCoord3iv(GLenum target, const GLint * v) { return HLF::GL::s_fn_glMultiTexCoord3iv(target, v); }
	inline void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { return HLF::GL::s_fn_glMultiTexCoord3s(target, s, t, r); }
	inline void glMultiTexCoord3sv(GLenum target, const GLshort * v) { return HLF::GL::s_fn_glMultiTexCoord3sv(target, v); }
	inline void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { return HLF::GL::s_fn_glMultiTexCoord4d(target, s, t, r, q); }
	inline void glMultiTexCoord4dv(GLenum target, const GLdouble * v) { return HLF::GL::s_fn_glMultiTexCoord4dv(target, v); }
	inline void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { return HLF::GL::s_fn_glMultiTexCoord4f(target, s, t, r, q); }
	inline void glMultiTexCoord4fv(GLenum target, const GLfloat * v) { return HLF::GL::s_fn_glMultiTexCoord4fv(target, v); }
	inline void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { return HLF::GL::s_fn_glMultiTexCoord4i(target, s, t, r, q); }
	inline void glMultiTexCoord4iv(GLenum target, const GLint * v) { return HLF::GL::s_fn_glMultiTexCoord4iv(target, v); }
	inline void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { return HLF::GL::s_fn_glMultiTexCoord4s(target, s, t, r, q); }
	inline void glMultiTexCoord4sv(GLenum target, const GLshort * v) { return HLF::GL::s_fn_glMultiTexCoord4sv(target, v); }
	inline void glLoadTransposeMatrixf(const GLfloat * m) { return HLF::GL::s_fn_glLoadTransposeMatrixf(m); }
	inline void glLoadTransposeMatrixd(const GLdouble * m) { return HLF::GL::s_fn_glLoadTransposeMatrixd(m); }
	inline void glMultTransposeMatrixf(const GLfloat * m) { return HLF::GL::s_fn_glMultTransposeMatrixf(m); }
	inline void glMultTransposeMatrixd(const GLdouble * m) { return HLF::GL::s_fn_glMultTransposeMatrixd(m); }
	inline void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { return HLF::GL::s_fn_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
	inline void glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { return HLF::GL::s_fn_glMultiDrawArrays(mode, first, count, drawcount); }
	inline void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) { return HLF::GL::s_fn_glMultiDrawElements(mode, count, type, indices, drawcount); }
	inline void glPointParameterf(GLenum pname, GLfloat param) { return HLF::GL::s_fn_glPointParameterf(pname, param); }
	inline void glPointParameterfv(GLenum pname, const GLfloat * params) { return HLF::GL::s_fn_glPointParameterfv(pname, params); }
	inline void glPointParameteri(GLenum pname, GLint param) { return HLF::GL::s_fn_glPointParameteri(pname, param); }
	inline void glPointParameteriv(GLenum pname, const GLint * params) { return HLF::GL::s_fn_glPointParameteriv(pname, params); }
	inline void glFogCoordf(GLfloat coord) { return HLF::GL::s_fn_glFogCoordf(coord); }
	inline void glFogCoordfv(const GLfloat * coord) { return HLF::GL::s_fn_glFogCoordfv(coord); }
	inline void glFogCoordd(GLdouble coord) { return HLF::GL::s_fn_glFogCoordd(coord); }
	inline void glFogCoorddv(const GLdouble * coord) { return HLF::GL::s_fn_glFogCoorddv(coord); }
	inline void glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glFogCoordPointer(type, stride, pointer); }
	inline void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { return HLF::GL::s_fn_glSecondaryColor3b(red, green, blue); }
	inline void glSecondaryColor3bv(const GLbyte * v) { return HLF::GL::s_fn_glSecondaryColor3bv(v); }
	inline void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { return HLF::GL::s_fn_glSecondaryColor3d(red, green, blue); }
	inline void glSecondaryColor3dv(const GLdouble * v) { return HLF::GL::s_fn_glSecondaryColor3dv(v); }
	inline void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { return HLF::GL::s_fn_glSecondaryColor3f(red, green, blue); }
	inline void glSecondaryColor3fv(const GLfloat * v) { return HLF::GL::s_fn_glSecondaryColor3fv(v); }
	inline void glSecondaryColor3i(GLint red, GLint green, GLint blue) { return HLF::GL::s_fn_glSecondaryColor3i(red, green, blue); }
	inline void glSecondaryColor3iv(const GLint * v) { return HLF::GL::s_fn_glSecondaryColor3iv(v); }
	inline void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { return HLF::GL::s_fn_glSecondaryColor3s(red, green, blue); }
	inline void glSecondaryColor3sv(const GLshort * v) { return HLF::GL::s_fn_glSecondaryColor3sv(v); }
	inline void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { return HLF::GL::s_fn_glSecondaryColor3ub(red, green, blue); }
	inline void glSecondaryColor3ubv(const GLubyte * v) { return HLF::GL::s_fn_glSecondaryColor3ubv(v); }
	inline void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { return HLF::GL::s_fn_glSecondaryColor3ui(red, green, blue); }
	inline void glSecondaryColor3uiv(const GLuint * v) { return HLF::GL::s_fn_glSecondaryColor3uiv(v); }
	inline void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { return HLF::GL::s_fn_glSecondaryColor3us(red, green, blue); }
	inline void glSecondaryColor3usv(const GLushort * v) { return HLF::GL::s_fn_glSecondaryColor3usv(v); }
	inline void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glSecondaryColorPointer(size, type, stride, pointer); }
	inline void glWindowPos2d(GLdouble x, GLdouble y) { return HLF::GL::s_fn_glWindowPos2d(x, y); }
	inline void glWindowPos2dv(const GLdouble * v) { return HLF::GL::s_fn_glWindowPos2dv(v); }
	inline void glWindowPos2f(GLfloat x, GLfloat y) { return HLF::GL::s_fn_glWindowPos2f(x, y); }
	inline void glWindowPos2fv(const GLfloat * v) { return HLF::GL::s_fn_glWindowPos2fv(v); }
	inline void glWindowPos2i(GLint x, GLint y) { return HLF::GL::s_fn_glWindowPos2i(x, y); }
	inline void glWindowPos2iv(const GLint * v) { return HLF::GL::s_fn_glWindowPos2iv(v); }
	inline void glWindowPos2s(GLshort x, GLshort y) { return HLF::GL::s_fn_glWindowPos2s(x, y); }
	inline void glWindowPos2sv(const GLshort * v) { return HLF::GL::s_fn_glWindowPos2sv(v); }
	inline void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glWindowPos3d(x, y, z); }
	inline void glWindowPos3dv(const GLdouble * v) { return HLF::GL::s_fn_glWindowPos3dv(v); }
	inline void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glWindowPos3f(x, y, z); }
	inline void glWindowPos3fv(const GLfloat * v) { return HLF::GL::s_fn_glWindowPos3fv(v); }
	inline void glWindowPos3i(GLint x, GLint y, GLint z) { return HLF::GL::s_fn_glWindowPos3i(x, y, z); }
	inline void glWindowPos3iv(const GLint * v) { return HLF::GL::s_fn_glWindowPos3iv(v); }
	inline void glWindowPos3s(GLshort x, GLshort y, GLshort z) { return HLF::GL::s_fn_glWindowPos3s(x, y, z); }
	inline void glWindowPos3sv(const GLshort * v) { return HLF::GL::s_fn_glWindowPos3sv(v); }
	inline void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return HLF::GL::s_fn_glBlendColor(red, green, blue, alpha); }
	inline void glBlendEquation(GLenum mode) { return HLF::GL::s_fn_glBlendEquation(mode); }
	inline void glGenQueries(GLsizei n, GLuint * ids) { return HLF::GL::s_fn_glGenQueries(n, ids); }
	inline void glDeleteQueries(GLsizei n, const GLuint * ids) { return HLF::GL::s_fn_glDeleteQueries(n, ids); }
	inline GLboolean glIsQuery(GLuint id) { return HLF::GL::s_fn_glIsQuery(id); }
	inline void glBeginQuery(GLenum target, GLuint id) { return HLF::GL::s_fn_glBeginQuery(target, id); }
	inline void glEndQuery(GLenum target) { return HLF::GL::s_fn_glEndQuery(target); }
	inline void glGetQueryiv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetQueryiv(target, pname, params); }
	inline void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetQueryObjectiv(id, pname, params); }
	inline void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) { return HLF::GL::s_fn_glGetQueryObjectuiv(id, pname, params); }
	inline void glBindBuffer(GLenum target, GLuint buffer) { return HLF::GL::s_fn_glBindBuffer(target, buffer); }
	inline void glDeleteBuffers(GLsizei n, const GLuint * buffers) { return HLF::GL::s_fn_glDeleteBuffers(n, buffers); }
	inline void glGenBuffers(GLsizei n, GLuint * buffers) { return HLF::GL::s_fn_glGenBuffers(n, buffers); }
	inline GLboolean glIsBuffer(GLuint buffer) { return HLF::GL::s_fn_glIsBuffer(buffer); }
	inline void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) { return HLF::GL::s_fn_glBufferData(target, size, data, usage); }
	inline void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { return HLF::GL::s_fn_glBufferSubData(target, offset, size, data); }
	inline void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) { return HLF::GL::s_fn_glGetBufferSubData(target, offset, size, data); }
	inline void * glMapBuffer(GLenum target, GLenum access) { return HLF::GL::s_fn_glMapBuffer(target, access); }
	inline GLboolean glUnmapBuffer(GLenum target) { return HLF::GL::s_fn_glUnmapBuffer(target); }
	inline void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetBufferParameteriv(target, pname, params); }
	inline void glGetBufferPointerv(GLenum target, GLenum pname, void ** params) { return HLF::GL::s_fn_glGetBufferPointerv(target, pname, params); }
	inline void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { return HLF::GL::s_fn_glBlendEquationSeparate(modeRGB, modeAlpha); }
	inline void glDrawBuffers(GLsizei n, const GLenum * bufs) { return HLF::GL::s_fn_glDrawBuffers(n, bufs); }
	inline void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { return HLF::GL::s_fn_glStencilOpSeparate(face, sfail, dpfail, dppass); }
	inline void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { return HLF::GL::s_fn_glStencilFuncSeparate(face, func, ref, mask); }
	inline void glStencilMaskSeparate(GLenum face, GLuint mask) { return HLF::GL::s_fn_glStencilMaskSeparate(face, mask); }
	inline void glAttachShader(GLuint program, GLuint shader) { return HLF::GL::s_fn_glAttachShader(program, shader); }
	inline void glBindAttribLocation(GLuint program, GLuint index, const GLchar * name) { return HLF::GL::s_fn_glBindAttribLocation(program, index, name); }
	inline void glCompileShader(GLuint shader) { return HLF::GL::s_fn_glCompileShader(shader); }
	inline GLuint glCreateProgram() { return HLF::GL::s_fn_glCreateProgram(); }
	inline GLuint glCreateShader(GLenum type) { return HLF::GL::s_fn_glCreateShader(type); }
	inline void glDeleteProgram(GLuint program) { return HLF::GL::s_fn_glDeleteProgram(program); }
	inline void glDeleteShader(GLuint shader) { return HLF::GL::s_fn_glDeleteShader(shader); }
	inline void glDetachShader(GLuint program, GLuint shader) { return HLF::GL::s_fn_glDetachShader(program, shader); }
	inline void glDisableVertexAttribArray(GLuint index) { return HLF::GL::s_fn_glDisableVertexAttribArray(index); }
	inline void glEnableVertexAttribArray(GLuint index) { return HLF::GL::s_fn_glEnableVertexAttribArray(index); }
	inline void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { return HLF::GL::s_fn_glGetActiveAttrib(program, index, bufSize, length, size, type, name); }
	inline void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { return HLF::GL::s_fn_glGetActiveUniform(program, index, bufSize, length, size, type, name); }
	inline void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { return HLF::GL::s_fn_glGetAttachedShaders(program, maxCount, count, shaders); }
	inline GLint glGetAttribLocation(GLuint program, const GLchar * name) { return HLF::GL::s_fn_glGetAttribLocation(program, name); }
	inline void glGetProgramiv(GLuint program, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetProgramiv(program, pname, params); }
	inline void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { return HLF::GL::s_fn_glGetProgramInfoLog(program, bufSize, length, infoLog); }
	inline void glGetShaderiv(GLuint shader, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetShaderiv(shader, pname, params); }
	inline void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { return HLF::GL::s_fn_glGetShaderInfoLog(shader, bufSize, length, infoLog); }
	inline void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { return HLF::GL::s_fn_glGetShaderSource(shader, bufSize, length, source); }
	inline GLint glGetUniformLocation(GLuint program, const GLchar * name) { return HLF::GL::s_fn_glGetUniformLocation(program, name); }
	inline void glGetUniformfv(GLuint program, GLint location, GLfloat * params) { return HLF::GL::s_fn_glGetUniformfv(program, location, params); }
	inline void glGetUniformiv(GLuint program, GLint location, GLint * params) { return HLF::GL::s_fn_glGetUniformiv(program, location, params); }
	inline void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) { return HLF::GL::s_fn_glGetVertexAttribdv(index, pname, params); }
	inline void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetVertexAttribfv(index, pname, params); }
	inline void glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetVertexAttribiv(index, pname, params); }
	inline void glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) { return HLF::GL::s_fn_glGetVertexAttribPointerv(index, pname, pointer); }
	inline GLboolean glIsProgram(GLuint program) { return HLF::GL::s_fn_glIsProgram(program); }
	inline GLboolean glIsShader(GLuint shader) { return HLF::GL::s_fn_glIsShader(shader); }
	inline void glLinkProgram(GLuint program) { return HLF::GL::s_fn_glLinkProgram(program); }
	inline void glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) { return HLF::GL::s_fn_glShaderSource(shader, count, string, length); }
	inline void glUseProgram(GLuint program) { return HLF::GL::s_fn_glUseProgram(program); }
	inline void glUniform1f(GLint location, GLfloat v0) { return HLF::GL::s_fn_glUniform1f(location, v0); }
	inline void glUniform2f(GLint location, GLfloat v0, GLfloat v1) { return HLF::GL::s_fn_glUniform2f(location, v0, v1); }
	inline void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { return HLF::GL::s_fn_glUniform3f(location, v0, v1, v2); }
	inline void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { return HLF::GL::s_fn_glUniform4f(location, v0, v1, v2, v3); }
	inline void glUniform1i(GLint location, GLint v0) { return HLF::GL::s_fn_glUniform1i(location, v0); }
	inline void glUniform2i(GLint location, GLint v0, GLint v1) { return HLF::GL::s_fn_glUniform2i(location, v0, v1); }
	inline void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { return HLF::GL::s_fn_glUniform3i(location, v0, v1, v2); }
	inline void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { return HLF::GL::s_fn_glUniform4i(location, v0, v1, v2, v3); }
	inline void glUniform1fv(GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glUniform1fv(location, count, value); }
	inline void glUniform2fv(GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glUniform2fv(location, count, value); }
	inline void glUniform3fv(GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glUniform3fv(location, count, value); }
	inline void glUniform4fv(GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glUniform4fv(location, count, value); }
	inline void glUniform1iv(GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glUniform1iv(location, count, value); }
	inline void glUniform2iv(GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glUniform2iv(location, count, value); }
	inline void glUniform3iv(GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glUniform3iv(location, count, value); }
	inline void glUniform4iv(GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glUniform4iv(location, count, value); }
	inline void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix2fv(location, count, transpose, value); }
	inline void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix3fv(location, count, transpose, value); }
	inline void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix4fv(location, count, transpose, value); }
	inline void glValidateProgram(GLuint program) { return HLF::GL::s_fn_glValidateProgram(program); }
	inline void glVertexAttrib1d(GLuint index, GLdouble x) { return HLF::GL::s_fn_glVertexAttrib1d(index, x); }
	inline void glVertexAttrib1dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttrib1dv(index, v); }
	inline void glVertexAttrib1f(GLuint index, GLfloat x) { return HLF::GL::s_fn_glVertexAttrib1f(index, x); }
	inline void glVertexAttrib1fv(GLuint index, const GLfloat * v) { return HLF::GL::s_fn_glVertexAttrib1fv(index, v); }
	inline void glVertexAttrib1s(GLuint index, GLshort x) { return HLF::GL::s_fn_glVertexAttrib1s(index, x); }
	inline void glVertexAttrib1sv(GLuint index, const GLshort * v) { return HLF::GL::s_fn_glVertexAttrib1sv(index, v); }
	inline void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { return HLF::GL::s_fn_glVertexAttrib2d(index, x, y); }
	inline void glVertexAttrib2dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttrib2dv(index, v); }
	inline void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { return HLF::GL::s_fn_glVertexAttrib2f(index, x, y); }
	inline void glVertexAttrib2fv(GLuint index, const GLfloat * v) { return HLF::GL::s_fn_glVertexAttrib2fv(index, v); }
	inline void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) { return HLF::GL::s_fn_glVertexAttrib2s(index, x, y); }
	inline void glVertexAttrib2sv(GLuint index, const GLshort * v) { return HLF::GL::s_fn_glVertexAttrib2sv(index, v); }
	inline void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glVertexAttrib3d(index, x, y, z); }
	inline void glVertexAttrib3dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttrib3dv(index, v); }
	inline void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { return HLF::GL::s_fn_glVertexAttrib3f(index, x, y, z); }
	inline void glVertexAttrib3fv(GLuint index, const GLfloat * v) { return HLF::GL::s_fn_glVertexAttrib3fv(index, v); }
	inline void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { return HLF::GL::s_fn_glVertexAttrib3s(index, x, y, z); }
	inline void glVertexAttrib3sv(GLuint index, const GLshort * v) { return HLF::GL::s_fn_glVertexAttrib3sv(index, v); }
	inline void glVertexAttrib4Nbv(GLuint index, const GLbyte * v) { return HLF::GL::s_fn_glVertexAttrib4Nbv(index, v); }
	inline void glVertexAttrib4Niv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glVertexAttrib4Niv(index, v); }
	inline void glVertexAttrib4Nsv(GLuint index, const GLshort * v) { return HLF::GL::s_fn_glVertexAttrib4Nsv(index, v); }
	inline void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { return HLF::GL::s_fn_glVertexAttrib4Nub(index, x, y, z, w); }
	inline void glVertexAttrib4Nubv(GLuint index, const GLubyte * v) { return HLF::GL::s_fn_glVertexAttrib4Nubv(index, v); }
	inline void glVertexAttrib4Nuiv(GLuint index, const GLuint * v) { return HLF::GL::s_fn_glVertexAttrib4Nuiv(index, v); }
	inline void glVertexAttrib4Nusv(GLuint index, const GLushort * v) { return HLF::GL::s_fn_glVertexAttrib4Nusv(index, v); }
	inline void glVertexAttrib4bv(GLuint index, const GLbyte * v) { return HLF::GL::s_fn_glVertexAttrib4bv(index, v); }
	inline void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return HLF::GL::s_fn_glVertexAttrib4d(index, x, y, z, w); }
	inline void glVertexAttrib4dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttrib4dv(index, v); }
	inline void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return HLF::GL::s_fn_glVertexAttrib4f(index, x, y, z, w); }
	inline void glVertexAttrib4fv(GLuint index, const GLfloat * v) { return HLF::GL::s_fn_glVertexAttrib4fv(index, v); }
	inline void glVertexAttrib4iv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glVertexAttrib4iv(index, v); }
	inline void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { return HLF::GL::s_fn_glVertexAttrib4s(index, x, y, z, w); }
	inline void glVertexAttrib4sv(GLuint index, const GLshort * v) { return HLF::GL::s_fn_glVertexAttrib4sv(index, v); }
	inline void glVertexAttrib4ubv(GLuint index, const GLubyte * v) { return HLF::GL::s_fn_glVertexAttrib4ubv(index, v); }
	inline void glVertexAttrib4uiv(GLuint index, const GLuint * v) { return HLF::GL::s_fn_glVertexAttrib4uiv(index, v); }
	inline void glVertexAttrib4usv(GLuint index, const GLushort * v) { return HLF::GL::s_fn_glVertexAttrib4usv(index, v); }
	inline void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glVertexAttribPointer(index, size, type, normalized, stride, pointer); }
	inline void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix2x3fv(location, count, transpose, value); }
	inline void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix3x2fv(location, count, transpose, value); }
	inline void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix2x4fv(location, count, transpose, value); }
	inline void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix4x2fv(location, count, transpose, value); }
	inline void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix3x4fv(location, count, transpose, value); }
	inline void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glUniformMatrix4x3fv(location, count, transpose, value); }
	inline void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { return HLF::GL::s_fn_glColorMaski(index, r, g, b, a); }
	inline void glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) { return HLF::GL::s_fn_glGetBooleani_v(target, index, data); }
	inline void glGetIntegeri_v(GLenum target, GLuint index, GLint * data) { return HLF::GL::s_fn_glGetIntegeri_v(target, index, data); }
	inline void glEnablei(GLenum target, GLuint index) { return HLF::GL::s_fn_glEnablei(target, index); }
	inline void glDisablei(GLenum target, GLuint index) { return HLF::GL::s_fn_glDisablei(target, index); }
	inline GLboolean glIsEnabledi(GLenum target, GLuint index) { return HLF::GL::s_fn_glIsEnabledi(target, index); }
	inline void glBeginTransformFeedback(GLenum primitiveMode) { return HLF::GL::s_fn_glBeginTransformFeedback(primitiveMode); }
	inline void glEndTransformFeedback() { return HLF::GL::s_fn_glEndTransformFeedback(); }
	inline void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { return HLF::GL::s_fn_glBindBufferRange(target, index, buffer, offset, size); }
	inline void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) { return HLF::GL::s_fn_glBindBufferBase(target, index, buffer); }
	inline void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { return HLF::GL::s_fn_glTransformFeedbackVaryings(program, count, varyings, bufferMode); }
	inline void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { return HLF::GL::s_fn_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
	inline void glClampColor(GLenum target, GLenum clamp) { return HLF::GL::s_fn_glClampColor(target, clamp); }
	inline void glBeginConditionalRender(GLuint id, GLenum mode) { return HLF::GL::s_fn_glBeginConditionalRender(id, mode); }
	inline void glEndConditionalRender() { return HLF::GL::s_fn_glEndConditionalRender(); }
	inline void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glVertexAttribIPointer(index, size, type, stride, pointer); }
	inline void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetVertexAttribIiv(index, pname, params); }
	inline void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) { return HLF::GL::s_fn_glGetVertexAttribIuiv(index, pname, params); }
	inline void glVertexAttribI1i(GLuint index, GLint x) { return HLF::GL::s_fn_glVertexAttribI1i(index, x); }
	inline void glVertexAttribI2i(GLuint index, GLint x, GLint y) { return HLF::GL::s_fn_glVertexAttribI2i(index, x, y); }
	inline void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { return HLF::GL::s_fn_glVertexAttribI3i(index, x, y, z); }
	inline void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { return HLF::GL::s_fn_glVertexAttribI4i(index, x, y, z, w); }
	inline void glVertexAttribI1ui(GLuint index, GLuint x) { return HLF::GL::s_fn_glVertexAttribI1ui(index, x); }
	inline void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { return HLF::GL::s_fn_glVertexAttribI2ui(index, x, y); }
	inline void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { return HLF::GL::s_fn_glVertexAttribI3ui(index, x, y, z); }
	inline void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { return HLF::GL::s_fn_glVertexAttribI4ui(index, x, y, z, w); }
	inline void glVertexAttribI1iv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glVertexAttribI1iv(index, v); }
	inline void glVertexAttribI2iv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glVertexAttribI2iv(index, v); }
	inline void glVertexAttribI3iv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glVertexAttribI3iv(index, v); }
	inline void glVertexAttribI4iv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glVertexAttribI4iv(index, v); }
	inline void glVertexAttribI1uiv(GLuint index, const GLuint * v) { return HLF::GL::s_fn_glVertexAttribI1uiv(index, v); }
	inline void glVertexAttribI2uiv(GLuint index, const GLuint * v) { return HLF::GL::s_fn_glVertexAttribI2uiv(index, v); }
	inline void glVertexAttribI3uiv(GLuint index, const GLuint * v) { return HLF::GL::s_fn_glVertexAttribI3uiv(index, v); }
	inline void glVertexAttribI4uiv(GLuint index, const GLuint * v) { return HLF::GL::s_fn_glVertexAttribI4uiv(index, v); }
	inline void glVertexAttribI4bv(GLuint index, const GLbyte * v) { return HLF::GL::s_fn_glVertexAttribI4bv(index, v); }
	inline void glVertexAttribI4sv(GLuint index, const GLshort * v) { return HLF::GL::s_fn_glVertexAttribI4sv(index, v); }
	inline void glVertexAttribI4ubv(GLuint index, const GLubyte * v) { return HLF::GL::s_fn_glVertexAttribI4ubv(index, v); }
	inline void glVertexAttribI4usv(GLuint index, const GLushort * v) { return HLF::GL::s_fn_glVertexAttribI4usv(index, v); }
	inline void glGetUniformuiv(GLuint program, GLint location, GLuint * params) { return HLF::GL::s_fn_glGetUniformuiv(program, location, params); }
	inline void glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) { return HLF::GL::s_fn_glBindFragDataLocation(program, color, name); }
	inline GLint glGetFragDataLocation(GLuint program, const GLchar * name) { return HLF::GL::s_fn_glGetFragDataLocation(program, name); }
	inline void glUniform1ui(GLint location, GLuint v0) { return HLF::GL::s_fn_glUniform1ui(location, v0); }
	inline void glUniform2ui(GLint location, GLuint v0, GLuint v1) { return HLF::GL::s_fn_glUniform2ui(location, v0, v1); }
	inline void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { return HLF::GL::s_fn_glUniform3ui(location, v0, v1, v2); }
	inline void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { return HLF::GL::s_fn_glUniform4ui(location, v0, v1, v2, v3); }
	inline void glUniform1uiv(GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glUniform1uiv(location, count, value); }
	inline void glUniform2uiv(GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glUniform2uiv(location, count, value); }
	inline void glUniform3uiv(GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glUniform3uiv(location, count, value); }
	inline void glUniform4uiv(GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glUniform4uiv(location, count, value); }
	inline void glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glTexParameterIiv(target, pname, params); }
	inline void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) { return HLF::GL::s_fn_glTexParameterIuiv(target, pname, params); }
	inline void glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTexParameterIiv(target, pname, params); }
	inline void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) { return HLF::GL::s_fn_glGetTexParameterIuiv(target, pname, params); }
	inline void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) { return HLF::GL::s_fn_glClearBufferiv(buffer, drawbuffer, value); }
	inline void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) { return HLF::GL::s_fn_glClearBufferuiv(buffer, drawbuffer, value); }
	inline void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) { return HLF::GL::s_fn_glClearBufferfv(buffer, drawbuffer, value); }
	inline void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { return HLF::GL::s_fn_glClearBufferfi(buffer, drawbuffer, depth, stencil); }
	inline const GLubyte * glGetStringi(GLenum name, GLuint index) { return HLF::GL::s_fn_glGetStringi(name, index); }
	inline GLboolean glIsRenderbuffer(GLuint renderbuffer) { return HLF::GL::s_fn_glIsRenderbuffer(renderbuffer); }
	inline void glBindRenderbuffer(GLenum target, GLuint renderbuffer) { return HLF::GL::s_fn_glBindRenderbuffer(target, renderbuffer); }
	inline void glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) { return HLF::GL::s_fn_glDeleteRenderbuffers(n, renderbuffers); }
	inline void glGenRenderbuffers(GLsizei n, GLuint * renderbuffers) { return HLF::GL::s_fn_glGenRenderbuffers(n, renderbuffers); }
	inline void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glRenderbufferStorage(target, internalformat, width, height); }
	inline void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetRenderbufferParameteriv(target, pname, params); }
	inline GLboolean glIsFramebuffer(GLuint framebuffer) { return HLF::GL::s_fn_glIsFramebuffer(framebuffer); }
	inline void glBindFramebuffer(GLenum target, GLuint framebuffer) { return HLF::GL::s_fn_glBindFramebuffer(target, framebuffer); }
	inline void glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) { return HLF::GL::s_fn_glDeleteFramebuffers(n, framebuffers); }
	inline void glGenFramebuffers(GLsizei n, GLuint * framebuffers) { return HLF::GL::s_fn_glGenFramebuffers(n, framebuffers); }
	inline GLenum glCheckFramebufferStatus(GLenum target) { return HLF::GL::s_fn_glCheckFramebufferStatus(target); }
	inline void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return HLF::GL::s_fn_glFramebufferTexture1D(target, attachment, textarget, texture, level); }
	inline void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return HLF::GL::s_fn_glFramebufferTexture2D(target, attachment, textarget, texture, level); }
	inline void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { return HLF::GL::s_fn_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
	inline void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { return HLF::GL::s_fn_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
	inline void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
	inline void glGenerateMipmap(GLenum target) { return HLF::GL::s_fn_glGenerateMipmap(target); }
	inline void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { return HLF::GL::s_fn_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
	inline void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glRenderbufferStorageMultisample(target, samples, internalformat, width, height); }
	inline void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { return HLF::GL::s_fn_glFramebufferTextureLayer(target, attachment, texture, level, layer); }
	inline void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return HLF::GL::s_fn_glMapBufferRange(target, offset, length, access); }
	inline void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { return HLF::GL::s_fn_glFlushMappedBufferRange(target, offset, length); }
	inline void glBindVertexArray(GLuint array) { return HLF::GL::s_fn_glBindVertexArray(array); }
	inline void glDeleteVertexArrays(GLsizei n, const GLuint * arrays) { return HLF::GL::s_fn_glDeleteVertexArrays(n, arrays); }
	inline void glGenVertexArrays(GLsizei n, GLuint * arrays) { return HLF::GL::s_fn_glGenVertexArrays(n, arrays); }
	inline GLboolean glIsVertexArray(GLuint array) { return HLF::GL::s_fn_glIsVertexArray(array); }
	inline void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { return HLF::GL::s_fn_glDrawArraysInstanced(mode, first, count, instancecount); }
	inline void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { return HLF::GL::s_fn_glDrawElementsInstanced(mode, count, type, indices, instancecount); }
	inline void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { return HLF::GL::s_fn_glTexBuffer(target, internalformat, buffer); }
	inline void glPrimitiveRestartIndex(GLuint index) { return HLF::GL::s_fn_glPrimitiveRestartIndex(index); }
	inline void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { return HLF::GL::s_fn_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
	inline void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) { return HLF::GL::s_fn_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
	inline void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
	inline void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { return HLF::GL::s_fn_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
	inline GLuint glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) { return HLF::GL::s_fn_glGetUniformBlockIndex(program, uniformBlockName); }
	inline void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
	inline void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { return HLF::GL::s_fn_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
	inline void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { return HLF::GL::s_fn_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
	inline void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { return HLF::GL::s_fn_glDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
	inline void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { return HLF::GL::s_fn_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
	inline void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { return HLF::GL::s_fn_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
	inline void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) { return HLF::GL::s_fn_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
	inline void glProvokingVertex(GLenum mode) { return HLF::GL::s_fn_glProvokingVertex(mode); }
	inline GLsync glFenceSync(GLenum condition, GLbitfield flags) { return HLF::GL::s_fn_glFenceSync(condition, flags); }
	inline GLboolean glIsSync(GLsync sync) { return HLF::GL::s_fn_glIsSync(sync); }
	inline void glDeleteSync(GLsync sync) { return HLF::GL::s_fn_glDeleteSync(sync); }
	inline GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return HLF::GL::s_fn_glClientWaitSync(sync, flags, timeout); }
	inline void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return HLF::GL::s_fn_glWaitSync(sync, flags, timeout); }
	inline void glGetInteger64v(GLenum pname, GLint64 * data) { return HLF::GL::s_fn_glGetInteger64v(pname, data); }
	inline void glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) { return HLF::GL::s_fn_glGetSynciv(sync, pname, count, length, values); }
	inline void glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) { return HLF::GL::s_fn_glGetInteger64i_v(target, index, data); }
	inline void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) { return HLF::GL::s_fn_glGetBufferParameteri64v(target, pname, params); }
	inline void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { return HLF::GL::s_fn_glFramebufferTexture(target, attachment, texture, level); }
	inline void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return HLF::GL::s_fn_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
	inline void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return HLF::GL::s_fn_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
	inline void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) { return HLF::GL::s_fn_glGetMultisamplefv(pname, index, val); }
	inline void glSampleMaski(GLuint maskNumber, GLbitfield mask) { return HLF::GL::s_fn_glSampleMaski(maskNumber, mask); }
	inline void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { return HLF::GL::s_fn_glBindFragDataLocationIndexed(program, colorNumber, index, name); }
	inline GLint glGetFragDataIndex(GLuint program, const GLchar * name) { return HLF::GL::s_fn_glGetFragDataIndex(program, name); }
	inline void glGenSamplers(GLsizei count, GLuint * samplers) { return HLF::GL::s_fn_glGenSamplers(count, samplers); }
	inline void glDeleteSamplers(GLsizei count, const GLuint * samplers) { return HLF::GL::s_fn_glDeleteSamplers(count, samplers); }
	inline GLboolean glIsSampler(GLuint sampler) { return HLF::GL::s_fn_glIsSampler(sampler); }
	inline void glBindSampler(GLuint unit, GLuint sampler) { return HLF::GL::s_fn_glBindSampler(unit, sampler); }
	inline void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { return HLF::GL::s_fn_glSamplerParameteri(sampler, pname, param); }
	inline void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) { return HLF::GL::s_fn_glSamplerParameteriv(sampler, pname, param); }
	inline void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glSamplerParameterf(sampler, pname, param); }
	inline void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) { return HLF::GL::s_fn_glSamplerParameterfv(sampler, pname, param); }
	inline void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) { return HLF::GL::s_fn_glSamplerParameterIiv(sampler, pname, param); }
	inline void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) { return HLF::GL::s_fn_glSamplerParameterIuiv(sampler, pname, param); }
	inline void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetSamplerParameteriv(sampler, pname, params); }
	inline void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetSamplerParameterIiv(sampler, pname, params); }
	inline void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetSamplerParameterfv(sampler, pname, params); }
	inline void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) { return HLF::GL::s_fn_glGetSamplerParameterIuiv(sampler, pname, params); }
	inline void glQueryCounter(GLuint id, GLenum target) { return HLF::GL::s_fn_glQueryCounter(id, target); }
	inline void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) { return HLF::GL::s_fn_glGetQueryObjecti64v(id, pname, params); }
	inline void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) { return HLF::GL::s_fn_glGetQueryObjectui64v(id, pname, params); }
	inline void glVertexAttribDivisor(GLuint index, GLuint divisor) { return HLF::GL::s_fn_glVertexAttribDivisor(index, divisor); }
	inline void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { return HLF::GL::s_fn_glVertexAttribP1ui(index, type, normalized, value); }
	inline void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return HLF::GL::s_fn_glVertexAttribP1uiv(index, type, normalized, value); }
	inline void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { return HLF::GL::s_fn_glVertexAttribP2ui(index, type, normalized, value); }
	inline void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return HLF::GL::s_fn_glVertexAttribP2uiv(index, type, normalized, value); }
	inline void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { return HLF::GL::s_fn_glVertexAttribP3ui(index, type, normalized, value); }
	inline void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return HLF::GL::s_fn_glVertexAttribP3uiv(index, type, normalized, value); }
	inline void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { return HLF::GL::s_fn_glVertexAttribP4ui(index, type, normalized, value); }
	inline void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return HLF::GL::s_fn_glVertexAttribP4uiv(index, type, normalized, value); }
	inline void glVertexP2ui(GLenum type, GLuint value) { return HLF::GL::s_fn_glVertexP2ui(type, value); }
	inline void glVertexP2uiv(GLenum type, const GLuint * value) { return HLF::GL::s_fn_glVertexP2uiv(type, value); }
	inline void glVertexP3ui(GLenum type, GLuint value) { return HLF::GL::s_fn_glVertexP3ui(type, value); }
	inline void glVertexP3uiv(GLenum type, const GLuint * value) { return HLF::GL::s_fn_glVertexP3uiv(type, value); }
	inline void glVertexP4ui(GLenum type, GLuint value) { return HLF::GL::s_fn_glVertexP4ui(type, value); }
	inline void glVertexP4uiv(GLenum type, const GLuint * value) { return HLF::GL::s_fn_glVertexP4uiv(type, value); }
	inline void glTexCoordP1ui(GLenum type, GLuint coords) { return HLF::GL::s_fn_glTexCoordP1ui(type, coords); }
	inline void glTexCoordP1uiv(GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glTexCoordP1uiv(type, coords); }
	inline void glTexCoordP2ui(GLenum type, GLuint coords) { return HLF::GL::s_fn_glTexCoordP2ui(type, coords); }
	inline void glTexCoordP2uiv(GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glTexCoordP2uiv(type, coords); }
	inline void glTexCoordP3ui(GLenum type, GLuint coords) { return HLF::GL::s_fn_glTexCoordP3ui(type, coords); }
	inline void glTexCoordP3uiv(GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glTexCoordP3uiv(type, coords); }
	inline void glTexCoordP4ui(GLenum type, GLuint coords) { return HLF::GL::s_fn_glTexCoordP4ui(type, coords); }
	inline void glTexCoordP4uiv(GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glTexCoordP4uiv(type, coords); }
	inline void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { return HLF::GL::s_fn_glMultiTexCoordP1ui(texture, type, coords); }
	inline void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glMultiTexCoordP1uiv(texture, type, coords); }
	inline void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { return HLF::GL::s_fn_glMultiTexCoordP2ui(texture, type, coords); }
	inline void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glMultiTexCoordP2uiv(texture, type, coords); }
	inline void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { return HLF::GL::s_fn_glMultiTexCoordP3ui(texture, type, coords); }
	inline void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glMultiTexCoordP3uiv(texture, type, coords); }
	inline void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { return HLF::GL::s_fn_glMultiTexCoordP4ui(texture, type, coords); }
	inline void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glMultiTexCoordP4uiv(texture, type, coords); }
	inline void glNormalP3ui(GLenum type, GLuint coords) { return HLF::GL::s_fn_glNormalP3ui(type, coords); }
	inline void glNormalP3uiv(GLenum type, const GLuint * coords) { return HLF::GL::s_fn_glNormalP3uiv(type, coords); }
	inline void glColorP3ui(GLenum type, GLuint color) { return HLF::GL::s_fn_glColorP3ui(type, color); }
	inline void glColorP3uiv(GLenum type, const GLuint * color) { return HLF::GL::s_fn_glColorP3uiv(type, color); }
	inline void glColorP4ui(GLenum type, GLuint color) { return HLF::GL::s_fn_glColorP4ui(type, color); }
	inline void glColorP4uiv(GLenum type, const GLuint * color) { return HLF::GL::s_fn_glColorP4uiv(type, color); }
	inline void glSecondaryColorP3ui(GLenum type, GLuint color) { return HLF::GL::s_fn_glSecondaryColorP3ui(type, color); }
	inline void glSecondaryColorP3uiv(GLenum type, const GLuint * color) { return HLF::GL::s_fn_glSecondaryColorP3uiv(type, color); }
	inline void glMinSampleShading(GLfloat value) { return HLF::GL::s_fn_glMinSampleShading(value); }
	inline void glBlendEquationi(GLuint buf, GLenum mode) { return HLF::GL::s_fn_glBlendEquationi(buf, mode); }
	inline void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { return HLF::GL::s_fn_glBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
	inline void glBlendFunci(GLuint buf, GLenum src, GLenum dst) { return HLF::GL::s_fn_glBlendFunci(buf, src, dst); }
	inline void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { return HLF::GL::s_fn_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
	inline void glDrawArraysIndirect(GLenum mode, const void * indirect) { return HLF::GL::s_fn_glDrawArraysIndirect(mode, indirect); }
	inline void glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) { return HLF::GL::s_fn_glDrawElementsIndirect(mode, type, indirect); }
	inline void glUniform1d(GLint location, GLdouble x) { return HLF::GL::s_fn_glUniform1d(location, x); }
	inline void glUniform2d(GLint location, GLdouble x, GLdouble y) { return HLF::GL::s_fn_glUniform2d(location, x, y); }
	inline void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glUniform3d(location, x, y, z); }
	inline void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return HLF::GL::s_fn_glUniform4d(location, x, y, z, w); }
	inline void glUniform1dv(GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glUniform1dv(location, count, value); }
	inline void glUniform2dv(GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glUniform2dv(location, count, value); }
	inline void glUniform3dv(GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glUniform3dv(location, count, value); }
	inline void glUniform4dv(GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glUniform4dv(location, count, value); }
	inline void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix2dv(location, count, transpose, value); }
	inline void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix3dv(location, count, transpose, value); }
	inline void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix4dv(location, count, transpose, value); }
	inline void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix2x3dv(location, count, transpose, value); }
	inline void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix2x4dv(location, count, transpose, value); }
	inline void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix3x2dv(location, count, transpose, value); }
	inline void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix3x4dv(location, count, transpose, value); }
	inline void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix4x2dv(location, count, transpose, value); }
	inline void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glUniformMatrix4x3dv(location, count, transpose, value); }
	inline void glGetUniformdv(GLuint program, GLint location, GLdouble * params) { return HLF::GL::s_fn_glGetUniformdv(program, location, params); }
	inline GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) { return HLF::GL::s_fn_glGetSubroutineUniformLocation(program, shadertype, name); }
	inline GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) { return HLF::GL::s_fn_glGetSubroutineIndex(program, shadertype, name); }
	inline void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { return HLF::GL::s_fn_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
	inline void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { return HLF::GL::s_fn_glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name); }
	inline void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { return HLF::GL::s_fn_glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name); }
	inline void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) { return HLF::GL::s_fn_glUniformSubroutinesuiv(shadertype, count, indices); }
	inline void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) { return HLF::GL::s_fn_glGetUniformSubroutineuiv(shadertype, location, params); }
	inline void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) { return HLF::GL::s_fn_glGetProgramStageiv(program, shadertype, pname, values); }
	inline void glPatchParameteri(GLenum pname, GLint value) { return HLF::GL::s_fn_glPatchParameteri(pname, value); }
	inline void glPatchParameterfv(GLenum pname, const GLfloat * values) { return HLF::GL::s_fn_glPatchParameterfv(pname, values); }
	inline void glBindTransformFeedback(GLenum target, GLuint id) { return HLF::GL::s_fn_glBindTransformFeedback(target, id); }
	inline void glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) { return HLF::GL::s_fn_glDeleteTransformFeedbacks(n, ids); }
	inline void glGenTransformFeedbacks(GLsizei n, GLuint * ids) { return HLF::GL::s_fn_glGenTransformFeedbacks(n, ids); }
	inline GLboolean glIsTransformFeedback(GLuint id) { return HLF::GL::s_fn_glIsTransformFeedback(id); }
	inline void glPauseTransformFeedback() { return HLF::GL::s_fn_glPauseTransformFeedback(); }
	inline void glResumeTransformFeedback() { return HLF::GL::s_fn_glResumeTransformFeedback(); }
	inline void glDrawTransformFeedback(GLenum mode, GLuint id) { return HLF::GL::s_fn_glDrawTransformFeedback(mode, id); }
	inline void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { return HLF::GL::s_fn_glDrawTransformFeedbackStream(mode, id, stream); }
	inline void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { return HLF::GL::s_fn_glBeginQueryIndexed(target, index, id); }
	inline void glEndQueryIndexed(GLenum target, GLuint index) { return HLF::GL::s_fn_glEndQueryIndexed(target, index); }
	inline void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetQueryIndexediv(target, index, pname, params); }
	inline void glReleaseShaderCompiler() { return HLF::GL::s_fn_glReleaseShaderCompiler(); }
	inline void glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length) { return HLF::GL::s_fn_glShaderBinary(count, shaders, binaryFormat, binary, length); }
	inline void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { return HLF::GL::s_fn_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
	inline void glDepthRangef(GLfloat n, GLfloat f) { return HLF::GL::s_fn_glDepthRangef(n, f); }
	inline void glClearDepthf(GLfloat d) { return HLF::GL::s_fn_glClearDepthf(d); }
	inline void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { return HLF::GL::s_fn_glGetProgramBinary(program, bufSize, length, binaryFormat, binary); }
	inline void glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { return HLF::GL::s_fn_glProgramBinary(program, binaryFormat, binary, length); }
	inline void glProgramParameteri(GLuint program, GLenum pname, GLint value) { return HLF::GL::s_fn_glProgramParameteri(program, pname, value); }
	inline void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { return HLF::GL::s_fn_glUseProgramStages(pipeline, stages, program); }
	inline void glActiveShaderProgram(GLuint pipeline, GLuint program) { return HLF::GL::s_fn_glActiveShaderProgram(pipeline, program); }
	inline GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) { return HLF::GL::s_fn_glCreateShaderProgramv(type, count, strings); }
	inline void glBindProgramPipeline(GLuint pipeline) { return HLF::GL::s_fn_glBindProgramPipeline(pipeline); }
	inline void glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) { return HLF::GL::s_fn_glDeleteProgramPipelines(n, pipelines); }
	inline void glGenProgramPipelines(GLsizei n, GLuint * pipelines) { return HLF::GL::s_fn_glGenProgramPipelines(n, pipelines); }
	inline GLboolean glIsProgramPipeline(GLuint pipeline) { return HLF::GL::s_fn_glIsProgramPipeline(pipeline); }
	inline void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetProgramPipelineiv(pipeline, pname, params); }
	inline void glProgramUniform1i(GLuint program, GLint location, GLint v0) { return HLF::GL::s_fn_glProgramUniform1i(program, location, v0); }
	inline void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glProgramUniform1iv(program, location, count, value); }
	inline void glProgramUniform1f(GLuint program, GLint location, GLfloat v0) { return HLF::GL::s_fn_glProgramUniform1f(program, location, v0); }
	inline void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniform1fv(program, location, count, value); }
	inline void glProgramUniform1d(GLuint program, GLint location, GLdouble v0) { return HLF::GL::s_fn_glProgramUniform1d(program, location, v0); }
	inline void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniform1dv(program, location, count, value); }
	inline void glProgramUniform1ui(GLuint program, GLint location, GLuint v0) { return HLF::GL::s_fn_glProgramUniform1ui(program, location, v0); }
	inline void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glProgramUniform1uiv(program, location, count, value); }
	inline void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { return HLF::GL::s_fn_glProgramUniform2i(program, location, v0, v1); }
	inline void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glProgramUniform2iv(program, location, count, value); }
	inline void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { return HLF::GL::s_fn_glProgramUniform2f(program, location, v0, v1); }
	inline void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniform2fv(program, location, count, value); }
	inline void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { return HLF::GL::s_fn_glProgramUniform2d(program, location, v0, v1); }
	inline void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniform2dv(program, location, count, value); }
	inline void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { return HLF::GL::s_fn_glProgramUniform2ui(program, location, v0, v1); }
	inline void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glProgramUniform2uiv(program, location, count, value); }
	inline void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { return HLF::GL::s_fn_glProgramUniform3i(program, location, v0, v1, v2); }
	inline void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glProgramUniform3iv(program, location, count, value); }
	inline void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { return HLF::GL::s_fn_glProgramUniform3f(program, location, v0, v1, v2); }
	inline void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniform3fv(program, location, count, value); }
	inline void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { return HLF::GL::s_fn_glProgramUniform3d(program, location, v0, v1, v2); }
	inline void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniform3dv(program, location, count, value); }
	inline void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { return HLF::GL::s_fn_glProgramUniform3ui(program, location, v0, v1, v2); }
	inline void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glProgramUniform3uiv(program, location, count, value); }
	inline void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { return HLF::GL::s_fn_glProgramUniform4i(program, location, v0, v1, v2, v3); }
	inline void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) { return HLF::GL::s_fn_glProgramUniform4iv(program, location, count, value); }
	inline void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { return HLF::GL::s_fn_glProgramUniform4f(program, location, v0, v1, v2, v3); }
	inline void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniform4fv(program, location, count, value); }
	inline void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { return HLF::GL::s_fn_glProgramUniform4d(program, location, v0, v1, v2, v3); }
	inline void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniform4dv(program, location, count, value); }
	inline void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { return HLF::GL::s_fn_glProgramUniform4ui(program, location, v0, v1, v2, v3); }
	inline void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { return HLF::GL::s_fn_glProgramUniform4uiv(program, location, count, value); }
	inline void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix2fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix3fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix4fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix2dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix3dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix4dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return HLF::GL::s_fn_glProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
	inline void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return HLF::GL::s_fn_glProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
	inline void glValidateProgramPipeline(GLuint pipeline) { return HLF::GL::s_fn_glValidateProgramPipeline(pipeline); }
	inline void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { return HLF::GL::s_fn_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
	inline void glVertexAttribL1d(GLuint index, GLdouble x) { return HLF::GL::s_fn_glVertexAttribL1d(index, x); }
	inline void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { return HLF::GL::s_fn_glVertexAttribL2d(index, x, y); }
	inline void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { return HLF::GL::s_fn_glVertexAttribL3d(index, x, y, z); }
	inline void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return HLF::GL::s_fn_glVertexAttribL4d(index, x, y, z, w); }
	inline void glVertexAttribL1dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttribL1dv(index, v); }
	inline void glVertexAttribL2dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttribL2dv(index, v); }
	inline void glVertexAttribL3dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttribL3dv(index, v); }
	inline void glVertexAttribL4dv(GLuint index, const GLdouble * v) { return HLF::GL::s_fn_glVertexAttribL4dv(index, v); }
	inline void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { return HLF::GL::s_fn_glVertexAttribLPointer(index, size, type, stride, pointer); }
	inline void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) { return HLF::GL::s_fn_glGetVertexAttribLdv(index, pname, params); }
	inline void glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) { return HLF::GL::s_fn_glViewportArrayv(first, count, v); }
	inline void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { return HLF::GL::s_fn_glViewportIndexedf(index, x, y, w, h); }
	inline void glViewportIndexedfv(GLuint index, const GLfloat * v) { return HLF::GL::s_fn_glViewportIndexedfv(index, v); }
	inline void glScissorArrayv(GLuint first, GLsizei count, const GLint * v) { return HLF::GL::s_fn_glScissorArrayv(first, count, v); }
	inline void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glScissorIndexed(index, left, bottom, width, height); }
	inline void glScissorIndexedv(GLuint index, const GLint * v) { return HLF::GL::s_fn_glScissorIndexedv(index, v); }
	inline void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) { return HLF::GL::s_fn_glDepthRangeArrayv(first, count, v); }
	inline void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { return HLF::GL::s_fn_glDepthRangeIndexed(index, n, f); }
	inline void glGetFloati_v(GLenum target, GLuint index, GLfloat * data) { return HLF::GL::s_fn_glGetFloati_v(target, index, data); }
	inline void glGetDoublei_v(GLenum target, GLuint index, GLdouble * data) { return HLF::GL::s_fn_glGetDoublei_v(target, index, data); }
	inline void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { return HLF::GL::s_fn_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
	inline void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { return HLF::GL::s_fn_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
	inline void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { return HLF::GL::s_fn_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
	inline void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params) { return HLF::GL::s_fn_glGetInternalformativ(target, internalformat, pname, count, params); }
	inline void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
	inline void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { return HLF::GL::s_fn_glBindImageTexture(unit, texture, level, layered, layer, access, format); }
	inline void glMemoryBarrier(GLbitfield barriers) { return HLF::GL::s_fn_glMemoryBarrier(barriers); }
	inline void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { return HLF::GL::s_fn_glTexStorage1D(target, levels, internalformat, width); }
	inline void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glTexStorage2D(target, levels, internalformat, width, height); }
	inline void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { return HLF::GL::s_fn_glTexStorage3D(target, levels, internalformat, width, height, depth); }
	inline void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { return HLF::GL::s_fn_glDrawTransformFeedbackInstanced(mode, id, instancecount); }
	inline void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { return HLF::GL::s_fn_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
	inline void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { return HLF::GL::s_fn_glClearBufferData(target, internalformat, format, type, data); }
	inline void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { return HLF::GL::s_fn_glClearBufferSubData(target, internalformat, offset, size, format, type, data); }
	inline void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { return HLF::GL::s_fn_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
	inline void glDispatchComputeIndirect(GLintptr indirect) { return HLF::GL::s_fn_glDispatchComputeIndirect(indirect); }
	inline void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { return HLF::GL::s_fn_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
	inline void glFramebufferParameteri(GLenum target, GLenum pname, GLint param) { return HLF::GL::s_fn_glFramebufferParameteri(target, pname, param); }
	inline void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetFramebufferParameteriv(target, pname, params); }
	inline void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params) { return HLF::GL::s_fn_glGetInternalformati64v(target, internalformat, pname, count, params); }
	inline void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { return HLF::GL::s_fn_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
	inline void glInvalidateTexImage(GLuint texture, GLint level) { return HLF::GL::s_fn_glInvalidateTexImage(texture, level); }
	inline void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { return HLF::GL::s_fn_glInvalidateBufferSubData(buffer, offset, length); }
	inline void glInvalidateBufferData(GLuint buffer) { return HLF::GL::s_fn_glInvalidateBufferData(buffer); }
	inline void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) { return HLF::GL::s_fn_glInvalidateFramebuffer(target, numAttachments, attachments); }
	inline void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
	inline void glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { return HLF::GL::s_fn_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
	inline void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { return HLF::GL::s_fn_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
	inline void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetProgramInterfaceiv(program, programInterface, pname, params); }
	inline GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) { return HLF::GL::s_fn_glGetProgramResourceIndex(program, programInterface, name); }
	inline void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { return HLF::GL::s_fn_glGetProgramResourceName(program, programInterface, index, bufSize, length, name); }
	inline void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params) { return HLF::GL::s_fn_glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params); }
	inline GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) { return HLF::GL::s_fn_glGetProgramResourceLocation(program, programInterface, name); }
	inline GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) { return HLF::GL::s_fn_glGetProgramResourceLocationIndex(program, programInterface, name); }
	inline void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { return HLF::GL::s_fn_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
	inline void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { return HLF::GL::s_fn_glTexBufferRange(target, internalformat, buffer, offset, size); }
	inline void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return HLF::GL::s_fn_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
	inline void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return HLF::GL::s_fn_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
	inline void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { return HLF::GL::s_fn_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
	inline void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { return HLF::GL::s_fn_glBindVertexBuffer(bindingindex, buffer, offset, stride); }
	inline void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { return HLF::GL::s_fn_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
	inline void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return HLF::GL::s_fn_glVertexAttribIFormat(attribindex, size, type, relativeoffset); }
	inline void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return HLF::GL::s_fn_glVertexAttribLFormat(attribindex, size, type, relativeoffset); }
	inline void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { return HLF::GL::s_fn_glVertexAttribBinding(attribindex, bindingindex); }
	inline void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { return HLF::GL::s_fn_glVertexBindingDivisor(bindingindex, divisor); }
	inline void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { return HLF::GL::s_fn_glDebugMessageControl(source, type, severity, count, ids, enabled); }
	inline void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { return HLF::GL::s_fn_glDebugMessageInsert(source, type, id, severity, length, buf); }
	inline void glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) { return HLF::GL::s_fn_glDebugMessageCallback(callback, userParam); }
	inline GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return HLF::GL::s_fn_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
	inline void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) { return HLF::GL::s_fn_glPushDebugGroup(source, id, length, message); }
	inline void glPopDebugGroup() { return HLF::GL::s_fn_glPopDebugGroup(); }
	inline void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { return HLF::GL::s_fn_glObjectLabel(identifier, name, length, label); }
	inline void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { return HLF::GL::s_fn_glGetObjectLabel(identifier, name, bufSize, length, label); }
	inline void glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) { return HLF::GL::s_fn_glObjectPtrLabel(ptr, length, label); }
	inline void glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { return HLF::GL::s_fn_glGetObjectPtrLabel(ptr, bufSize, length, label); }
	inline void glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { return HLF::GL::s_fn_glBufferStorage(target, size, data, flags); }
	inline void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { return HLF::GL::s_fn_glClearTexImage(texture, level, format, type, data); }
	inline void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { return HLF::GL::s_fn_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
	inline void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { return HLF::GL::s_fn_glBindBuffersBase(target, first, count, buffers); }
	inline void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { return HLF::GL::s_fn_glBindBuffersRange(target, first, count, buffers, offsets, sizes); }
	inline void glBindTextures(GLuint first, GLsizei count, const GLuint * textures) { return HLF::GL::s_fn_glBindTextures(first, count, textures); }
	inline void glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) { return HLF::GL::s_fn_glBindSamplers(first, count, samplers); }
	inline void glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) { return HLF::GL::s_fn_glBindImageTextures(first, count, textures); }
	inline void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { return HLF::GL::s_fn_glBindVertexBuffers(first, count, buffers, offsets, strides); }
	inline void glClipControl(GLenum origin, GLenum depth) { return HLF::GL::s_fn_glClipControl(origin, depth); }
	inline void glCreateTransformFeedbacks(GLsizei n, GLuint * ids) { return HLF::GL::s_fn_glCreateTransformFeedbacks(n, ids); }
	inline void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { return HLF::GL::s_fn_glTransformFeedbackBufferBase(xfb, index, buffer); }
	inline void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { return HLF::GL::s_fn_glTransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
	inline void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) { return HLF::GL::s_fn_glGetTransformFeedbackiv(xfb, pname, param); }
	inline void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) { return HLF::GL::s_fn_glGetTransformFeedbacki_v(xfb, pname, index, param); }
	inline void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { return HLF::GL::s_fn_glGetTransformFeedbacki64_v(xfb, pname, index, param); }
	inline void glCreateBuffers(GLsizei n, GLuint * buffers) { return HLF::GL::s_fn_glCreateBuffers(n, buffers); }
	inline void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { return HLF::GL::s_fn_glNamedBufferStorage(buffer, size, data, flags); }
	inline void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { return HLF::GL::s_fn_glNamedBufferData(buffer, size, data, usage); }
	inline void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { return HLF::GL::s_fn_glNamedBufferSubData(buffer, offset, size, data); }
	inline void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { return HLF::GL::s_fn_glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
	inline void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { return HLF::GL::s_fn_glClearNamedBufferData(buffer, internalformat, format, type, data); }
	inline void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { return HLF::GL::s_fn_glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
	inline void * glMapNamedBuffer(GLuint buffer, GLenum access) { return HLF::GL::s_fn_glMapNamedBuffer(buffer, access); }
	inline void * glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return HLF::GL::s_fn_glMapNamedBufferRange(buffer, offset, length, access); }
	inline GLboolean glUnmapNamedBuffer(GLuint buffer) { return HLF::GL::s_fn_glUnmapNamedBuffer(buffer); }
	inline void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { return HLF::GL::s_fn_glFlushMappedNamedBufferRange(buffer, offset, length); }
	inline void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetNamedBufferParameteriv(buffer, pname, params); }
	inline void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) { return HLF::GL::s_fn_glGetNamedBufferParameteri64v(buffer, pname, params); }
	inline void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) { return HLF::GL::s_fn_glGetNamedBufferPointerv(buffer, pname, params); }
	inline void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { return HLF::GL::s_fn_glGetNamedBufferSubData(buffer, offset, size, data); }
	inline void glCreateFramebuffers(GLsizei n, GLuint * framebuffers) { return HLF::GL::s_fn_glCreateFramebuffers(n, framebuffers); }
	inline void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { return HLF::GL::s_fn_glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
	inline void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { return HLF::GL::s_fn_glNamedFramebufferParameteri(framebuffer, pname, param); }
	inline void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { return HLF::GL::s_fn_glNamedFramebufferTexture(framebuffer, attachment, texture, level); }
	inline void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { return HLF::GL::s_fn_glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
	inline void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { return HLF::GL::s_fn_glNamedFramebufferDrawBuffer(framebuffer, buf); }
	inline void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) { return HLF::GL::s_fn_glNamedFramebufferDrawBuffers(framebuffer, n, bufs); }
	inline void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { return HLF::GL::s_fn_glNamedFramebufferReadBuffer(framebuffer, src); }
	inline void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { return HLF::GL::s_fn_glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
	inline void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
	inline void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { return HLF::GL::s_fn_glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
	inline void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { return HLF::GL::s_fn_glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
	inline void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { return HLF::GL::s_fn_glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
	inline void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { return HLF::GL::s_fn_glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
	inline void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { return HLF::GL::s_fn_glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
	inline GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return HLF::GL::s_fn_glCheckNamedFramebufferStatus(framebuffer, target); }
	inline void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) { return HLF::GL::s_fn_glGetNamedFramebufferParameteriv(framebuffer, pname, param); }
	inline void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
	inline void glCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) { return HLF::GL::s_fn_glCreateRenderbuffers(n, renderbuffers); }
	inline void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glNamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
	inline void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
	inline void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
	inline void glCreateTextures(GLenum target, GLsizei n, GLuint * textures) { return HLF::GL::s_fn_glCreateTextures(target, n, textures); }
	inline void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { return HLF::GL::s_fn_glTextureBuffer(texture, internalformat, buffer); }
	inline void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { return HLF::GL::s_fn_glTextureBufferRange(texture, internalformat, buffer, offset, size); }
	inline void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { return HLF::GL::s_fn_glTextureStorage1D(texture, levels, internalformat, width); }
	inline void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glTextureStorage2D(texture, levels, internalformat, width, height); }
	inline void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { return HLF::GL::s_fn_glTextureStorage3D(texture, levels, internalformat, width, height, depth); }
	inline void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return HLF::GL::s_fn_glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
	inline void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return HLF::GL::s_fn_glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
	inline void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
	inline void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
	inline void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return HLF::GL::s_fn_glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
	inline void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
	inline void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
	inline void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { return HLF::GL::s_fn_glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
	inline void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return HLF::GL::s_fn_glCopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
	inline void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
	inline void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return HLF::GL::s_fn_glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
	inline void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { return HLF::GL::s_fn_glTextureParameterf(texture, pname, param); }
	inline void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) { return HLF::GL::s_fn_glTextureParameterfv(texture, pname, param); }
	inline void glTextureParameteri(GLuint texture, GLenum pname, GLint param) { return HLF::GL::s_fn_glTextureParameteri(texture, pname, param); }
	inline void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) { return HLF::GL::s_fn_glTextureParameterIiv(texture, pname, params); }
	inline void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) { return HLF::GL::s_fn_glTextureParameterIuiv(texture, pname, params); }
	inline void glTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) { return HLF::GL::s_fn_glTextureParameteriv(texture, pname, param); }
	inline void glGenerateTextureMipmap(GLuint texture) { return HLF::GL::s_fn_glGenerateTextureMipmap(texture); }
	inline void glBindTextureUnit(GLuint unit, GLuint texture) { return HLF::GL::s_fn_glBindTextureUnit(unit, texture); }
	inline void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { return HLF::GL::s_fn_glGetTextureImage(texture, level, format, type, bufSize, pixels); }
	inline void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) { return HLF::GL::s_fn_glGetCompressedTextureImage(texture, level, bufSize, pixels); }
	inline void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetTextureLevelParameterfv(texture, level, pname, params); }
	inline void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTextureLevelParameteriv(texture, level, pname, params); }
	inline void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) { return HLF::GL::s_fn_glGetTextureParameterfv(texture, pname, params); }
	inline void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTextureParameterIiv(texture, pname, params); }
	inline void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) { return HLF::GL::s_fn_glGetTextureParameterIuiv(texture, pname, params); }
	inline void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) { return HLF::GL::s_fn_glGetTextureParameteriv(texture, pname, params); }
	inline void glCreateVertexArrays(GLsizei n, GLuint * arrays) { return HLF::GL::s_fn_glCreateVertexArrays(n, arrays); }
	inline void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { return HLF::GL::s_fn_glDisableVertexArrayAttrib(vaobj, index); }
	inline void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { return HLF::GL::s_fn_glEnableVertexArrayAttrib(vaobj, index); }
	inline void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { return HLF::GL::s_fn_glVertexArrayElementBuffer(vaobj, buffer); }
	inline void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { return HLF::GL::s_fn_glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
	inline void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { return HLF::GL::s_fn_glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
	inline void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { return HLF::GL::s_fn_glVertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
	inline void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { return HLF::GL::s_fn_glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
	inline void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return HLF::GL::s_fn_glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
	inline void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return HLF::GL::s_fn_glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
	inline void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { return HLF::GL::s_fn_glVertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
	inline void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) { return HLF::GL::s_fn_glGetVertexArrayiv(vaobj, pname, param); }
	inline void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { return HLF::GL::s_fn_glGetVertexArrayIndexediv(vaobj, index, pname, param); }
	inline void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { return HLF::GL::s_fn_glGetVertexArrayIndexed64iv(vaobj, index, pname, param); }
	inline void glCreateSamplers(GLsizei n, GLuint * samplers) { return HLF::GL::s_fn_glCreateSamplers(n, samplers); }
	inline void glCreateProgramPipelines(GLsizei n, GLuint * pipelines) { return HLF::GL::s_fn_glCreateProgramPipelines(n, pipelines); }
	inline void glCreateQueries(GLenum target, GLsizei n, GLuint * ids) { return HLF::GL::s_fn_glCreateQueries(target, n, ids); }
	inline void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return HLF::GL::s_fn_glGetQueryBufferObjecti64v(id, buffer, pname, offset); }
	inline void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return HLF::GL::s_fn_glGetQueryBufferObjectiv(id, buffer, pname, offset); }
	inline void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return HLF::GL::s_fn_glGetQueryBufferObjectui64v(id, buffer, pname, offset); }
	inline void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return HLF::GL::s_fn_glGetQueryBufferObjectuiv(id, buffer, pname, offset); }
	inline void glMemoryBarrierByRegion(GLbitfield barriers) { return HLF::GL::s_fn_glMemoryBarrierByRegion(barriers); }
	inline void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { return HLF::GL::s_fn_glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
	inline void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { return HLF::GL::s_fn_glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
	inline GLenum glGetGraphicsResetStatus() { return HLF::GL::s_fn_glGetGraphicsResetStatus(); }
	inline void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) { return HLF::GL::s_fn_glGetnCompressedTexImage(target, lod, bufSize, pixels); }
	inline void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { return HLF::GL::s_fn_glGetnTexImage(target, level, format, type, bufSize, pixels); }
	inline void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { return HLF::GL::s_fn_glGetnUniformdv(program, location, bufSize, params); }
	inline void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { return HLF::GL::s_fn_glGetnUniformfv(program, location, bufSize, params); }
	inline void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) { return HLF::GL::s_fn_glGetnUniformiv(program, location, bufSize, params); }
	inline void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { return HLF::GL::s_fn_glGetnUniformuiv(program, location, bufSize, params); }
	inline void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { return HLF::GL::s_fn_glReadnPixels(x, y, width, height, format, type, bufSize, data); }
	inline void glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { return HLF::GL::s_fn_glGetnMapdv(target, query, bufSize, v); }
	inline void glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { return HLF::GL::s_fn_glGetnMapfv(target, query, bufSize, v); }
	inline void glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { return HLF::GL::s_fn_glGetnMapiv(target, query, bufSize, v); }
	inline void glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) { return HLF::GL::s_fn_glGetnPixelMapfv(map, bufSize, values); }
	inline void glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) { return HLF::GL::s_fn_glGetnPixelMapuiv(map, bufSize, values); }
	inline void glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) { return HLF::GL::s_fn_glGetnPixelMapusv(map, bufSize, values); }
	inline void glGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) { return HLF::GL::s_fn_glGetnPolygonStipple(bufSize, pattern); }
	inline void glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { return HLF::GL::s_fn_glGetnColorTable(target, format, type, bufSize, table); }
	inline void glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { return HLF::GL::s_fn_glGetnConvolutionFilter(target, format, type, bufSize, image); }
	inline void glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { return HLF::GL::s_fn_glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
	inline void glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { return HLF::GL::s_fn_glGetnHistogram(target, reset, format, type, bufSize, values); }
	inline void glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { return HLF::GL::s_fn_glGetnMinmax(target, reset, format, type, bufSize, values); }
	inline void glTextureBarrier() { return HLF::GL::s_fn_glTextureBarrier(); }
	inline void glSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { return HLF::GL::s_fn_glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
	inline void glMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return HLF::GL::s_fn_glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); }
	inline void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return HLF::GL::s_fn_glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); }
	inline void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) { return HLF::GL::s_fn_glPolygonOffsetClamp(factor, units, clamp); }
}

#endif // HLFGL_ENABLE_GL

#if HLFGL_ENABLE_EGL

extern "C" {
	typedef unsigned int EGLBoolean;
	typedef void *EGLDisplay;
	#include <KHR/khrplatform.h>
	#include <EGL/eglplatform.h>
	typedef void *EGLConfig;
	typedef void *EGLSurface;
	typedef void *EGLContext;
	typedef void (*__eglMustCastToProperFunctionPointerType)(void);
	typedef unsigned int EGLenum;
	typedef void *EGLClientBuffer;
	typedef void *EGLSync;
	typedef intptr_t EGLAttrib;
	typedef khronos_utime_nanoseconds_t EGLTime;
	typedef void *EGLImage;
}

#define EGL_ALPHA_SIZE 0x3021
#define EGL_BAD_ACCESS 0x3002
#define EGL_BAD_ALLOC 0x3003
#define EGL_BAD_ATTRIBUTE 0x3004
#define EGL_BAD_CONFIG 0x3005
#define EGL_BAD_CONTEXT 0x3006
#define EGL_BAD_CURRENT_SURFACE 0x3007
#define EGL_BAD_DISPLAY 0x3008
#define EGL_BAD_MATCH 0x3009
#define EGL_BAD_NATIVE_PIXMAP 0x300A
#define EGL_BAD_NATIVE_WINDOW 0x300B
#define EGL_BAD_PARAMETER 0x300C
#define EGL_BAD_SURFACE 0x300D
#define EGL_BLUE_SIZE 0x3022
#define EGL_BUFFER_SIZE 0x3020
#define EGL_CONFIG_CAVEAT 0x3027
#define EGL_CONFIG_ID 0x3028
#define EGL_CORE_NATIVE_ENGINE 0x305B
#define EGL_DEPTH_SIZE 0x3025
#define EGL_DONT_CARE EGL_CAST(EGLint,-1)
#define EGL_DRAW 0x3059
#define EGL_EXTENSIONS 0x3055
#define EGL_FALSE 0
#define EGL_GREEN_SIZE 0x3023
#define EGL_HEIGHT 0x3056
#define EGL_LARGEST_PBUFFER 0x3058
#define EGL_LEVEL 0x3029
#define EGL_MAX_PBUFFER_HEIGHT 0x302A
#define EGL_MAX_PBUFFER_PIXELS 0x302B
#define EGL_MAX_PBUFFER_WIDTH 0x302C
#define EGL_NATIVE_RENDERABLE 0x302D
#define EGL_NATIVE_VISUAL_ID 0x302E
#define EGL_NATIVE_VISUAL_TYPE 0x302F
#define EGL_NONE 0x3038
#define EGL_NON_CONFORMANT_CONFIG 0x3051
#define EGL_NOT_INITIALIZED 0x3001
#define EGL_NO_CONTEXT EGL_CAST(EGLContext,0)
#define EGL_NO_DISPLAY EGL_CAST(EGLDisplay,0)
#define EGL_NO_SURFACE EGL_CAST(EGLSurface,0)
#define EGL_PBUFFER_BIT 0x0001
#define EGL_PIXMAP_BIT 0x0002
#define EGL_READ 0x305A
#define EGL_RED_SIZE 0x3024
#define EGL_SAMPLES 0x3031
#define EGL_SAMPLE_BUFFERS 0x3032
#define EGL_SLOW_CONFIG 0x3050
#define EGL_STENCIL_SIZE 0x3026
#define EGL_SUCCESS 0x3000
#define EGL_SURFACE_TYPE 0x3033
#define EGL_TRANSPARENT_BLUE_VALUE 0x3035
#define EGL_TRANSPARENT_GREEN_VALUE 0x3036
#define EGL_TRANSPARENT_RED_VALUE 0x3037
#define EGL_TRANSPARENT_RGB 0x3052
#define EGL_TRANSPARENT_TYPE 0x3034
#define EGL_TRUE 1
#define EGL_VENDOR 0x3053
#define EGL_VERSION 0x3054
#define EGL_WIDTH 0x3057
#define EGL_WINDOW_BIT 0x0004
#define EGL_BACK_BUFFER 0x3084
#define EGL_BIND_TO_TEXTURE_RGB 0x3039
#define EGL_BIND_TO_TEXTURE_RGBA 0x303A
#define EGL_CONTEXT_LOST 0x300E
#define EGL_MIN_SWAP_INTERVAL 0x303B
#define EGL_MAX_SWAP_INTERVAL 0x303C
#define EGL_MIPMAP_TEXTURE 0x3082
#define EGL_MIPMAP_LEVEL 0x3083
#define EGL_NO_TEXTURE 0x305C
#define EGL_TEXTURE_2D 0x305F
#define EGL_TEXTURE_FORMAT 0x3080
#define EGL_TEXTURE_RGB 0x305D
#define EGL_TEXTURE_RGBA 0x305E
#define EGL_TEXTURE_TARGET 0x3081
#define EGL_ALPHA_FORMAT 0x3088
#define EGL_ALPHA_FORMAT_NONPRE 0x308B
#define EGL_ALPHA_FORMAT_PRE 0x308C
#define EGL_ALPHA_MASK_SIZE 0x303E
#define EGL_BUFFER_PRESERVED 0x3094
#define EGL_BUFFER_DESTROYED 0x3095
#define EGL_CLIENT_APIS 0x308D
#define EGL_COLORSPACE 0x3087
#define EGL_COLORSPACE_sRGB 0x3089
#define EGL_COLORSPACE_LINEAR 0x308A
#define EGL_COLOR_BUFFER_TYPE 0x303F
#define EGL_CONTEXT_CLIENT_TYPE 0x3097
#define EGL_DISPLAY_SCALING 10000
#define EGL_HORIZONTAL_RESOLUTION 0x3090
#define EGL_LUMINANCE_BUFFER 0x308F
#define EGL_LUMINANCE_SIZE 0x303D
#define EGL_OPENGL_ES_BIT 0x0001
#define EGL_OPENVG_BIT 0x0002
#define EGL_OPENGL_ES_API 0x30A0
#define EGL_OPENVG_API 0x30A1
#define EGL_OPENVG_IMAGE 0x3096
#define EGL_PIXEL_ASPECT_RATIO 0x3092
#define EGL_RENDERABLE_TYPE 0x3040
#define EGL_RENDER_BUFFER 0x3086
#define EGL_RGB_BUFFER 0x308E
#define EGL_SINGLE_BUFFER 0x3085
#define EGL_SWAP_BEHAVIOR 0x3093
#define EGL_UNKNOWN EGL_CAST(EGLint,-1)
#define EGL_VERTICAL_RESOLUTION 0x3091
#define EGL_CONFORMANT 0x3042
#define EGL_CONTEXT_CLIENT_VERSION 0x3098
#define EGL_MATCH_NATIVE_PIXMAP 0x3041
#define EGL_OPENGL_ES2_BIT 0x0004
#define EGL_VG_ALPHA_FORMAT 0x3088
#define EGL_VG_ALPHA_FORMAT_NONPRE 0x308B
#define EGL_VG_ALPHA_FORMAT_PRE 0x308C
#define EGL_VG_ALPHA_FORMAT_PRE_BIT 0x0040
#define EGL_VG_COLORSPACE 0x3087
#define EGL_VG_COLORSPACE_sRGB 0x3089
#define EGL_VG_COLORSPACE_LINEAR 0x308A
#define EGL_VG_COLORSPACE_LINEAR_BIT 0x0020
#define EGL_DEFAULT_DISPLAY EGL_CAST(EGLNativeDisplayType,0)
#define EGL_MULTISAMPLE_RESOLVE_BOX_BIT 0x0200
#define EGL_MULTISAMPLE_RESOLVE 0x3099
#define EGL_MULTISAMPLE_RESOLVE_DEFAULT 0x309A
#define EGL_MULTISAMPLE_RESOLVE_BOX 0x309B
#define EGL_OPENGL_API 0x30A2
#define EGL_OPENGL_BIT 0x0008
#define EGL_SWAP_BEHAVIOR_PRESERVED_BIT 0x0400
#define EGL_CONTEXT_MAJOR_VERSION 0x3098
#define EGL_CONTEXT_MINOR_VERSION 0x30FB
#define EGL_CONTEXT_OPENGL_PROFILE_MASK 0x30FD
#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY 0x31BD
#define EGL_NO_RESET_NOTIFICATION 0x31BE
#define EGL_LOSE_CONTEXT_ON_RESET 0x31BF
#define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT 0x00000001
#define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT 0x00000002
#define EGL_CONTEXT_OPENGL_DEBUG 0x31B0
#define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE 0x31B1
#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS 0x31B2
#define EGL_OPENGL_ES3_BIT 0x00000040
#define EGL_CL_EVENT_HANDLE 0x309C
#define EGL_SYNC_CL_EVENT 0x30FE
#define EGL_SYNC_CL_EVENT_COMPLETE 0x30FF
#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE 0x30F0
#define EGL_SYNC_TYPE 0x30F7
#define EGL_SYNC_STATUS 0x30F1
#define EGL_SYNC_CONDITION 0x30F8
#define EGL_SIGNALED 0x30F2
#define EGL_UNSIGNALED 0x30F3
#define EGL_SYNC_FLUSH_COMMANDS_BIT 0x0001
#define EGL_FOREVER 0xFFFFFFFFFFFFFFFF
#define EGL_TIMEOUT_EXPIRED 0x30F5
#define EGL_CONDITION_SATISFIED 0x30F6
#define EGL_NO_SYNC EGL_CAST(EGLSync,0)
#define EGL_SYNC_FENCE 0x30F9
#define EGL_GL_COLORSPACE 0x309D
#define EGL_GL_COLORSPACE_SRGB 0x3089
#define EGL_GL_COLORSPACE_LINEAR 0x308A
#define EGL_GL_RENDERBUFFER 0x30B9
#define EGL_GL_TEXTURE_2D 0x30B1
#define EGL_GL_TEXTURE_LEVEL 0x30BC
#define EGL_GL_TEXTURE_3D 0x30B2
#define EGL_GL_TEXTURE_ZOFFSET 0x30BD
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x30B3
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x30B4
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x30B5
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x30B6
#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x30B7
#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x30B8
#define EGL_IMAGE_PRESERVED 0x30D2
#define EGL_NO_IMAGE EGL_CAST(EGLImage,0)

namespace HLF::GL {
	typedef EGLBoolean(*Fn_eglChooseConfig)(EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config);
	inline Fn_eglChooseConfig s_fn_eglChooseConfig {};
	typedef EGLBoolean(*Fn_eglCopyBuffers)(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
	inline Fn_eglCopyBuffers s_fn_eglCopyBuffers {};
	typedef EGLContext(*Fn_eglCreateContext)(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list);
	inline Fn_eglCreateContext s_fn_eglCreateContext {};
	typedef EGLSurface(*Fn_eglCreatePbufferSurface)(EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list);
	inline Fn_eglCreatePbufferSurface s_fn_eglCreatePbufferSurface {};
	typedef EGLSurface(*Fn_eglCreatePixmapSurface)(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list);
	inline Fn_eglCreatePixmapSurface s_fn_eglCreatePixmapSurface {};
	typedef EGLSurface(*Fn_eglCreateWindowSurface)(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list);
	inline Fn_eglCreateWindowSurface s_fn_eglCreateWindowSurface {};
	typedef EGLBoolean(*Fn_eglDestroyContext)(EGLDisplay dpy, EGLContext ctx);
	inline Fn_eglDestroyContext s_fn_eglDestroyContext {};
	typedef EGLBoolean(*Fn_eglDestroySurface)(EGLDisplay dpy, EGLSurface surface);
	inline Fn_eglDestroySurface s_fn_eglDestroySurface {};
	typedef EGLBoolean(*Fn_eglGetConfigAttrib)(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value);
	inline Fn_eglGetConfigAttrib s_fn_eglGetConfigAttrib {};
	typedef EGLBoolean(*Fn_eglGetConfigs)(EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config);
	inline Fn_eglGetConfigs s_fn_eglGetConfigs {};
	typedef EGLDisplay(*Fn_eglGetCurrentDisplay)();
	inline Fn_eglGetCurrentDisplay s_fn_eglGetCurrentDisplay {};
	typedef EGLSurface(*Fn_eglGetCurrentSurface)(EGLint readdraw);
	inline Fn_eglGetCurrentSurface s_fn_eglGetCurrentSurface {};
	typedef EGLDisplay(*Fn_eglGetDisplay)(EGLNativeDisplayType display_id);
	inline Fn_eglGetDisplay s_fn_eglGetDisplay {};
	typedef EGLint(*Fn_eglGetError)();
	inline Fn_eglGetError s_fn_eglGetError {};
	typedef __eglMustCastToProperFunctionPointerType(*Fn_eglGetProcAddress)(const char * procname);
	inline Fn_eglGetProcAddress s_fn_eglGetProcAddress {};
	typedef EGLBoolean(*Fn_eglInitialize)(EGLDisplay dpy, EGLint * major, EGLint * minor);
	inline Fn_eglInitialize s_fn_eglInitialize {};
	typedef EGLBoolean(*Fn_eglMakeCurrent)(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
	inline Fn_eglMakeCurrent s_fn_eglMakeCurrent {};
	typedef EGLBoolean(*Fn_eglQueryContext)(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value);
	inline Fn_eglQueryContext s_fn_eglQueryContext {};
	typedef const char *(*Fn_eglQueryString)(EGLDisplay dpy, EGLint name);
	inline Fn_eglQueryString s_fn_eglQueryString {};
	typedef EGLBoolean(*Fn_eglQuerySurface)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value);
	inline Fn_eglQuerySurface s_fn_eglQuerySurface {};
	typedef EGLBoolean(*Fn_eglSwapBuffers)(EGLDisplay dpy, EGLSurface surface);
	inline Fn_eglSwapBuffers s_fn_eglSwapBuffers {};
	typedef EGLBoolean(*Fn_eglTerminate)(EGLDisplay dpy);
	inline Fn_eglTerminate s_fn_eglTerminate {};
	typedef EGLBoolean(*Fn_eglWaitGL)();
	inline Fn_eglWaitGL s_fn_eglWaitGL {};
	typedef EGLBoolean(*Fn_eglWaitNative)(EGLint engine);
	inline Fn_eglWaitNative s_fn_eglWaitNative {};
	typedef EGLBoolean(*Fn_eglBindTexImage)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
	inline Fn_eglBindTexImage s_fn_eglBindTexImage {};
	typedef EGLBoolean(*Fn_eglReleaseTexImage)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
	inline Fn_eglReleaseTexImage s_fn_eglReleaseTexImage {};
	typedef EGLBoolean(*Fn_eglSurfaceAttrib)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
	inline Fn_eglSurfaceAttrib s_fn_eglSurfaceAttrib {};
	typedef EGLBoolean(*Fn_eglSwapInterval)(EGLDisplay dpy, EGLint interval);
	inline Fn_eglSwapInterval s_fn_eglSwapInterval {};
	typedef EGLBoolean(*Fn_eglBindAPI)(EGLenum api);
	inline Fn_eglBindAPI s_fn_eglBindAPI {};
	typedef EGLenum(*Fn_eglQueryAPI)();
	inline Fn_eglQueryAPI s_fn_eglQueryAPI {};
	typedef EGLSurface(*Fn_eglCreatePbufferFromClientBuffer)(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list);
	inline Fn_eglCreatePbufferFromClientBuffer s_fn_eglCreatePbufferFromClientBuffer {};
	typedef EGLBoolean(*Fn_eglReleaseThread)();
	inline Fn_eglReleaseThread s_fn_eglReleaseThread {};
	typedef EGLBoolean(*Fn_eglWaitClient)();
	inline Fn_eglWaitClient s_fn_eglWaitClient {};
	typedef EGLContext(*Fn_eglGetCurrentContext)();
	inline Fn_eglGetCurrentContext s_fn_eglGetCurrentContext {};
	typedef EGLSync(*Fn_eglCreateSync)(EGLDisplay dpy, EGLenum type, const EGLAttrib * attrib_list);
	inline Fn_eglCreateSync s_fn_eglCreateSync {};
	typedef EGLBoolean(*Fn_eglDestroySync)(EGLDisplay dpy, EGLSync sync);
	inline Fn_eglDestroySync s_fn_eglDestroySync {};
	typedef EGLint(*Fn_eglClientWaitSync)(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout);
	inline Fn_eglClientWaitSync s_fn_eglClientWaitSync {};
	typedef EGLBoolean(*Fn_eglGetSyncAttrib)(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib * value);
	inline Fn_eglGetSyncAttrib s_fn_eglGetSyncAttrib {};
	typedef EGLImage(*Fn_eglCreateImage)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib * attrib_list);
	inline Fn_eglCreateImage s_fn_eglCreateImage {};
	typedef EGLBoolean(*Fn_eglDestroyImage)(EGLDisplay dpy, EGLImage image);
	inline Fn_eglDestroyImage s_fn_eglDestroyImage {};
	typedef EGLDisplay(*Fn_eglGetPlatformDisplay)(EGLenum platform, void * native_display, const EGLAttrib * attrib_list);
	inline Fn_eglGetPlatformDisplay s_fn_eglGetPlatformDisplay {};
	typedef EGLSurface(*Fn_eglCreatePlatformWindowSurface)(EGLDisplay dpy, EGLConfig config, void * native_window, const EGLAttrib * attrib_list);
	inline Fn_eglCreatePlatformWindowSurface s_fn_eglCreatePlatformWindowSurface {};
	typedef EGLSurface(*Fn_eglCreatePlatformPixmapSurface)(EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLAttrib * attrib_list);
	inline Fn_eglCreatePlatformPixmapSurface s_fn_eglCreatePlatformPixmapSurface {};
	typedef EGLBoolean(*Fn_eglWaitSync)(EGLDisplay dpy, EGLSync sync, EGLint flags);
	inline Fn_eglWaitSync s_fn_eglWaitSync {};

	inline void EGLLoadFunctionPointers(Version initVersion, Fn_GetProcAddress proc) {
		if (initVersion >= Version {1, 0}) {
			s_fn_eglChooseConfig = (Fn_eglChooseConfig)proc("eglChooseConfig");
			s_fn_eglCopyBuffers = (Fn_eglCopyBuffers)proc("eglCopyBuffers");
			s_fn_eglCreateContext = (Fn_eglCreateContext)proc("eglCreateContext");
			s_fn_eglCreatePbufferSurface = (Fn_eglCreatePbufferSurface)proc("eglCreatePbufferSurface");
			s_fn_eglCreatePixmapSurface = (Fn_eglCreatePixmapSurface)proc("eglCreatePixmapSurface");
			s_fn_eglCreateWindowSurface = (Fn_eglCreateWindowSurface)proc("eglCreateWindowSurface");
			s_fn_eglDestroyContext = (Fn_eglDestroyContext)proc("eglDestroyContext");
			s_fn_eglDestroySurface = (Fn_eglDestroySurface)proc("eglDestroySurface");
			s_fn_eglGetConfigAttrib = (Fn_eglGetConfigAttrib)proc("eglGetConfigAttrib");
			s_fn_eglGetConfigs = (Fn_eglGetConfigs)proc("eglGetConfigs");
			s_fn_eglGetCurrentDisplay = (Fn_eglGetCurrentDisplay)proc("eglGetCurrentDisplay");
			s_fn_eglGetCurrentSurface = (Fn_eglGetCurrentSurface)proc("eglGetCurrentSurface");
			s_fn_eglGetDisplay = (Fn_eglGetDisplay)proc("eglGetDisplay");
			s_fn_eglGetError = (Fn_eglGetError)proc("eglGetError");
			s_fn_eglGetProcAddress = (Fn_eglGetProcAddress)proc("eglGetProcAddress");
			s_fn_eglInitialize = (Fn_eglInitialize)proc("eglInitialize");
			s_fn_eglMakeCurrent = (Fn_eglMakeCurrent)proc("eglMakeCurrent");
			s_fn_eglQueryContext = (Fn_eglQueryContext)proc("eglQueryContext");
			s_fn_eglQueryString = (Fn_eglQueryString)proc("eglQueryString");
			s_fn_eglQuerySurface = (Fn_eglQuerySurface)proc("eglQuerySurface");
			s_fn_eglSwapBuffers = (Fn_eglSwapBuffers)proc("eglSwapBuffers");
			s_fn_eglTerminate = (Fn_eglTerminate)proc("eglTerminate");
			s_fn_eglWaitGL = (Fn_eglWaitGL)proc("eglWaitGL");
			s_fn_eglWaitNative = (Fn_eglWaitNative)proc("eglWaitNative");
		}
		else return;

		if (initVersion >= Version {1, 1}) {
			s_fn_eglBindTexImage = (Fn_eglBindTexImage)proc("eglBindTexImage");
			s_fn_eglReleaseTexImage = (Fn_eglReleaseTexImage)proc("eglReleaseTexImage");
			s_fn_eglSurfaceAttrib = (Fn_eglSurfaceAttrib)proc("eglSurfaceAttrib");
			s_fn_eglSwapInterval = (Fn_eglSwapInterval)proc("eglSwapInterval");
		}
		else return;

		if (initVersion >= Version {1, 2}) {
			s_fn_eglBindAPI = (Fn_eglBindAPI)proc("eglBindAPI");
			s_fn_eglQueryAPI = (Fn_eglQueryAPI)proc("eglQueryAPI");
			s_fn_eglCreatePbufferFromClientBuffer = (Fn_eglCreatePbufferFromClientBuffer)proc("eglCreatePbufferFromClientBuffer");
			s_fn_eglReleaseThread = (Fn_eglReleaseThread)proc("eglReleaseThread");
			s_fn_eglWaitClient = (Fn_eglWaitClient)proc("eglWaitClient");
		}
		else return;

		if (initVersion >= Version {1, 4}) {
			s_fn_eglGetCurrentContext = (Fn_eglGetCurrentContext)proc("eglGetCurrentContext");
		}
		else return;

		if (initVersion >= Version {1, 5}) {
			s_fn_eglCreateSync = (Fn_eglCreateSync)proc("eglCreateSync");
			s_fn_eglDestroySync = (Fn_eglDestroySync)proc("eglDestroySync");
			s_fn_eglClientWaitSync = (Fn_eglClientWaitSync)proc("eglClientWaitSync");
			s_fn_eglGetSyncAttrib = (Fn_eglGetSyncAttrib)proc("eglGetSyncAttrib");
			s_fn_eglCreateImage = (Fn_eglCreateImage)proc("eglCreateImage");
			s_fn_eglDestroyImage = (Fn_eglDestroyImage)proc("eglDestroyImage");
			s_fn_eglGetPlatformDisplay = (Fn_eglGetPlatformDisplay)proc("eglGetPlatformDisplay");
			s_fn_eglCreatePlatformWindowSurface = (Fn_eglCreatePlatformWindowSurface)proc("eglCreatePlatformWindowSurface");
			s_fn_eglCreatePlatformPixmapSurface = (Fn_eglCreatePlatformPixmapSurface)proc("eglCreatePlatformPixmapSurface");
			s_fn_eglWaitSync = (Fn_eglWaitSync)proc("eglWaitSync");
		}
		else return;
	}
}

extern "C" {
	inline EGLBoolean eglChooseConfig(EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config) { return HLF::GL::s_fn_eglChooseConfig(dpy, attrib_list, configs, config_size, num_config); }
	inline EGLBoolean eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target) { return HLF::GL::s_fn_eglCopyBuffers(dpy, surface, target); }
	inline EGLContext eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list) { return HLF::GL::s_fn_eglCreateContext(dpy, config, share_context, attrib_list); }
	inline EGLSurface eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list) { return HLF::GL::s_fn_eglCreatePbufferSurface(dpy, config, attrib_list); }
	inline EGLSurface eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list) { return HLF::GL::s_fn_eglCreatePixmapSurface(dpy, config, pixmap, attrib_list); }
	inline EGLSurface eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list) { return HLF::GL::s_fn_eglCreateWindowSurface(dpy, config, win, attrib_list); }
	inline EGLBoolean eglDestroyContext(EGLDisplay dpy, EGLContext ctx) { return HLF::GL::s_fn_eglDestroyContext(dpy, ctx); }
	inline EGLBoolean eglDestroySurface(EGLDisplay dpy, EGLSurface surface) { return HLF::GL::s_fn_eglDestroySurface(dpy, surface); }
	inline EGLBoolean eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value) { return HLF::GL::s_fn_eglGetConfigAttrib(dpy, config, attribute, value); }
	inline EGLBoolean eglGetConfigs(EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config) { return HLF::GL::s_fn_eglGetConfigs(dpy, configs, config_size, num_config); }
	inline EGLDisplay eglGetCurrentDisplay() { return HLF::GL::s_fn_eglGetCurrentDisplay(); }
	inline EGLSurface eglGetCurrentSurface(EGLint readdraw) { return HLF::GL::s_fn_eglGetCurrentSurface(readdraw); }
	inline EGLDisplay eglGetDisplay(EGLNativeDisplayType display_id) { return HLF::GL::s_fn_eglGetDisplay(display_id); }
	inline EGLint eglGetError() { return HLF::GL::s_fn_eglGetError(); }
	inline __eglMustCastToProperFunctionPointerType eglGetProcAddress(const char * procname) { return HLF::GL::s_fn_eglGetProcAddress(procname); }
	inline EGLBoolean eglInitialize(EGLDisplay dpy, EGLint * major, EGLint * minor) { return HLF::GL::s_fn_eglInitialize(dpy, major, minor); }
	inline EGLBoolean eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx) { return HLF::GL::s_fn_eglMakeCurrent(dpy, draw, read, ctx); }
	inline EGLBoolean eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value) { return HLF::GL::s_fn_eglQueryContext(dpy, ctx, attribute, value); }
	inline const char * eglQueryString(EGLDisplay dpy, EGLint name) { return HLF::GL::s_fn_eglQueryString(dpy, name); }
	inline EGLBoolean eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value) { return HLF::GL::s_fn_eglQuerySurface(dpy, surface, attribute, value); }
	inline EGLBoolean eglSwapBuffers(EGLDisplay dpy, EGLSurface surface) { return HLF::GL::s_fn_eglSwapBuffers(dpy, surface); }
	inline EGLBoolean eglTerminate(EGLDisplay dpy) { return HLF::GL::s_fn_eglTerminate(dpy); }
	inline EGLBoolean eglWaitGL() { return HLF::GL::s_fn_eglWaitGL(); }
	inline EGLBoolean eglWaitNative(EGLint engine) { return HLF::GL::s_fn_eglWaitNative(engine); }
	inline EGLBoolean eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) { return HLF::GL::s_fn_eglBindTexImage(dpy, surface, buffer); }
	inline EGLBoolean eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) { return HLF::GL::s_fn_eglReleaseTexImage(dpy, surface, buffer); }
	inline EGLBoolean eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value) { return HLF::GL::s_fn_eglSurfaceAttrib(dpy, surface, attribute, value); }
	inline EGLBoolean eglSwapInterval(EGLDisplay dpy, EGLint interval) { return HLF::GL::s_fn_eglSwapInterval(dpy, interval); }
	inline EGLBoolean eglBindAPI(EGLenum api) { return HLF::GL::s_fn_eglBindAPI(api); }
	inline EGLenum eglQueryAPI() { return HLF::GL::s_fn_eglQueryAPI(); }
	inline EGLSurface eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list) { return HLF::GL::s_fn_eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list); }
	inline EGLBoolean eglReleaseThread() { return HLF::GL::s_fn_eglReleaseThread(); }
	inline EGLBoolean eglWaitClient() { return HLF::GL::s_fn_eglWaitClient(); }
	inline EGLContext eglGetCurrentContext() { return HLF::GL::s_fn_eglGetCurrentContext(); }
	inline EGLSync eglCreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib * attrib_list) { return HLF::GL::s_fn_eglCreateSync(dpy, type, attrib_list); }
	inline EGLBoolean eglDestroySync(EGLDisplay dpy, EGLSync sync) { return HLF::GL::s_fn_eglDestroySync(dpy, sync); }
	inline EGLint eglClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout) { return HLF::GL::s_fn_eglClientWaitSync(dpy, sync, flags, timeout); }
	inline EGLBoolean eglGetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib * value) { return HLF::GL::s_fn_eglGetSyncAttrib(dpy, sync, attribute, value); }
	inline EGLImage eglCreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib * attrib_list) { return HLF::GL::s_fn_eglCreateImage(dpy, ctx, target, buffer, attrib_list); }
	inline EGLBoolean eglDestroyImage(EGLDisplay dpy, EGLImage image) { return HLF::GL::s_fn_eglDestroyImage(dpy, image); }
	inline EGLDisplay eglGetPlatformDisplay(EGLenum platform, void * native_display, const EGLAttrib * attrib_list) { return HLF::GL::s_fn_eglGetPlatformDisplay(platform, native_display, attrib_list); }
	inline EGLSurface eglCreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig config, void * native_window, const EGLAttrib * attrib_list) { return HLF::GL::s_fn_eglCreatePlatformWindowSurface(dpy, config, native_window, attrib_list); }
	inline EGLSurface eglCreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLAttrib * attrib_list) { return HLF::GL::s_fn_eglCreatePlatformPixmapSurface(dpy, config, native_pixmap, attrib_list); }
	inline EGLBoolean eglWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags) { return HLF::GL::s_fn_eglWaitSync(dpy, sync, flags); }
}

#endif // HLFGL_ENABLE_EGL